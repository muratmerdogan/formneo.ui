/* tslint:disable */
/* eslint-disable */
/**
 * formneo.api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

export interface ActivityDto {
    'id'?: string;
    'customerId'?: string;
    'opportunityId'?: string | null;
    'type'?: number;
    'status'?: number;
    'dueDate'?: string | null;
    'subject'?: string | null;
    'description'?: string | null;
    'assignedToUserId'?: string | null;
    'startTime'?: string | null;
    'endTime'?: string | null;
    'rowVersion'?: string | null;
}

export const AddressType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type AddressType = typeof AddressType[keyof typeof AddressType];



export const AdminLevel = {
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type AdminLevel = typeof AdminLevel[keyof typeof AdminLevel];


export interface AllList {
    'id'?: number;
    'list_id'?: number;
    'status'?: number;
    'value'?: string | null;
}
export interface ApproveHeadInfo {
    'pendingCount'?: number;
    'rejectCount'?: number;
    'approveCount'?: number;
    'sendCount'?: number;
    'items'?: Array<ApproveItemsDto> | null;
}
export interface ApproveItems {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'workflowItemId'?: string;
    'approveUser'?: string | null;
    'approveUserNameSurname'?: string | null;
    'approvedUser_Runtime'?: string | null;
    'approvedUser_RuntimeNameSurname'?: string | null;
    'approvedUser_RuntimeNote'?: string | null;
    'approvedUser_RuntimeNumberManDay'?: string | null;
    'workFlowDescription'?: string | null;
    'approverStatus'?: ApproverStatus;
    'workflowItem'?: WorkflowItem;
}


export interface ApproveItemsDto {
    'id'?: string;
    'workflowItemId'?: string;
    'shortId'?: string | null;
    'shortWorkflowItemId'?: string | null;
    'approveUser'?: string | null;
    'approvedUser_Runtime'?: string | null;
    'approvedUser_RuntimeNote'?: string | null;
    'approvedUser_RuntimeNumberManDay'?: string | null;
    'approveUserNameSurname'?: string | null;
    'approvedUser_RuntimeNameSurname'?: string | null;
    'approverStatus'?: ApproverStatus;
    'workFlowItem'?: WorkFlowItemDto;
    'createdDate'?: string;
    'updatedDate'?: string;
    'uniqNumber'?: number;
    'workFlowHead'?: WorkFlowHeadDto;
}


export interface ApproveItemsDtoResult {
    'count'?: number;
    'approveItemsDtoList'?: Array<ApproveItemsDto> | null;
}

export const ApproveStatus = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type ApproveStatus = typeof ApproveStatus[keyof typeof ApproveStatus];



export const ApproveWorkDesign = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type ApproveWorkDesign = typeof ApproveWorkDesign[keyof typeof ApproveWorkDesign];



export const ApproverStatus = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type ApproverStatus = typeof ApproverStatus[keyof typeof ApproverStatus];


export interface BudgetAdminUserInsertDto {
    'userName'?: string | null;
    'mail'?: string | null;
    'isAdmin'?: boolean;
    'isDoProxy'?: boolean;
    'proxyUser'?: string | null;
    'adminLevel'?: AdminLevel;
}


export interface BudgetAdminUserListDto {
    'id'?: string;
    'userName'?: string | null;
    'mail'?: string | null;
    'isAdmin'?: boolean;
    'isDoProxy'?: boolean;
    'proxyUser'?: string | null;
    'adminLevel'?: AdminLevel;
    'adminLevelText'?: string | null;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
}


export interface BudgetAdminUserUpdateDto {
    'id'?: string;
    'userName'?: string | null;
    'mail'?: string | null;
    'isAdmin'?: boolean;
    'isDoProxy'?: boolean;
    'proxyUser'?: string | null;
    'adminLevel'?: AdminLevel;
}


export interface BudgetJobCodeRequestInsertDto {
    'jobCode': string;
    'name'?: string | null;
    'name_En': string;
    'requestReason': string;
    'isSend'?: boolean;
    'workflowHeadId'?: string | null;
    'startDate'?: string;
    'endDate'?: string;
    'name_Ru_RU': string;
    'name_En_Debug'?: string | null;
    'name_Tr_TR': string;
    'name_En_US': string;
    'description_En_Debug'?: string | null;
    'description_En_US'?: string | null;
    'description_Ru_RU'?: string | null;
    'description_Tr_TR'?: string | null;
    'isFullTime'?: boolean;
    'regularTemporary'?: string | null;
    'defaultEmployeeClass': string;
    'isFulltimeEmployee'?: boolean;
    'grade': string;
    'jobFunction': string;
    'positionLevel': string;
    'cust_Joblevelgroup': string;
    'cust_Metin'?: string | null;
    'cust_Jobcode': string;
    'cust_AdinesStatus'?: string | null;
    'cust_EmploymentType': string;
    'cust_GorevBirimTipi': string;
    'cust_IsManager'?: boolean;
    'cust_Bolum': string;
    'cust_Ronesanskademe': string;
    'cust_Haykademe': string;
}
export interface BudgetJobCodeRequestListDto {
    'id'?: string;
    'jobCode'?: string | null;
    'name'?: string | null;
    'name_En'?: string | null;
    'requestReason'?: string | null;
    'isSend'?: boolean;
    'workflowHeadId'?: string;
    'startDate'?: string;
    'endDate'?: string;
    'name_Ru_RU'?: string | null;
    'name_En_Debug'?: string | null;
    'name_Tr_TR'?: string | null;
    'name_En_US'?: string | null;
    'description_En_Debug'?: string | null;
    'description_En_US'?: string | null;
    'description_Ru_RU'?: string | null;
    'description_Tr_TR'?: string | null;
    'workflowHead'?: WorkflowHead;
    'isFullTime'?: boolean;
    'regularTemporary'?: string | null;
    'defaultEmployeeClass'?: string | null;
    'isFulltimeEmployee'?: boolean;
    'grade'?: string | null;
    'jobFunction'?: string | null;
    'positionLevel'?: string | null;
    'cust_Joblevelgroup'?: string | null;
    'cust_Metin'?: string | null;
    'cust_Jobcode'?: string | null;
    'cust_AdinesStatus'?: string | null;
    'cust_EmploymentType'?: string | null;
    'cust_GorevBirimTipi'?: string | null;
    'cust_IsManager'?: boolean;
    'cust_Bolum'?: string | null;
    'cust_Ronesanskademe'?: string | null;
    'cust_Haykademe'?: string | null;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
}
export interface BudgetJobCodeRequestListDtoResult {
    'budgetJobCodeRequestListDtoList'?: Array<BudgetJobCodeRequestListDto> | null;
    'count'?: number;
}
export interface BudgetJobCodeRequestUpdateDto {
    'id'?: string;
    'jobCode': string;
    'name'?: string | null;
    'name_En': string;
    'requestReason': string;
    'isSend'?: boolean;
    'workflowHeadId'?: string | null;
    'startDate'?: string;
    'endDate'?: string;
    'name_Ru_RU': string;
    'name_En_Debug'?: string | null;
    'name_Tr_TR': string;
    'name_En_US': string;
    'description_En_Debug'?: string | null;
    'description_En_US'?: string | null;
    'description_Ru_RU'?: string | null;
    'description_Tr_TR'?: string | null;
    'isFullTime'?: boolean;
    'regularTemporary'?: string | null;
    'defaultEmployeeClass': string;
    'isFulltimeEmployee'?: boolean;
    'grade': string;
    'jobFunction': string;
    'positionLevel'?: string | null;
    'cust_Joblevelgroup': string;
    'cust_Metin'?: string | null;
    'cust_Jobcode'?: string | null;
    'cust_AdinesStatus'?: string | null;
    'cust_EmploymentType': string;
    'cust_GorevBirimTipi'?: string | null;
    'cust_IsManager'?: boolean;
    'cust_Bolum'?: string | null;
    'cust_Ronesanskademe': string;
    'cust_Haykademe': string;
}
export interface BudgetNormCodeRequestInsertDto {
    'code'?: string | null;
    'effectiveStartDate'?: string;
    'cust_IseBaslamaTarihi'?: string;
    'cust_PlanlananIseGiris'?: string;
    'cust_plannedEndDate'?: string;
    'cust_actualhiredate'?: string;
    'effectiveStatus'?: string | null;
    'vacant'?: boolean;
    'changeReason'?: string | null;
    'cust_GeoZone'?: string | null;
    'cust_company'?: string | null;
    'externalName_tr_TR'?: string | null;
    'externalName_defaultValue'?: string | null;
    'externalName_en_US'?: string | null;
    'externalName_en_DEBUG'?: string | null;
    'externalName_ru_RU'?: string | null;
    'multipleIncumbentsAllowed'?: boolean;
    'targetFTE'?: string | null;
    'standardHours'?: string | null;
    'jobCode'?: string | null;
    'cust_jobfunction'?: string | null;
    'cust_ronesansjoblevel'?: string | null;
    'cust_ronesansKademe'?: string | null;
    'payGrade'?: string | null;
    'jobTitle'?: string | null;
    'employeeClass'?: string | null;
    'cust_empSubGroup'?: string | null;
    'cust_EmpGroup'?: string | null;
    'cust_companyGroup'?: string | null;
    'cust_customlegalEntity'?: string | null;
    'businessUnit'?: string | null;
    'division'?: string | null;
    'cust_sub_division'?: string | null;
    'department'?: string | null;
    'cust_parentDepartment2'?: string | null;
    'cust_parentDepartment'?: string | null;
    'costCenter'?: string | null;
    'cust_locationGroup'?: string | null;
    'location'?: string | null;
    'cust_calismaYeriTuru'?: string | null;
    'comment'?: string | null;
    'cust_payGroup'?: string | null;
    'cust_isAlani'?: string | null;
    'cust_phisicalLocation'?: string | null;
    'cust_ticket'?: string | null;
    'cust_HayKademe'?: string | null;
    'cust_ChiefPosition'?: boolean;
    'parentPosition'?: string | null;
    'isSend'?: boolean;
    'processType'?: ProcessType;
    'internalEmploymentType'?: InternalEmploymentType;
    'isInternalSource'?: boolean;
    'relationManager'?: string | null;
    'relationEmployess'?: string | null;
    'hardware'?: string | null;
    'licence'?: string | null;
    'internalSourceEmp'?: string | null;
    'jobCodeDescription'?: string | null;
    'isDeleted'?: boolean | null;
    'promotionPeriod'?: string | null;
    'promotionPeriodTxt'?: string | null;
    'propotionReasonTxt'?: string | null;
    'isTransferred'?: boolean | null;
}


export interface BudgetNormCodeRequestListDto {
    'id'?: string;
    'code'?: string | null;
    'effectiveStartDate'?: string;
    'cust_IseBaslamaTarihi'?: string;
    'cust_PlanlananIseGiris'?: string;
    'cust_plannedEndDate'?: string;
    'cust_actualhiredate'?: string;
    'effectiveStatus'?: string | null;
    'vacant'?: boolean;
    'changeReason'?: string | null;
    'cust_GeoZone'?: string | null;
    'cust_company'?: string | null;
    'externalName_tr_TR'?: string | null;
    'externalName_defaultValue'?: string | null;
    'externalName_en_US'?: string | null;
    'externalName_en_DEBUG'?: string | null;
    'externalName_ru_RU'?: string | null;
    'multipleIncumbentsAllowed'?: boolean;
    'targetFTE'?: string | null;
    'standardHours'?: string | null;
    'jobCode'?: string | null;
    'cust_jobfunction'?: string | null;
    'cust_ronesansjoblevel'?: string | null;
    'cust_ronesansKademe'?: string | null;
    'payGrade'?: string | null;
    'jobTitle'?: string | null;
    'employeeClass'?: string | null;
    'cust_empSubGroup'?: string | null;
    'cust_EmpGroup'?: string | null;
    'cust_companyGroup'?: string | null;
    'cust_customlegalEntity'?: string | null;
    'businessUnit'?: string | null;
    'division'?: string | null;
    'cust_sub_division'?: string | null;
    'department'?: string | null;
    'cust_parentDepartment2'?: string | null;
    'cust_parentDepartment'?: string | null;
    'costCenter'?: string | null;
    'cust_locationGroup'?: string | null;
    'location'?: string | null;
    'cust_calismaYeriTuru'?: string | null;
    'comment'?: string | null;
    'cust_payGroup'?: string | null;
    'cust_isAlani'?: string | null;
    'cust_phisicalLocation'?: string | null;
    'cust_ticket'?: string | null;
    'cust_HayKademe'?: string | null;
    'cust_ChiefPosition'?: boolean;
    'parentPosition'?: string | null;
    'workflowHeadId'?: string | null;
    'workflowHead'?: WorkflowHead;
    'isSend'?: boolean;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'processType'?: ProcessType;
    'processTypeText'?: string | null;
    'internalEmploymentType'?: InternalEmploymentType;
    'internalEmploymentTypeText'?: string | null;
    'isInternalSource'?: boolean;
    'relationManager'?: string | null;
    'relationEmployess'?: string | null;
    'hardware'?: string | null;
    'licence'?: string | null;
    'internalSourceEmp'?: string | null;
    'jobCodeDescription'?: string | null;
    'promotionPeriod'?: string | null;
    'isDeleted'?: boolean | null;
    'promotionPeriodTxt'?: string | null;
    'propotionReasonTxt'?: string | null;
    'isTransferred'?: boolean | null;
}


export interface BudgetNormCodeRequestListDtoOnlyCodeResult {
    'budgetNormCodeRequestListDtoList'?: Array<BudgetNormCodeRequestListOnlyCodeDto> | null;
    'count'?: number;
}
export interface BudgetNormCodeRequestListDtoResult {
    'budgetNormCodeRequestListDtoList'?: Array<BudgetNormCodeRequestListDto> | null;
    'count'?: number;
}
export interface BudgetNormCodeRequestListOnlyCodeDto {
    'code'?: string | null;
    'workflowHeadId'?: string | null;
    'workflowHead'?: WorkflowHead;
}
export interface BudgetNormCodeRequestUpdateDto {
    'id'?: string;
    'code'?: string | null;
    'effectiveStartDate'?: string;
    'cust_IseBaslamaTarihi'?: string;
    'cust_PlanlananIseGiris'?: string;
    'cust_plannedEndDate'?: string;
    'cust_actualhiredate'?: string;
    'effectiveStatus'?: string | null;
    'vacant'?: boolean;
    'changeReason'?: string | null;
    'cust_GeoZone'?: string | null;
    'cust_company'?: string | null;
    'externalName_tr_TR'?: string | null;
    'externalName_defaultValue'?: string | null;
    'externalName_en_US'?: string | null;
    'externalName_en_DEBUG'?: string | null;
    'externalName_ru_RU'?: string | null;
    'multipleIncumbentsAllowed'?: boolean;
    'targetFTE'?: string | null;
    'standardHours'?: string | null;
    'jobCode'?: string | null;
    'cust_jobfunction'?: string | null;
    'cust_ronesansjoblevel'?: string | null;
    'cust_ronesansKademe'?: string | null;
    'payGrade'?: string | null;
    'jobTitle'?: string | null;
    'employeeClass'?: string | null;
    'cust_empSubGroup'?: string | null;
    'cust_EmpGroup'?: string | null;
    'cust_companyGroup'?: string | null;
    'cust_customlegalEntity'?: string | null;
    'businessUnit'?: string | null;
    'division'?: string | null;
    'cust_sub_division'?: string | null;
    'department'?: string | null;
    'cust_parentDepartment2'?: string | null;
    'cust_parentDepartment'?: string | null;
    'costCenter'?: string | null;
    'cust_locationGroup'?: string | null;
    'location'?: string | null;
    'cust_calismaYeriTuru'?: string | null;
    'comment'?: string | null;
    'cust_payGroup'?: string | null;
    'cust_isAlani'?: string | null;
    'cust_phisicalLocation'?: string | null;
    'cust_ticket'?: string | null;
    'cust_HayKademe'?: string | null;
    'cust_ChiefPosition'?: boolean;
    'parentPosition'?: string | null;
    'workflowHeadId'?: string | null;
    'processType'?: ProcessType;
    'internalEmploymentType'?: InternalEmploymentType;
    'isInternalSource'?: boolean;
    'relationManager'?: string | null;
    'relationEmployess'?: string | null;
    'isSend'?: boolean;
    'hardware'?: string | null;
    'licence'?: string | null;
    'internalSourceEmp'?: string | null;
    'jobCodeDescription'?: string | null;
    'promotionPeriod'?: string | null;
    'isDeleted'?: boolean | null;
    'promotionPeriodTxt'?: string | null;
    'propotionReasonTxt'?: string | null;
    'isTransferred'?: boolean | null;
}


export interface BudgetPeriodInsertDto {
    'periodCode'?: string | null;
    'name'?: string | null;
    'startDate'?: string;
    'enDate'?: string;
    'note'?: string | null;
}
export interface BudgetPeriodListDto {
    'id'?: string;
    'periodCode'?: string | null;
    'name'?: string | null;
    'startDate'?: string;
    'enDate'?: string;
    'note'?: string | null;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
}
export interface BudgetPeriodUpdateDto {
    'id'?: string;
    'periodCode'?: string | null;
    'name'?: string | null;
    'startDate'?: string;
    'enDate'?: string;
    'note'?: string | null;
}
export interface BudgetPeriodUserInsertDto {
    'budgetPeriodCode': string;
    'userName'?: string | null;
    'requestType'?: RequestType;
    'permission'?: Permission;
    'processType'?: ProcessType;
    'nameSurname'?: string | null;
}


export interface BudgetPeriodUserListDto {
    'budgetPeriod'?: BudgetPeriodListDto;
    'id'?: string;
    'budgetPeriodCode': string;
    'userName'?: string | null;
    'requestType'?: RequestType;
    'permission'?: Permission;
    'processType'?: ProcessType;
    'requestTypeText'?: string | null;
    'permissiontypeText'?: string | null;
    'processtypeText'?: string | null;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'nameSurname'?: string | null;
}


export interface BudgetPeriodUserUpdateDto {
    'id'?: string;
    'budgetPeriodCode': string;
    'userName'?: string | null;
    'requestType'?: RequestType;
    'permission'?: Permission;
    'processType'?: ProcessType;
}


export interface BudgetPromotionRequestInsertDto {
    'empCode'?: string | null;
    'positionCode'?: string | null;
    'promotionDate'?: string;
    'description'?: string | null;
    'managerUser'?: string | null;
    'teamUsers'?: string | null;
}
export interface BudgetPromotionRequestListDto {
    'id'?: string;
    'empCode'?: string | null;
    'positionCode'?: string | null;
    'promotionDate'?: string;
    'description'?: string | null;
    'workflowHeadId'?: string | null;
    'workflowHead'?: WorkflowHead;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'managerUser'?: string | null;
    'teamUsers'?: string | null;
}
export interface BudgetPromotionRequestUpdateDto {
    'id'?: string;
    'empCode'?: string | null;
    'positionCode'?: string | null;
    'promotionDate'?: string;
    'description'?: string | null;
    'workflowHeadId'?: string | null;
    'workflowHead'?: WorkflowHead;
    'isSend'?: boolean;
    'managerUser'?: string | null;
    'teamUsers'?: string | null;
}

export const Category = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type Category = typeof Category[keyof typeof Category];


export interface ChangedTaskListDto {
    'taskId'?: string | null;
    'taskName'?: string | null;
    'progress'?: number | null;
    'projectName'?: string | null;
    'companyName'?: string | null;
    'managerName'?: string | null;
    'changeType'?: string | null;
    'dateOfChange'?: string | null;
    'assignUserIds'?: Array<string> | null;
    'assignUsers'?: Array<UserAppDtoOnlyNameId> | null;
}
export interface ClientLoginDto {
    'clientId'?: string | null;
    'clientSecret'?: string | null;
}
export interface Company {
    'id'?: string;
    'name': string;
    'clientId': string;
    'client'?: MainClient;
    'createdDate': string;
    'updatedDate'?: string | null;
    'plant'?: Array<Plant> | null;
}
export interface CreatePositionDto {
    'name'?: string | null;
    'description'?: string | null;
    'customerRefId'?: string | null;
}
export interface CreateProjectDto {
    'name'?: string | null;
    'description'?: string | null;
    'categoryId'?: number;
    'photo'?: string | null;
    'startDate'?: string;
    'endDate'?: string;
    'projectGain'?: string | null;
    'projectLearn'?: string | null;
    'projectTags'?: string | null;
}
export interface CreateUserDto {
    'company'?: string | null;
    'userName'?: string | null;
    'email'?: string | null;
    'profileInfo'?: string | null;
    'password'?: string | null;
    'firstName'?: string | null;
    'lastName'?: string | null;
    'isSystemAdmin'?: boolean;
    'isBlocked'?: boolean;
    'isTestData'?: boolean | null;
    'vacationMode'?: boolean;
    'lastLoginDate'?: string | null;
    'lastLoginIp'?: string | null;
    'canSsoLogin'?: boolean;
    'photo'?: string | null;
    'phoneNumber'?: string | null;
    'location'?: string | null;
    'facebookUrl'?: string | null;
    'instagramUrl'?: string | null;
    'twitterUrl'?: string | null;
    'department'?: string | null;
    'title'?: string | null;
    'linkedinUrl'?: string | null;
    'sapDepartmentText'?: string | null;
    'sapPositionText'?: string | null;
    'departmentsId'?: string | null;
    'ticketDepartmentId'?: string | null;
    'roleIds'?: Array<UserRoleDto> | null;
    'workCompanyId'?: string | null;
    'positionId'?: string | null;
    'userLevel'?: UserLevel;
}


export interface CustCompanyGroupDto {
    'list'?: Array<any> | null;
    'count'?: number;
    'cust_companyGroupList'?: Array<CustCompanyGroupList> | null;
}
export interface CustCompanyGroupList {
    'name'?: string | null;
    'externalCode'?: string | null;
}
export interface CustLegalEntityDto {
    'list'?: Array<any> | null;
    'count'?: number;
    'cust_legalEntityList'?: Array<CustLegalEntityList> | null;
}
export interface CustLegalEntityList {
    'name'?: string | null;
    'externalCode'?: string | null;
}
export interface CustSubDivisioList {
    'name'?: string | null;
    'externalCode'?: string | null;
}
export interface CustSubDivisionDto {
    'list'?: Array<any> | null;
    'count'?: number;
    'cust_sub_divisioList'?: Array<CustSubDivisioList> | null;
}
export interface CustomFieldDto {
    'id'?: string | null;
    'type'?: string | null;
    'label'?: string | null;
    'valueJson'?: string | null;
}
export interface Customer {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'customerTypeId'?: string | null;
    'customerTypeItem'?: LookupItem;
    'categoryId'?: string | null;
    'categoryItem'?: LookupItem;
    'status'?: string | null;
    'name'?: string | null;
    'legalName'?: string | null;
    'companyType'?: string | null;
    'code'?: string | null;
    'taxOffice'?: string | null;
    'taxNumber'?: string | null;
    'isReferenceCustomer'?: boolean;
    'logoFilePath'?: string | null;
    'note'?: string | null;
    'website'?: string | null;
    'twitterUrl'?: string | null;
    'facebookUrl'?: string | null;
    'linkedinUrl'?: string | null;
    'instagramUrl'?: string | null;
    'ownerId'?: string | null;
    'lifecycleStage'?: LifecycleStage;
    'nextActivityDate'?: string | null;
    'addresses'?: Array<CustomerAddress> | null;
    'officials'?: Array<CustomerOfficial> | null;
    'secondaryEmails'?: Array<CustomerEmail> | null;
    'tags'?: Array<CustomerTag> | null;
    'documents'?: Array<CustomerDocument> | null;
    'sectors'?: Array<CustomerSector> | null;
    'customFields'?: Array<CustomerCustomField> | null;
    'phones'?: Array<CustomerPhone> | null;
    'notes'?: Array<CustomerNote> | null;
    'rowVersion'?: string | null;
}


export interface CustomerAddress {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'customerId'?: string;
    'type'?: AddressType;
    'country'?: string | null;
    'city'?: string | null;
    'district'?: string | null;
    'postalCode'?: string | null;
    'line1'?: string | null;
    'line2'?: string | null;
    'isDefaultBilling'?: boolean;
    'isDefaultShipping'?: boolean;
    'isBilling'?: boolean;
    'isShipping'?: boolean;
    'isActive'?: boolean;
    'customer'?: Customer;
    'rowVersion'?: string | null;
}


export interface CustomerAddressDto {
    'id'?: string;
    'customerId'?: string;
    'type'?: number;
    'country'?: string | null;
    'city'?: string | null;
    'district'?: string | null;
    'postalCode'?: string | null;
    'line1'?: string | null;
    'line2'?: string | null;
    'isDefaultBilling'?: boolean;
    'isDefaultShipping'?: boolean;
    'isBilling'?: boolean;
    'isShipping'?: boolean;
    'isActive'?: boolean;
    'rowVersion'?: string | null;
}
export interface CustomerAddressInsertDto {
    'customerId'?: string;
    'type'?: number;
    'country'?: string | null;
    'city'?: string | null;
    'district'?: string | null;
    'postalCode'?: string | null;
    'line1'?: string | null;
    'line2'?: string | null;
    'isDefaultBilling'?: boolean;
    'isDefaultShipping'?: boolean;
    'isBilling'?: boolean;
    'isShipping'?: boolean;
    'isActive'?: boolean;
}
export interface CustomerAddressUpdateDto {
    'customerId'?: string;
    'type'?: number;
    'country'?: string | null;
    'city'?: string | null;
    'district'?: string | null;
    'postalCode'?: string | null;
    'line1'?: string | null;
    'line2'?: string | null;
    'isDefaultBilling'?: boolean;
    'isDefaultShipping'?: boolean;
    'isBilling'?: boolean;
    'isShipping'?: boolean;
    'isActive'?: boolean;
    'id'?: string;
    'rowVersion'?: string | null;
}
export interface CustomerCustomField {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'customerId'?: string;
    'fieldId'?: string | null;
    'fieldType'?: string | null;
    'label'?: string | null;
    'valueJson'?: string | null;
    'customer'?: Customer;
    'rowVersion'?: string | null;
}
export interface CustomerDocument {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'customerId'?: string;
    'fileName'?: string | null;
    'filePath'?: string | null;
    'contentType'?: string | null;
    'fileSize'?: number;
    'description'?: string | null;
    'category'?: string | null;
    'customer'?: Customer;
    'rowVersion'?: string | null;
}
export interface CustomerDocumentUpdateDto {
    'id'?: string;
    'fileName'?: string | null;
    'description'?: string | null;
    'category'?: string | null;
    'rowVersion'?: string | null;
}
export interface CustomerEmail {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'customerId'?: string;
    'email'?: string | null;
    'description'?: string | null;
    'notify'?: boolean;
    'bulk'?: boolean;
    'isActive'?: boolean;
    'isPrimary'?: boolean;
    'customer'?: Customer;
    'rowVersion'?: string | null;
}
export interface CustomerEmailDto {
    'id'?: string;
    'customerId'?: string;
    'email'?: string | null;
    'description'?: string | null;
    'notify'?: boolean;
    'bulk'?: boolean;
    'isActive'?: boolean;
    'isPrimary'?: boolean;
    'rowVersion'?: string | null;
}
export interface CustomerEmailInsertDto {
    'customerId'?: string;
    'email'?: string | null;
    'description'?: string | null;
    'notify'?: boolean;
    'bulk'?: boolean;
    'isActive'?: boolean;
    'isPrimary'?: boolean;
}
export interface CustomerEmailUpdateDto {
    'customerId'?: string;
    'email'?: string | null;
    'description'?: string | null;
    'notify'?: boolean;
    'bulk'?: boolean;
    'isActive'?: boolean;
    'isPrimary'?: boolean;
    'id'?: string;
    'rowVersion'?: string | null;
}
export interface CustomerInsertDto {
    'logoFilePath'?: string | null;
    'name'?: string | null;
    'legalName'?: string | null;
    'code'?: string | null;
    'customerTypeId'?: string | null;
    'categoryId'?: string | null;
    'taxOffice'?: string | null;
    'taxNumber'?: string | null;
    'isReferenceCustomer'?: boolean;
    'website'?: string | null;
    'twitterUrl'?: string | null;
    'facebookUrl'?: string | null;
    'linkedinUrl'?: string | null;
    'instagramUrl'?: string | null;
    'ownerId'?: string | null;
    'lifecycleStage'?: number;
    'nextActivityDate'?: string | null;
    'officials'?: Array<CustomerOfficialDto> | null;
    'customFields'?: Array<CustomFieldDto> | null;
    'emails'?: Array<CustomerEmailDto> | null;
    'addresses'?: Array<CustomerAddressDto> | null;
    'phones'?: Array<CustomerPhoneDto> | null;
    'notes'?: Array<CustomerNoteDto> | null;
    'documents'?: Array<CustomerDocument> | null;
}
export interface CustomerListDto {
    'cusid'?: number;
    'custx'?: string | null;
}
export interface CustomerNote {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'customerId'?: string;
    'date'?: string;
    'title'?: string | null;
    'content'?: string | null;
    'customer'?: Customer;
    'rowVersion'?: string | null;
}
export interface CustomerNoteDto {
    'id'?: string;
    'date'?: string;
    'title'?: string | null;
    'content'?: string | null;
    'rowVersion'?: string | null;
}
export interface CustomerNoteInsertDto {
    'customerId'?: string;
    'date'?: string;
    'title'?: string | null;
    'content'?: string | null;
}
export interface CustomerNoteUpdateDto {
    'id'?: string;
    'customerId'?: string;
    'date'?: string;
    'title'?: string | null;
    'content'?: string | null;
    'rowVersion'?: string | null;
}
export interface CustomerOfficial {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'customerId'?: string;
    'fullName'?: string | null;
    'title'?: string | null;
    'department'?: string | null;
    'email'?: string | null;
    'phone'?: string | null;
    'role'?: OfficialRole;
    'isPrimary'?: boolean;
    'kvkkConsent'?: boolean;
    'customer'?: Customer;
    'rowVersion'?: string | null;
}


export interface CustomerOfficialDto {
    'id'?: string;
    'fullName'?: string | null;
    'title'?: string | null;
    'department'?: string | null;
    'email'?: string | null;
    'phone'?: string | null;
    'role'?: number;
    'isPrimary'?: boolean;
    'kvkkConsent'?: boolean;
    'rowVersion'?: string | null;
}
export interface CustomerPhone {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'customerId'?: string;
    'label'?: string | null;
    'number'?: string | null;
    'isPrimary'?: boolean;
    'isActive'?: boolean;
    'customer'?: Customer;
    'rowVersion'?: string | null;
}
export interface CustomerPhoneDto {
    'id'?: string;
    'customerId'?: string;
    'label'?: string | null;
    'number'?: string | null;
    'isPrimary'?: boolean;
    'isActive'?: boolean;
    'rowVersion'?: string | null;
}
export interface CustomerPhoneInsertDto {
    'customerId'?: string;
    'label'?: string | null;
    'number'?: string | null;
    'isPrimary'?: boolean;
    'isActive'?: boolean;
}
export interface CustomerPhoneUpdateDto {
    'customerId'?: string;
    'label'?: string | null;
    'number'?: string | null;
    'isPrimary'?: boolean;
    'isActive'?: boolean;
    'id'?: string;
    'rowVersion'?: string | null;
}
export interface CustomerSector {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'customerId'?: string;
    'sector'?: string | null;
    'customer'?: Customer;
    'rowVersion'?: string | null;
}
export interface CustomerTag {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'customerId'?: string;
    'tag'?: string | null;
    'customer'?: Customer;
    'rowVersion'?: string | null;
}
export interface CustomerUpdateDto {
    'logoFilePath'?: string | null;
    'id'?: string;
    'rowVersion'?: string | null;
    'name'?: string | null;
    'legalName'?: string | null;
    'code'?: string | null;
    'customerTypeId'?: string | null;
    'categoryId'?: string | null;
    'status'?: number;
    'website'?: string | null;
    'taxOffice'?: string | null;
    'taxNumber'?: string | null;
    'isReferenceCustomer'?: boolean;
    'twitterUrl'?: string | null;
    'facebookUrl'?: string | null;
    'linkedinUrl'?: string | null;
    'instagramUrl'?: string | null;
    'ownerId'?: string | null;
    'lifecycleStage'?: number;
    'nextActivityDate'?: string | null;
}
export interface DepartmentUser {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'ticketDepartmentId'?: string;
    'ticketDepartment'?: TicketDepartment;
    'userId'?: string | null;
    'user'?: UserApp;
}
export interface DepartmentUserInsertDto {
    'ticketDepartmentId'?: string | null;
    'userId'?: string | null;
}
export interface DepartmentUserListDto {
    'id'?: string | null;
    'ticketDepartmentId'?: string | null;
    'userId'?: string | null;
    'user'?: UserAppDto;
}
export interface DepartmentsInsertDto {
    'code'?: string | null;
    'departmentText'?: string | null;
}
export interface DepartmentsUpdateDto {
    'id'?: string;
    'code'?: string | null;
    'departmentText'?: string | null;
}

export const DeviceStatus = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DeviceStatus = typeof DeviceStatus[keyof typeof DeviceStatus];



export const DeviceType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DeviceType = typeof DeviceType[keyof typeof DeviceType];



export const DiskType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DiskType = typeof DiskType[keyof typeof DiskType];


export interface EmployeeDto {
    'ename'?: string | null;
    'photo'?: string | null;
    'pernr'?: number;
    'email'?: string | null;
    'stext'?: string | null;
}
export interface EnumDto {
    'name'?: string | null;
    'description'?: string | null;
    'number'?: number | null;
}
export interface EnumListDto {
    'enumClass'?: string | null;
    'enums'?: Array<EnumDto> | null;
}
export interface ExcelAndGraphicData {
    'excelData'?: File | null;
    'graphicData'?: Array<TicketListDto> | null;
}
export interface ExcelList {
    'id'?: string | null;
    'team'?: string | null;
    'project'?: string | null;
    'consultant'?: string | null;
    'customer'?: string | null;
    'task'?: string | null;
    'status'?: string | null;
    'completion'?: string | null;
    'note'?: string | null;
    'duration'?: number;
}
export interface FOBusinessUnitDto {
    'list'?: Array<any> | null;
    'count'?: number;
    'foBusinessUnitList'?: Array<FOBusinessUnitList> | null;
}
export interface FOBusinessUnitList {
    'name'?: string | null;
    'externalCode'?: string | null;
}
export interface FOCompanyDto {
    'list'?: Array<any> | null;
    'count'?: number;
    'foCompanyDtoList'?: Array<FOCompanyDtoList> | null;
}
export interface FOCompanyDtoList {
    'name'?: string | null;
    'externalCode'?: string | null;
}
export interface FODepartmentList {
    'name'?: string | null;
    'externalCode'?: string | null;
}
export interface FODepartmentSFDto {
    'list'?: Array<any> | null;
    'count'?: number;
    'foDepartmentList'?: Array<FODepartmentList> | null;
}
export interface FODivisionDto {
    'list'?: Array<any> | null;
    'count'?: number;
    'foDivisionList'?: Array<FODivisionList> | null;
}
export interface FODivisionList {
    'name'?: string | null;
    'externalCode'?: string | null;
}
export interface FOGeozoneDto {
    'list'?: Array<any> | null;
    'count'?: number;
    'foGeozoneDtoList'?: Array<FOGeozoneDtoList> | null;
}
export interface FOGeozoneDtoList {
    'name'?: string | null;
    'externalCode'?: string | null;
}
export interface FOJobCodeDto {
    'list'?: Array<any> | null;
    'count'?: number;
    'foJobCodeList'?: Array<FOJobCodeList> | null;
}
export interface FOJobCodeList {
    'name'?: string | null;
    'externalCode'?: string | null;
    'cust_ronesanskademe'?: string | null;
    'cust_joblevelgroup'?: string | null;
    'grade'?: string | null;
    'name_ru_RU'?: string | null;
    'name_tr_TR'?: string | null;
    'name_en_US'?: string | null;
    'cust_haykademe'?: string | null;
    'employeeClass'?: string | null;
    'jobFunction'?: string | null;
    'startDate'?: string;
    'endDate'?: string;
}
export interface FOJobFunctionList {
    'name'?: string | null;
    'externalCode'?: string | null;
}
export interface FOJobFunctionSFDto {
    'list'?: Array<any> | null;
    'count'?: number;
    'foJobFunctionList'?: Array<FOJobFunctionList> | null;
}
export interface FOLocationGroupList {
    'name'?: string | null;
    'externalCode'?: string | null;
}
export interface FOLocationGroupSFDTO {
    'list'?: Array<any> | null;
    'count'?: number;
    'foLocationGroupList'?: Array<FOLocationGroupList> | null;
}
export interface FOLocationList {
    'name'?: string | null;
    'externalCode'?: string | null;
}
export interface FOLocationSFDto {
    'list'?: Array<any> | null;
    'count'?: number;
    'foLocationList'?: Array<FOLocationList> | null;
}
export interface FOPayGradeList {
    'name'?: string | null;
    'externalCode'?: string | null;
}
export interface FOPayGradeSFDto {
    'list'?: Array<any> | null;
    'count'?: number;
    'foPayGradeList'?: Array<FOPayGradeList> | null;
}
export interface FOPayGroupSFDto {
    'list'?: Array<any> | null;
    'count'?: number;
    'foPayGroupSFList'?: Array<FOPayGroupSFList> | null;
}
export interface FOPayGroupSFList {
    'name'?: string | null;
    'externalCode'?: string | null;
}
export interface FieldInfoDto {
    'label'?: string | null;
    'id'?: string | null;
    'type'?: string | null;
}
export interface Form {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'formName'?: string | null;
    'formDescription'?: string | null;
    'revision'?: number;
    'formDesign'?: string | null;
    'isActive'?: number;
    'javaScriptCode'?: string | null;
    'formType': FormType;
    'formCategory': FormCategory;
    'formPriority': FormPriority;
    'workFlowDefinationId'?: string | null;
    'workFlowDefination'?: WorkFlowDefination;
    'parentFormId'?: string | null;
    'canEdit'?: boolean;
    'showInMenu'?: boolean;
}


export interface FormAssignDto {
    'id'?: string;
    'formId'?: string;
    'formName'?: string | null;
    'userAppId'?: string | null;
    'status'?: FormStatus;
    'statusText'?: string | null;
    'createdDate'?: string | null;
    'formRunTimeId'?: string | null;
}


export interface FormAuthDto {
    'id'?: string;
    'formId'?: string;
    'form'?: Form;
    'userIds'?: Array<string> | null;
    'users'?: Array<UserAppDto> | null;
}
export interface FormAuthInsertDto {
    'formId'?: string;
    'userIds'?: Array<string> | null;
}
export interface FormAuthUpdateDto {
    'formId'?: string;
    'userIds'?: Array<string> | null;
}

export const FormCategory = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type FormCategory = typeof FormCategory[keyof typeof FormCategory];


export interface FormColumnDto {
    'columnName'?: string | null;
    'columnLabel'?: string | null;
    'key'?: string | null;
}
export interface FormDataInsertDto {
    'createdDate'?: string;
    'formName'?: string | null;
    'formDescription'?: string | null;
    'revision'?: number;
    'formDesign'?: string | null;
    'isActive'?: number;
    'javaScriptCode'?: string | null;
    'formType'?: FormType;
    'formCategory'?: FormCategory;
    'formPriority'?: FormPriority;
    'workFlowDefinationId'?: string | null;
    'parentFormId'?: string | null;
    'canEdit'?: boolean;
    'showInMenu'?: boolean;
}


export interface FormDataListDto {
    'createdDate'?: string;
    'id'?: string;
    'formName'?: string | null;
    'formDescription'?: string | null;
    'revision'?: number;
    'formDesign'?: string | null;
    'isActive'?: number;
    'javaScriptCode'?: string | null;
    'formType'?: FormType;
    'formTypeText'?: string | null;
    'formCategory'?: FormCategory;
    'formCategoryText'?: string | null;
    'formPriority'?: FormPriority;
    'formPriorityText'?: string | null;
    'workFlowDefinationId'?: string | null;
    'workFlowName'?: string | null;
    'parentFormId'?: string | null;
    'canEdit'?: boolean;
    'showInMenu'?: boolean;
}


export interface FormDataUpdateDto {
    'createdDate'?: string;
    'id'?: string;
    'formName'?: string | null;
    'formDescription'?: string | null;
    'revision'?: number;
    'formDesign'?: string | null;
    'isActive'?: number;
    'javaScriptCode'?: string | null;
    'formType'?: FormType;
    'formCategory'?: FormCategory;
    'formPriority'?: FormPriority;
    'workFlowDefinationId'?: string | null;
    'parentFormId'?: string | null;
    'canEdit'?: boolean;
    'showInMenu'?: boolean;
}



export const FormPriority = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type FormPriority = typeof FormPriority[keyof typeof FormPriority];


export interface FormRuleEngineDto {
    'id'?: string;
    'workFlowDefinationId'?: string;
    'nodeId'?: string;
    'rulejson'?: string | null;
}
export interface FormRuntimeDto {
    'createdDate'?: string;
    'id'?: string;
    'formId'?: string;
    'valuesJson'?: string | null;
    'valuesJsonData'?: string | null;
    'isActive'?: boolean;
}

export const FormStatus = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type FormStatus = typeof FormStatus[keyof typeof FormStatus];



export const FormType = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type FormType = typeof FormType[keyof typeof FormType];



export const GenericList = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10,
    NUMBER_11: 11,
    NUMBER_12: 12,
    NUMBER_13: 13,
    NUMBER_14: 14,
    NUMBER_15: 15,
    NUMBER_16: 16,
    NUMBER_17: 17,
    NUMBER_18: 18,
    NUMBER_19: 19,
    NUMBER_100: 100,
    NUMBER_101: 101
} as const;

export type GenericList = typeof GenericList[keyof typeof GenericList];


export interface GetCompanyTicketDto {
    'companyName'?: string | null;
    'ticketCount'?: number;
}
export interface GetCompanyTicketInfoDto {
    'companyName'?: string | null;
    'ticketCount'?: number;
    'resolvedCount'?: number;
    'openCount'?: number;
}
export interface GetSumTicketDto {
    'draftCount'?: number;
    'openCount'?: number;
    'assignedCount'?: number;
    'consultantWaitingCount'?: number;
    'inProgressCount'?: number;
    'internalTestingCount'?: number;
    'customerTestingCount'?: number;
    'waitingForCustomerCount'?: number;
    'resolvedCount'?: number;
    'canceledCount'?: number;
    'closedCount'?: number;
    'inApproveCount'?: number;
    'zeroCount'?: number;
    'sumCount'?: number;
}
export interface GetTicketCustomerAssignGroupGroup {
    'name'?: string | null;
    'totalCount'?: number;
    'openCount'?: number;
    'unitTest'?: number;
    'customerTest'?: number;
}
export interface GetTicketCustomerOpenCloseDto {
    'name'?: string | null;
    'count'?: number;
}
export interface GetTicketStatusDto {
    'openCount'?: number;
    'closedCount'?: number;
}
export interface GetTicketSubjectInfoDto {
    'subjectName'?: string | null;
    'ticketCount'?: number;
}
export interface HardwareList {
    'name'?: string | null;
    'value'?: string | null;
}
export interface HareketDto {
    'sicilNo'?: string | null;
    'adi'?: string | null;
    'soyadi'?: string | null;
    'cihazNo'?: string | null;
    'cihazAdi'?: string | null;
    'hareketZamani'?: string;
    'girisCikis'?: string | null;
}
export interface HolidayResponseDto {
    'tarih'?: string | null;
    'resmi_Tatil'?: string | null;
    'dayOfWeek'?: string | null;
}
export interface HolidaysAndLeavesDto {
    'leaves'?: Array<LeaveResponseDto> | null;
    'holidays'?: Array<HolidayResponseDto> | null;
}
export interface IGenericListDto {
    'count'?: number;
    'list'?: Array<any> | null;
}
export interface IdentityRole {
    'id'?: string | null;
    'name'?: string | null;
    'normalizedName'?: string | null;
    'concurrencyStamp'?: string | null;
}

export const InternalEmploymentType = {
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type InternalEmploymentType = typeof InternalEmploymentType[keyof typeof InternalEmploymentType];


export interface InventoryInsertDto {
    'assetTag'?: string | null;
    'deviceName'?: string | null;
    'type'?: DeviceType;
    'brand'?: string | null;
    'model'?: string | null;
    'serialNumber'?: string | null;
    'status'?: DeviceStatus;
    'description'?: string | null;
    'cpu'?: string | null;
    'ram'?: number | null;
    'diskType'?: DiskType;
    'diskSize'?: number | null;
    'gpu'?: string | null;
    'macAddress'?: string | null;
    'staticIPAddress'?: string | null;
    'operatingSystem'?: string | null;
    'oS_LicenseStatus'?: LicenseStatus;
    'officeLicense'?: string | null;
    'userAppId'?: string | null;
    'ticketDepartmentId'?: string | null;
    'officeLocation'?: OfficeLocation;
    'purchaseDate'?: string | null;
    'invoiceOrVendor'?: string | null;
    'warrantyEndDate'?: string | null;
    'assetNumber'?: string | null;
    'lastMaintenanceDate'?: string | null;
    'qRorBarcode'?: string | null;
}


export interface InventoryListDto {
    'id'?: string;
    'assetTag'?: string | null;
    'deviceName'?: string | null;
    'type'?: DeviceType;
    'brand'?: string | null;
    'model'?: string | null;
    'serialNumber'?: string | null;
    'status'?: DeviceStatus;
    'description'?: string | null;
    'cpu'?: string | null;
    'ram'?: number | null;
    'diskType'?: DiskType;
    'diskSize'?: number | null;
    'gpu'?: string | null;
    'macAddress'?: string | null;
    'staticIPAddress'?: string | null;
    'operatingSystem'?: string | null;
    'oS_LicenseStatus'?: LicenseStatus;
    'officeLicense'?: string | null;
    'userAppId'?: string | null;
    'userApp'?: UserAppDto;
    'ticketDepartmentId'?: string | null;
    'ticketDepartment'?: TicketDepartmensListDto;
    'officeLocation'?: OfficeLocation;
    'purchaseDate'?: string | null;
    'invoiceOrVendor'?: string | null;
    'warrantyEndDate'?: string | null;
    'assetNumber'?: string | null;
    'lastMaintenanceDate'?: string | null;
    'qRorBarcode'?: string | null;
}


export interface InventoryUpdateDto {
    'id'?: string;
    'assetTag'?: string | null;
    'deviceName'?: string | null;
    'type'?: DeviceType;
    'brand'?: string | null;
    'model'?: string | null;
    'serialNumber'?: string | null;
    'status'?: DeviceStatus;
    'description'?: string | null;
    'cpu'?: string | null;
    'ram'?: number | null;
    'diskType'?: DiskType;
    'diskSize'?: number | null;
    'gpu'?: string | null;
    'macAddress'?: string | null;
    'staticIPAddress'?: string | null;
    'operatingSystem'?: string | null;
    'oS_LicenseStatus'?: LicenseStatus;
    'officeLicense'?: string | null;
    'userAppId'?: string | null;
    'ticketDepartmentId'?: string | null;
    'officeLocation'?: OfficeLocation;
    'purchaseDate'?: string | null;
    'invoiceOrVendor'?: string | null;
    'warrantyEndDate'?: string | null;
    'assetNumber'?: string | null;
    'lastMaintenanceDate'?: string | null;
    'qRorBarcode'?: string | null;
}


export interface KanbanTasksInsertDto {
    'priority'?: string | null;
    'rankId'?: string | null;
    'status'?: string | null;
    'summary'?: string | null;
    'tags'?: string | null;
    'type'?: string | null;
    'description'?: string | null;
    'assigneId'?: string | null;
}
export interface KanbanTasksListDto {
    'id'?: string;
    'priority'?: string | null;
    'rankId'?: string | null;
    'status'?: string | null;
    'summary'?: string | null;
    'tags'?: string | null;
    'type'?: string | null;
    'description'?: string | null;
    'assigneId'?: string | null;
    'assignee'?: UserAppDtoOnlyNameId;
}
export interface KanbanTasksUpdateDto {
    'id'?: string;
    'priority'?: string | null;
    'rankId'?: string | null;
    'status'?: string | null;
    'summary'?: string | null;
    'tags'?: string | null;
    'type'?: string | null;
    'description'?: string | null;
    'assigneId'?: string | null;
}
export interface LeaveResponseDto {
    'mail'?: string | null;
    'pernr'?: string | null;
    'vorna'?: string | null;
    'nachn'?: string | null;
    'begda'?: string | null;
    'endda'?: string | null;
    'atext'?: string | null;
    'abwtg'?: string | null;
    'status'?: string | null;
    'dayOfWeek'?: string | null;
}
export interface LicenceList {
    'name'?: string | null;
    'value'?: string | null;
}

export const LicenseStatus = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type LicenseStatus = typeof LicenseStatus[keyof typeof LicenseStatus];



export const LifecycleStage = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type LifecycleStage = typeof LifecycleStage[keyof typeof LifecycleStage];


export interface LoginDto {
    'email'?: string | null;
    'password'?: string | null;
}
export interface LoginUserDto {
    'userName'?: string | null;
    'email'?: string | null;
    'password'?: string | null;
}
export interface LookupCategory {
    'id'?: string;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'key': string;
    'description'?: string | null;
    'isTenantScoped'?: boolean;
    'isReadOnly'?: boolean;
    'tenantId'?: string | null;
    'moduleId'?: string | null;
    'module'?: LookupModule;
}
export interface LookupCategoryDto {
    'id'?: string;
    'key'?: string | null;
    'description'?: string | null;
    'isTenantScoped'?: boolean;
    'isReadOnly'?: boolean;
    'moduleId'?: string | null;
}
export interface LookupItem {
    'id'?: string;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'categoryId'?: string;
    'category'?: LookupCategory;
    'tenantId'?: string | null;
    'code'?: string | null;
    'name'?: string | null;
    'nameLocalizedJson'?: string | null;
    'orderNo'?: number;
    'isActive'?: boolean;
    'externalKey'?: string | null;
}
export interface LookupItemDto {
    'id'?: string;
    'categoryId'?: string;
    'code'?: string | null;
    'name'?: string | null;
    'nameLocalizedJson'?: string | null;
    'orderNo'?: number;
    'isActive'?: boolean;
    'externalKey'?: string | null;
}
export interface LookupModule {
    'id'?: string;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'key': string;
    'name'?: string | null;
    'isTenantScoped'?: boolean;
    'isReadOnly'?: boolean;
}
export interface LookupModuleDto {
    'id'?: string;
    'key'?: string | null;
    'name'?: string | null;
    'isTenantScoped'?: boolean;
    'isReadOnly'?: boolean;
}
export interface MainClient {
    'id'?: string;
    'slug'?: string | null;
    'name': string;
    'email': string;
    'phoneNumber'?: string | null;
    'status': MainClientStatus;
    'plan': MainClientPlan;
    'timezone': string;
    'ownerUserId'?: string | null;
    'ownerUser'?: UserApp;
    'logoUrl'?: string | null;
    'customDomain'?: string | null;
    'domainVerified'?: boolean;
    'featureFlags': string;
    'quotas': string;
    'billingCustomerId'?: string | null;
    'billingEmail'?: string | null;
    'ssoType'?: SsoType;
    'ssoMetadataUrl'?: string | null;
    'createdDate': string;
    'updatedDate'?: string | null;
    'isActive'?: boolean;
    'companies'?: Array<Company> | null;
}


export interface MainClientInsertDto {
    'slug'?: string | null;
    'name'?: string | null;
    'email'?: string | null;
    'phoneNumber'?: string | null;
    'status'?: MainClientStatus;
    'plan'?: MainClientPlan;
    'timezone'?: string | null;
    'ownerUserId'?: string | null;
    'logoUrl'?: string | null;
    'subdomain'?: string | null;
    'customDomain'?: string | null;
    'domainVerified'?: boolean;
    'featureFlags'?: string | null;
    'quotas'?: string | null;
    'billingCustomerId'?: string | null;
    'billingEmail'?: string | null;
    'ssoType'?: SsoType;
    'ssoMetadataUrl'?: string | null;
}



export const MainClientPlan = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type MainClientPlan = typeof MainClientPlan[keyof typeof MainClientPlan];



export const MainClientStatus = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type MainClientStatus = typeof MainClientStatus[keyof typeof MainClientStatus];


export interface MainClientUpdateDto {
    'id'?: string;
    'slug'?: string | null;
    'name'?: string | null;
    'email'?: string | null;
    'phoneNumber'?: string | null;
    'status'?: MainClientStatus;
    'plan'?: MainClientPlan;
    'timezone'?: string | null;
    'ownerUserId'?: string | null;
    'logoUrl'?: string | null;
    'subdomain'?: string | null;
    'customDomain'?: string | null;
    'domainVerified'?: boolean;
    'featureFlags'?: string | null;
    'quotas'?: string | null;
    'billingCustomerId'?: string | null;
    'billingEmail'?: string | null;
    'ssoType'?: SsoType;
    'ssoMetadataUrl'?: string | null;
    'isActive'?: boolean;
    'updatedDate'?: string;
}


export interface MakeTenantAdminRequest {
    'userId'?: string | null;
    'tenantIds'?: Array<string> | null;
}
export interface MeetingDto {
    'id'?: string;
    'customerId'?: string;
    'opportunityId'?: string | null;
    'startTime'?: string;
    'endTime'?: string;
    'subject'?: string | null;
    'location'?: string | null;
    'description'?: string | null;
    'organizerUserId'?: string | null;
    'attendeesJson'?: string | null;
    'rowVersion'?: string | null;
}
export interface Menu {
    'id'?: string;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'menuCode'?: string | null;
    'parentMenuId'?: string | null;
    'parentMenu'?: Menu;
    'subMenus'?: Array<Menu> | null;
    'name': string;
    'route'?: string | null;
    'href'?: string | null;
    'icon'?: string | null;
    'isActive'?: boolean;
    'order'?: number;
    'description'?: string | null;
    'showMenu'?: boolean;
    'isTenantOnly'?: boolean;
}
export interface MenuInsertDto {
    'menuCode'?: string | null;
    'parentMenuId'?: string | null;
    'name'?: string | null;
    'route'?: string | null;
    'href'?: string | null;
    'icon'?: string | null;
    'isActive'?: boolean;
    'order'?: number;
    'description'?: string | null;
    'showMenu'?: boolean;
    'isTenantOnly'?: boolean;
}
export interface MenuListDto {
    'id'?: string;
    'menuCode'?: string | null;
    'parentMenuId'?: string | null;
    'subMenus'?: Array<MenuListDto> | null;
    'name': string;
    'route'?: string | null;
    'href'?: string | null;
    'icon'?: string | null;
    'isActive'?: boolean;
    'order'?: number;
    'createdAt'?: string;
    'updatedAt'?: string;
    'description'?: string | null;
    'showMenu'?: boolean;
    'isTenantOnly'?: boolean;
}
export interface MenuPermissionDto {
    'menuId'?: string;
    'canView'?: boolean;
    'canAdd'?: boolean;
    'canEdit'?: boolean;
    'canDelete'?: boolean;
}
export interface MenuUpdateDto {
    'id'?: string;
    'menuCode'?: string | null;
    'parentMenuId'?: string | null;
    'name'?: string | null;
    'route'?: string | null;
    'href'?: string | null;
    'icon'?: string | null;
    'isActive'?: boolean;
    'order'?: number;
    'description'?: string | null;
    'showMenu'?: boolean;
    'isTenantOnly'?: boolean;
}
export interface Metadata {
    'uri'?: string | null;
}

export const OfficeLocation = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type OfficeLocation = typeof OfficeLocation[keyof typeof OfficeLocation];



export const OfficialRole = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type OfficialRole = typeof OfficialRole[keyof typeof OfficialRole];


export interface OpportunityDto {
    'id'?: string;
    'customerId'?: string;
    'title'?: string | null;
    'stage'?: number;
    'amount'?: number | null;
    'currency'?: string | null;
    'probability'?: number | null;
    'expectedCloseDate'?: string | null;
    'source'?: string | null;
    'ownerUserId'?: string | null;
    'description'?: string | null;
    'rowVersion'?: string | null;
}
export interface OrganizationDto {
    'id'?: string | null;
    'name'?: string | null;
    'title'?: string | null;
    'email'?: string | null;
    'photo'?: string | null;
    'className'?: string | null;
    'type'?: string | null;
    'expanded'?: boolean;
    'children'?: Array<OrganizationDto> | null;
}

export const Permission = {
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type Permission = typeof Permission[keyof typeof Permission];



export const PickList = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10,
    NUMBER_11: 11,
    NUMBER_12: 12,
    NUMBER_13: 13,
    NUMBER_14: 14,
    NUMBER_15: 15
} as const;

export type PickList = typeof PickList[keyof typeof PickList];


export interface PickListDto {
    'name'?: string | null;
    'externalCode'?: string | null;
    'label_tr_TR'?: string | null;
}
export interface Plant {
    'id'?: string;
    'name': string;
    'companyId': string;
    'company'?: Company;
    'createdDate': string;
    'updatedDate'?: string | null;
}
export interface PositionListDto {
    'id'?: string;
    'name'?: string | null;
    'description'?: string | null;
    'customerRefId'?: string | null;
    'customerName'?: string | null;
}
export interface PositionSFDto {
    'list'?: Array<any> | null;
    'count'?: number;
    'sfPositionList'?: Array<SFPositionList> | null;
}
export interface Positions {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'name'?: string | null;
    'description'?: string | null;
    'customerRefId'?: string | null;
    'customerRef'?: WorkCompany;
    'userApps'?: Array<UserApp> | null;
}

export const ProcessType = {
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type ProcessType = typeof ProcessType[keyof typeof ProcessType];


export interface Project {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'userId'?: string | null;
    'userApp'?: UserApp;
    'name'?: string | null;
    'description'?: string | null;
    'categoryId'?: number;
    'category'?: Category;
    'photo'?: string | null;
    'startDate'?: string;
    'endDate'?: string;
    'projectGain'?: string | null;
    'projectLearn'?: string | null;
    'projectTags'?: string | null;
}


export interface ProjectCategories {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'name'?: string | null;
}
export interface ProjectCategoriesInsertDto {
    'name'?: string | null;
}
export interface ProjectCategoriesListDto {
    'id'?: string;
    'name'?: string | null;
}
export interface ProjectInfoDto {
    'id'?: string;
    'companyName'?: string | null;
    'projectName'?: string | null;
    'taskName'?: string | null;
    'notes'?: string | null;
    'startDate'?: string;
    'duration'?: number | null;
    'progress'?: number | null;
}
export interface ProjectLastYearInvoiceList {
    'month'?: string | null;
    'act'?: number;
}
export interface ProjectListDto {
    'vprid'?: number;
    'vprtx'?: string | null;
    'cusid'?: number;
    'custx'?: string | null;
}
export interface ProjectTasksInsertDto {
    'name'?: string | null;
    'startDate'?: string;
    'taskId'?: number | null;
    'projectId'?: string;
    'duration'?: number | null;
    'progress'?: number | null;
    'predecessor'?: string | null;
    'parentId'?: string | null;
    'milestone'?: boolean | null;
    'notes'?: string | null;
    'isManual'?: boolean | null;
    'users'?: Array<TaskUsersDto> | null;
}
export interface ProjectTasksListDto {
    'id'?: string;
    'name'?: string | null;
    'startDate'?: string;
    'taskId'?: number | null;
    'projectId'?: string;
    'ticketProjects'?: TicketProjectsListDto;
    'duration'?: number | null;
    'progress'?: number | null;
    'predecessor'?: string | null;
    'parentId'?: string | null;
    'milestone'?: boolean | null;
    'notes'?: string | null;
    'isManual'?: boolean | null;
    'users'?: Array<UserAppDtoOnlyNameId> | null;
}
export interface ProjectTasksUpdateDto {
    'id'?: string;
    'name'?: string | null;
    'startDate'?: string;
    'taskId'?: number | null;
    'projectId'?: string;
    'duration'?: number | null;
    'progress'?: number | null;
    'predecessor'?: string | null;
    'parentId'?: string | null;
    'milestone'?: boolean | null;
    'notes'?: string | null;
    'isManual'?: boolean | null;
    'users'?: Array<TaskUsersDto> | null;
}
export interface QuoteDto {
    'id'?: string;
    'customerId'?: string;
    'opportunityId'?: string | null;
    'quoteNo'?: string | null;
    'quoteDate'?: string;
    'validUntil'?: string | null;
    'status'?: number;
    'currency'?: string | null;
    'subtotal'?: number;
    'discountTotal'?: number;
    'taxTotal'?: number;
    'grandTotal'?: number;
    'notes'?: string | null;
    'lines'?: Array<QuoteLineDto> | null;
    'rowVersion'?: string | null;
}
export interface QuoteLineDto {
    'id'?: string;
    'itemCode'?: string | null;
    'itemName'?: string | null;
    'unit'?: string | null;
    'quantity'?: number;
    'unitPrice'?: number;
    'discountRate'?: number;
    'taxRate'?: number;
    'lineTotal'?: number;
    'rowVersion'?: string | null;
}
export interface RefreshTokenDto {
    'token'?: string | null;
}
export interface ReminderDto {
    'id'?: string;
    'customerId'?: string;
    'activityId'?: string | null;
    'remindAt'?: string;
    'message'?: string | null;
    'channel'?: string | null;
    'isSent'?: boolean;
    'rowVersion'?: string | null;
}

export const RequestType = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5
} as const;

export type RequestType = typeof RequestType[keyof typeof RequestType];


export interface RoleMenuInsertDto {
    'roleName'?: string | null;
    'description'?: string | null;
    'menuPermissions'?: Array<MenuPermissionDto> | null;
}
export interface RoleMenuListDto {
    'id'?: string;
    'name'?: string | null;
    'roleId'?: string | null;
    'menuId'?: string;
    'canView'?: boolean;
    'canAdd'?: boolean;
    'canEdit'?: boolean;
    'canDelete'?: boolean;
    'description'?: string | null;
    'createdAt'?: string | null;
    'status'?: string | null;
}
export interface RoleMenuResuResultDto {
    'roleId'?: string | null;
    'roleName'?: string | null;
    'description'?: string | null;
    'menuPermissions'?: Array<MenuPermissionDto> | null;
}
export interface RoleMenuUpdateDto {
    'roleId'?: string | null;
    'roleName'?: string | null;
    'description'?: string | null;
    'menuPermissions'?: Array<MenuPermissionDto> | null;
}
export interface RoleTenantBulkItemDto {
    'tenantId'?: string;
    'isActive'?: boolean;
    'isLocked'?: boolean;
}
export interface RoleTenantBulkSaveDto {
    'roleId'?: string | null;
    'items'?: Array<RoleTenantBulkItemDto> | null;
}
export interface RoleTenantInsertDto {
    'roleId'?: string | null;
    'tenantId'?: string;
    'isActive'?: boolean;
    'isLocked'?: boolean;
}
export interface RoleTenantListDto {
    'id'?: string;
    'roleId'?: string | null;
    'tenantId'?: string;
    'isActive'?: boolean;
    'isLocked'?: boolean;
    'createdDate'?: string;
    'updatedDate'?: string | null;
}
export interface RoleTenantMenuBulkSaveDto {
    'roleId'?: string | null;
    'tenantId'?: string;
    'menuPermissions'?: Array<MenuPermissionDto> | null;
}
export interface RoleTenantMenuListDto {
    'id'?: string;
    'roleId'?: string | null;
    'tenantId'?: string;
    'menuId'?: string;
    'canView'?: boolean;
    'canAdd'?: boolean;
    'canEdit'?: boolean;
    'canDelete'?: boolean;
    'description'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
}
export interface RoleTenantUpdateDto {
    'id'?: string;
    'isActive'?: boolean;
    'isLocked'?: boolean;
}
export interface RoleTenantWithMenusBulkSaveDto {
    'tenantId'?: string;
    'items'?: Array<RoleWithMenusItemDto> | null;
}
export interface RoleTenantWithMenusGetDto {
    'tenantId'?: string;
    'items'?: Array<RoleWithMenusItemDto> | null;
}
export interface RoleWithMenusItemDto {
    'roleId'?: string | null;
    'roleName'?: string | null;
    'isActive'?: boolean;
    'isLocked'?: boolean;
    'selected'?: boolean;
    'menuPermissions'?: Array<MenuPermissionDto> | null;
}
export interface SFEmpJobDto {
    'name'?: string | null;
    'code'?: string | null;
    'userId'?: string | null;
    'managerId'?: string | null;
}
export interface SFFOCostCenterDto {
    'list'?: Array<any> | null;
    'count'?: number;
    'sffoCostCenterList'?: Array<SFFOCostCenterList> | null;
}
export interface SFFOCostCenterList {
    'name'?: string | null;
    'externalCode'?: string | null;
}
export interface SFPositionAllPropertyDto {
    'name'?: string | null;
    'code'?: string | null;
    'effectiveStartDate'?: string | null;
}
export interface SFPositionDto {
    '__metadata'?: Metadata;
    'code'?: string | null;
    'effectiveStartDate'?: string | null;
    'cust_jobfunction'?: string | null;
    'cust_calismaYeriTuru'?: any | null;
    'cust_customlegalEntity'?: string | null;
    'cust_integrationCheck'?: any | null;
    'createdDateTime'?: string | null;
    'jobCode'?: string | null;
    'mdfSystemVersionId'?: any | null;
    'type'?: string | null;
    'division'?: string | null;
    'cust_EmpGroup'?: string | null;
    'cust_plannedEndDate'?: any | null;
    'costCenter'?: string | null;
    'legacyPositionId'?: any | null;
    'externalName_localized'?: string | null;
    'mdfSystemRecordStatus'?: string | null;
    'cust_CompanyGroup8'?: any | null;
    'vacant'?: boolean | null;
    'cust_locationGroup'?: string | null;
    'externalName_tr_TR'?: string | null;
    'cust_IseBaslamaTarihi'?: any | null;
    'positionTitle'?: string | null;
    'cust_legalEntityOrgCount'?: string | null;
    'externalName_defaultValue'?: string | null;
    'cust_incumbent'?: any | null;
    'payGrade'?: any | null;
    'cust_ticket'?: any | null;
    'cust_orgChartNameText'?: string | null;
    'mdfSystemObjectType'?: string | null;
    'creationSource'?: string | null;
    'cust_actualhiredate'?: any | null;
    'cust_customORGLabel_tr_TR'?: string | null;
    'targetFTE'?: string | null;
    'externalName_ru_RU'?: string | null;
    'cust_customORGLabel_defaultValue'?: string | null;
    'cust_hasChildPosition'?: string | null;
    'jobLevel'?: any | null;
    'createdDate'?: string | null;
    'mdfSystemRecordId'?: string | null;
    'cust_CompanyGroup6Org'?: any | null;
    'multipleIncumbentsAllowed'?: boolean | null;
    'businessUnit'?: string | null;
    'cust_parentDepartment'?: any | null;
    'lastModifiedDateTime'?: string | null;
    'cust_businessUnitOrg'?: any | null;
    'jobTitle'?: string | null;
    'criticality'?: any | null;
    'cust_customORGLabel_en_DEBUG'?: string | null;
    'cust_ronesansjoblevel'?: string | null;
    'incumbent'?: any | null;
    'cust_subDivisionOrg'?: any | null;
    'cust_phisicalLocation'?: any | null;
    'mdfSystemEntityId'?: string | null;
    'cust_companyGroup'?: string | null;
    'payRange'?: any | null;
    'cust_DivisionOrg'?: any | null;
    'regularTemporary'?: string | null;
    'cust_customORG'?: string | null;
    'cust_legalEntityOrg'?: any | null;
    'cust_sub_division'?: string | null;
    'standardHours'?: string | null;
    'cust_departmentOrgCount'?: string | null;
    'cust_businessUnitOrgCount'?: string | null;
    'effectiveStatus'?: string | null;
    'cust_sidebenefit'?: any | null;
    'technicalParameters'?: any | null;
    'cust_incumbentName'?: string | null;
    'cust_PlanlananIseGiris'?: any | null;
    'cust_ChiefPosition'?: any | null;
    'cust_CompanyGroup4Org'?: any | null;
    'cust_empSubGroup'?: string | null;
    'cust_customORGLabel_en_US'?: string | null;
    'cust_customORGLabel_ru_RU'?: string | null;
    'cust_payGroup'?: any | null;
    'effectiveEndDate'?: string | null;
    'positionCriticality'?: any | null;
    'cust_positionstartdate'?: any | null;
    'description'?: any | null;
    'cust_parentDepartment2'?: string | null;
    'positionControlled'?: any | null;
    'cust_parentDepartmentOrg'?: any | null;
    'cust_GeoZone'?: any | null;
    'cust_HayKademe'?: any | null;
    'company'?: string | null;
    'cust_departmentOrg'?: any | null;
    'department'?: string | null;
    'cust_ronesansKademe'?: any | null;
    'employeeClass'?: string | null;
    'cust_isAlani'?: any | null;
    'cust_parentDepartmentOrgCount'?: string | null;
    'cust_subDivisionOrgCount'?: string | null;
    'changeReason'?: string | null;
    'cust_workArea'?: any | null;
    'lastModifiedDate'?: string | null;
    'lastModifiedBy'?: string | null;
    'lastModifiedDateWithTZ'?: string | null;
    'transactionSequence'?: string | null;
    'cust_customORGLabel_localized'?: string | null;
    'createdBy'?: string | null;
    'cust_divisonOrgCount'?: string | null;
    'mdfSystemOptimisticLockUUID'?: string | null;
    'comment'?: string | null;
    'location'?: any | null;
    'cust_jobFamily'?: any | null;
    'externalName_en_US'?: string | null;
    'externalName_en_DEBUG'?: any | null;
    'parentPositionTxt'?: string | null;
    'parentPositionValue'?: string | null;
}
export interface SFPositionList {
    'name'?: string | null;
    'externalCode'?: string | null;
    'vacant'?: boolean;
    'userId'?: string | null;
    'userName'?: string | null;
    'cust_plannedEndDate'?: string | null;
    'cust_IseBaslamaTarihi'?: string | null;
    'businessUnit'?: string | null;
    'cust_customlegalEntity'?: string | null;
    'cust_sub_division'?: string | null;
    'department'?: string | null;
}
export interface SFUSerList {
    'userId'?: string | null;
    'firstName'?: string | null;
    'lastName'?: string | null;
    'defaultFullName'?: string | null;
    'location'?: string | null;
    'department'?: string | null;
    'email'?: string | null;
    'username'?: string | null;
}
export interface SpecialDayDto {
    'id'?: string;
    'customerId'?: string;
    'title'?: string | null;
    'date'?: string;
    'isAnnual'?: boolean;
    'advanceNotifyDays'?: number;
    'channel'?: string | null;
    'messageTemplate'?: string | null;
    'rowVersion'?: string | null;
}

export const SsoType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type SsoType = typeof SsoType[keyof typeof SsoType];


export interface TaskUsersDto {
    'id'?: string | null;
    'firstName'?: string | null;
    'lastName'?: string | null;
    'userName'?: string | null;
    'unit'?: number | null;
}
export interface TicketApprove {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'ticketsId': string;
    'tickets'?: Tickets;
    'userAppId'?: string | null;
    'userApp'?: UserApp;
}
export interface TicketAssigne {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'ticketsId': string;
    'tickets'?: Tickets;
    'userAppId'?: string | null;
    'userApp'?: UserApp;
    'ticketTeamID'?: string | null;
    'ticketTeam'?: TicketTeam;
    'isActive'?: boolean;
    'status'?: TicketStatus;
    'description'?: string | null;
}


export interface TicketAssigneDto {
    'id'?: string;
    'ticketsId'?: string;
    'userAppId'?: string | null;
    'ticketTeamID'?: string | null;
    'isActive'?: boolean;
    'status'?: TicketStatus;
    'description'?: string | null;
}


export interface TicketAssigneListDto {
    'ticketsId'?: string;
    'name'?: string | null;
    'statusId'?: TicketStatus;
    'status'?: string | null;
    'createDate'?: string;
    'description'?: string | null;
    'createdBy'?: string | null;
}


export interface TicketComment {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'ticketId': string;
    'ticket'?: Tickets;
    'body'?: string | null;
    'files'?: Array<TicketFile> | null;
    'filePath'?: string | null;
}
export interface TicketCommentDto {
    'id'?: string | null;
    'ticketId'?: string | null;
    'body'?: string | null;
    'files'?: Array<TicketFileDto> | null;
    'isNew'?: boolean;
    'createdDate'?: string;
    'createdBy'?: string | null;
    'filePath'?: string | null;
}
export interface TicketCommentInsertDto {
    'body'?: string | null;
    'filePath'?: string | null;
    'files'?: Array<TicketFileInsertDto> | null;
    'isNew'?: boolean;
}
export interface TicketDepartmensInsertDto {
    'deparmentCode'?: string | null;
    'departmentText'?: string | null;
    'isActive'?: boolean;
    'managerId'?: string | null;
    'workCompanyId'?: string | null;
    'departmentUsers'?: Array<DepartmentUserInsertDto> | null;
    'parentDepartmentId'?: string | null;
    'isVisibleInList'?: boolean;
}
export interface TicketDepartmensListDto {
    'id'?: string | null;
    'deparmentCode'?: string | null;
    'departmentText'?: string | null;
    'isActive'?: boolean;
    'managerId'?: string | null;
    'manager'?: UserApp;
    'workCompanyId'?: string | null;
    'workCompany'?: WorkCompany;
    'departmentUsers'?: Array<DepartmentUserListDto> | null;
    'parentDepartmentId'?: string | null;
    'subDepartments'?: Array<TicketDepartment> | null;
    'isVisibleInList'?: boolean;
}
export interface TicketDepartmensUpdateDto {
    'id'?: string;
    'deparmentCode'?: string | null;
    'departmentText'?: string | null;
    'isActive'?: boolean;
    'managerId'?: string | null;
    'workCompanyId'?: string | null;
    'departmentUsers'?: Array<DepartmentUserInsertDto> | null;
    'parentDepartmentId'?: string | null;
    'isVisibleInList'?: boolean;
}
export interface TicketDepartment {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'deparmentCode'?: string | null;
    'departmentText'?: string | null;
    'isActive'?: boolean;
    'managerId'?: string | null;
    'manager'?: UserApp;
    'employess'?: Array<UserApp> | null;
    'tickets'?: Array<Tickets> | null;
    'workCompanyId'?: string | null;
    'workCompany'?: WorkCompany;
    'departmentUsers'?: Array<DepartmentUser> | null;
    'parentDepartmentId'?: string | null;
    'parentDepartment'?: TicketDepartment;
    'subDepartments'?: Array<TicketDepartment> | null;
    'isVisibleInList'?: boolean;
}
export interface TicketDtoResult {
    'count'?: number;
    'ticketList'?: Array<TicketListDto> | null;
}
export interface TicketFile {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'ticketCommentId': string;
    'ticketComment'?: TicketComment;
    'base64'?: string | null;
    'fileType'?: string | null;
    'fileName'?: string | null;
    'filePath'?: string | null;
}
export interface TicketFileDto {
    'id'?: string | null;
    'ticketCommentId'?: string | null;
    'base64'?: string | null;
    'fileType'?: string | null;
    'fileName'?: string | null;
    'filePath'?: string | null;
}
export interface TicketFileInsertDto {
    'base64'?: string | null;
    'fileType'?: string | null;
    'fileName'?: string | null;
    'filePath'?: string | null;
}
export interface TicketInsertDto {
    'ticketCode'?: string | null;
    'title'?: string | null;
    'description'?: string | null;
    'workCompanyId'?: string | null;
    'workCompanySystemInfoId'?: string | null;
    'userAppId'?: string | null;
    'type'?: TicketType;
    'ticketSLA'?: TicketSLA;
    'ticketSubject'?: TicketSubject;
    'priority'?: TicketPriority;
    'ticketComment'?: Array<TicketCommentInsertDto> | null;
    'isSend'?: boolean;
    'customerRefId'?: string | null;
    'isFromEmail'?: boolean;
    'mailConversationId'?: string | null;
    'addedMailAddresses'?: string | null;
    'isFilePath'?: boolean | null;
    'filePath'?: string | null;
}


export interface TicketListDto {
    'id'?: string;
    'ticketCode'?: string | null;
    'title'?: string | null;
    'description'?: string | null;
    'workCompanyId'?: string;
    'workCompanyName'?: string | null;
    'workCompanySystemInfoId'?: string | null;
    'workCompanySystemName'?: string | null;
    'userAppId'?: string | null;
    'userAppName'?: string | null;
    'userAppUserName'?: string | null;
    'status'?: TicketStatus;
    'statusText'?: string | null;
    'type'?: TicketType;
    'typeText'?: string | null;
    'priority'?: TicketPriority;
    'priorityText'?: string | null;
    'ticketSubject'?: TicketSubject;
    'ticketSubjectText'?: string | null;
    'actualStartDate'?: string | null;
    'actualEndDate'?: string | null;
    'approveStatus'?: ApproveStatus;
    'approveStatusText'?: string | null;
    'createdDate'?: string | null;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'updatedDate'?: string | null;
    'ticketSLA'?: TicketSLA;
    'ticketSLAText'?: string | null;
    'ticketComment'?: Array<TicketCommentDto> | null;
    'ticketAssigneText'?: string | null;
    'ticketAssigneId'?: string | null;
    'isTeam'?: boolean;
    'ticketAssigne'?: TicketAssigneDto;
    'ticketDepartmentId'?: string | null;
    'ticketDepartmentText'?: string | null;
    'workFlowHeadId'?: string | null;
    'ticketNumber'?: number;
    'canEdit'?: boolean;
    'assigneDescription'?: string | null;
    'customerRefId'?: string | null;
    'customerRefName'?: string | null;
    'isFromEmail'?: boolean;
    'ticketNotificationsListDto'?: Array<TicketNotificationsListDto> | null;
    'mailConversationId'?: string | null;
    'addedMailAddresses'?: string | null;
    'isFilePath'?: boolean | null;
    'filePath'?: string | null;
    'estimatedDeadline'?: string | null;
    'ticketProjectId'?: string | null;
    'ticketprojectName'?: string | null;
}


export interface TicketManagerUpdateDto {
    'managerDto'?: TicketUpdateDto;
    'assigngDto'?: TicketAssigneDto;
    'notificationsInsertDtos'?: Array<TicketNotificationsInsertDto> | null;
}
export interface TicketNotificationsInsertDto {
    'ticketId'?: string;
    'userAppId'?: string | null;
}
export interface TicketNotificationsListDto {
    'ticketId'?: string;
    'userAppId'?: string | null;
    'user'?: UserApp;
}
export interface TicketPermDto {
    'id'?: string | null;
    'name'?: string | null;
    'perm'?: boolean;
    'canEditTicket'?: boolean;
}

export const TicketPriority = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type TicketPriority = typeof TicketPriority[keyof typeof TicketPriority];


export interface TicketProjects {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'name'?: string | null;
    'subProjectName'?: string | null;
    'description'?: string | null;
    'risks'?: string | null;
    'reportsUrl'?: string | null;
    'workCompanyId'?: string | null;
    'workCompany'?: WorkCompany;
    'managerId'?: string | null;
    'manager'?: UserApp;
    'userIds'?: string | null;
    'isActive'?: boolean | null;
    'projectCategoryId'?: string | null;
    'projectCategory'?: ProjectCategories;
}
export interface TicketProjectsInsertDto {
    'name'?: string | null;
    'subProjectName'?: string | null;
    'description'?: string | null;
    'risks'?: string | null;
    'reportsUrl'?: string | null;
    'isActive'?: boolean | null;
    'workCompanyId'?: string | null;
    'managerId'?: string | null;
    'manager'?: UserApp;
    'userIds'?: Array<string> | null;
    'userIdsJoin'?: string | null;
    'projectCategoryId'?: string | null;
    'copiedProjectId'?: string | null;
    'isUserCopied'?: boolean | null;
}
export interface TicketProjectsListDto {
    'id'?: string;
    'name'?: string | null;
    'subProjectName'?: string | null;
    'description'?: string | null;
    'risks'?: string | null;
    'reportsUrl'?: string | null;
    'isActive'?: boolean | null;
    'workCompanyId'?: string | null;
    'workCompany'?: WorkCompany;
    'managerId'?: string | null;
    'manager'?: UserApp;
    'users'?: Array<UserAppDto> | null;
    'userIds'?: Array<string> | null;
    'userIdsJoin'?: string | null;
    'createdDate'?: string | null;
    'projectCategoryId'?: string | null;
    'projectCategory'?: ProjectCategoriesListDto;
    'copiedProjectId'?: string | null;
    'isUserCopied'?: boolean | null;
}
export interface TicketProjectsUpdateDto {
    'id'?: string;
    'name'?: string | null;
    'subProjectName'?: string | null;
    'description'?: string | null;
    'risks'?: string | null;
    'reportsUrl'?: string | null;
    'isActive'?: boolean | null;
    'workCompanyId'?: string | null;
    'managerId'?: string | null;
    'userIds'?: Array<string> | null;
    'userIdsJoin'?: string | null;
    'projectCategoryId'?: string | null;
}
export interface TicketRuleEngineInsertDto {
    'ruleName'?: string | null;
    'order'?: number;
    'ruleJson'?: string | null;
    'assignedUserId'?: string;
    'assignedTeamId'?: string;
    'assignedDepartmentId'?: string;
    'workflowId'?: string;
    'isActive'?: boolean;
    'createEnvironment'?: number;
}
export interface TicketRuleEngineListDto {
    'id'?: string | null;
    'ruleName'?: string | null;
    'order'?: number;
    'ruleJson'?: string | null;
    'assignedUserId'?: string;
    'assignedTeamId'?: string;
    'assignedDepartmentId'?: string;
    'workflowId'?: string;
    'isActive'?: boolean;
    'createEnvironment'?: number;
}
export interface TicketRuleEngineUpdateDto {
    'id'?: string | null;
    'ruleName'?: string | null;
    'order'?: number;
    'ruleJson'?: string | null;
    'assignedUserId'?: string;
    'assignedTeamId'?: string;
    'assignedDepartmentId'?: string;
    'workflowId'?: string;
    'isActive'?: boolean;
    'createEnvironment'?: number;
}

export const TicketSLA = {
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type TicketSLA = typeof TicketSLA[keyof typeof TicketSLA];



export const TicketStatus = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10,
    NUMBER_11: 11,
    NUMBER_12: 12
} as const;

export type TicketStatus = typeof TicketStatus[keyof typeof TicketStatus];



export const TicketSubject = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8
} as const;

export type TicketSubject = typeof TicketSubject[keyof typeof TicketSubject];


export interface TicketTeam {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'name'?: string | null;
    'departmentId'?: string | null;
    'department'?: TicketDepartment;
    'managerId'?: string | null;
    'manager'?: UserApp;
    'teamList'?: Array<TicketTeamUserApp> | null;
    'workCompanyId'?: string | null;
    'workCompany'?: WorkCompany;
}
export interface TicketTeamInsertDto {
    'name'?: string | null;
    'departmentId'?: string | null;
    'managerId'?: string | null;
    'teamList'?: Array<TicketTeamUserAppInsertDto> | null;
    'workCompanyId'?: string | null;
}
export interface TicketTeamListDto {
    'id'?: string | null;
    'name'?: string | null;
    'departmentId'?: string | null;
    'managerId'?: string | null;
    'teamList'?: Array<TicketTeamUserAppInsertDto> | null;
    'department'?: TicketDepartment;
    'manager'?: UserApp;
    'workCompanyId'?: string | null;
    'workCompany'?: WorkCompany;
}
export interface TicketTeamUpdateDto {
    'id'?: string | null;
    'name'?: string | null;
    'departmentId'?: string | null;
    'managerId'?: string | null;
    'teamList'?: Array<TicketTeamUserAppUpdateDto> | null;
    'workCompanyId'?: string | null;
}
export interface TicketTeamUserApp {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'ticketTeamId'?: string;
    'ticketTeam'?: TicketTeam;
    'userAppId'?: string | null;
    'userApp'?: UserApp;
}
export interface TicketTeamUserAppInsertDto {
    'userAppId'?: string | null;
    'userApp'?: UserApp;
}
export interface TicketTeamUserAppUpdateDto {
    'userAppId'?: string | null;
}

export const TicketType = {
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type TicketType = typeof TicketType[keyof typeof TicketType];


export interface TicketUpdateDto {
    'id'?: string | null;
    'ticketCode'?: string | null;
    'title'?: string | null;
    'description'?: string | null;
    'workCompanyId'?: string | null;
    'workCompanySystemInfoId'?: string | null;
    'userAppId'?: string | null;
    'type'?: TicketType;
    'ticketSLA'?: TicketSLA;
    'ticketSubject'?: TicketSubject;
    'status'?: TicketStatus;
    'priority'?: TicketPriority;
    'ticketDepartmentId'?: string | null;
    'isSend'?: boolean;
    'customerRefId'?: string | null;
    'addedMailAddresses'?: string | null;
    'estimatedDeadline'?: string | null;
    'ticketProjectId'?: string | null;
}


export interface Tickets {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'ticketCode': string;
    'title': string;
    'description': string;
    'workCompanyId': string;
    'workCompany'?: WorkCompany;
    'ticketDepartmentId'?: string | null;
    'ticketDepartment'?: TicketDepartment;
    'workCompanySystemInfoId'?: string | null;
    'workCompanySystemInfo'?: WorkCompanySystemInfo;
    'userAppId': string;
    'userApp'?: UserApp;
    'status': TicketStatus;
    'type': TicketType;
    'priority': TicketPriority;
    'ticketSubject': TicketSubject;
    'ticketSLA': TicketSLA;
    'actualStartDate'?: string | null;
    'actualEndDate'?: string | null;
    'ticketComment'?: Array<TicketComment> | null;
    'approveStatus': ApproveStatus;
    'ticketAssigneId'?: string | null;
    'ticketAssigne'?: TicketAssigne;
    'ticketApproveId'?: string | null;
    'ticketApprove'?: TicketApprove;
    'isTeam'?: boolean;
    'isApprove'?: boolean;
    'workflowHeadId'?: string | null;
    'workflowHead'?: WorkflowHead;
    'customerRefId'?: string | null;
    'customerRef'?: WorkCompany;
    'isFromEmail'?: boolean;
    'mailConversationId'?: string | null;
    'addedMailAddresses'?: string | null;
    'isFilePath'?: boolean | null;
    'filePath'?: string | null;
    'estimatedDeadline'?: string | null;
    'ticketProjectId'?: string | null;
    'ticketProject'?: TicketProjects;
}


export interface TokenDto {
    'accessToken'?: string | null;
    'accessTokenExpiration'?: string;
    'refreshToken'?: string | null;
    'refreshTokenExpiration'?: string;
}
export interface UpdatePositionDto {
    'id'?: string;
    'name'?: string | null;
    'description'?: string | null;
    'customerRefId'?: string | null;
}
export interface UpdateProjectDto {
    'id'?: string;
    'name'?: string | null;
    'description'?: string | null;
    'categoryId'?: number;
    'photo'?: string | null;
    'startDate'?: string;
    'endDate'?: string;
    'projectGain'?: string | null;
    'projectLearn'?: string | null;
    'projectTags'?: string | null;
}
export interface UpdateUserDto {
    'id'?: string | null;
    'company'?: string | null;
    'profileInfo'?: string | null;
    'userName'?: string | null;
    'email'?: string | null;
    'password'?: string | null;
    'firstName'?: string | null;
    'lastName'?: string | null;
    'isSystemAdmin'?: boolean;
    'lastLoginDate'?: string | null;
    'lastLoginIp'?: string | null;
    'canSsoLogin'?: boolean;
    'isBlocked'?: boolean;
    'isTestData'?: boolean | null;
    'vacationMode'?: boolean;
    'photo'?: string | null;
    'phoneNumber'?: string | null;
    'location'?: string | null;
    'facebookUrl'?: string | null;
    'instagramUrl'?: string | null;
    'twitterUrl'?: string | null;
    'department'?: string | null;
    'title'?: string | null;
    'linkedinUrl'?: string | null;
    'sapDepartmentText'?: string | null;
    'sapPositionText'?: string | null;
    'departmentsId'?: string | null;
    'ticketDepartmentId'?: string | null;
    'roleIds'?: Array<UserRoleDto> | null;
    'workCompanyId'?: string | null;
    'positionId'?: string | null;
    'userLevel'?: UserLevel;
    'resetPasswordCode'?: string | null;
    'resetCodeExpiry'?: string | null;
}


export interface UserApp {
    'id'?: string | null;
    'userName'?: string | null;
    'normalizedUserName'?: string | null;
    'email'?: string | null;
    'normalizedEmail'?: string | null;
    'emailConfirmed'?: boolean;
    'passwordHash'?: string | null;
    'securityStamp'?: string | null;
    'concurrencyStamp'?: string | null;
    'phoneNumberConfirmed'?: boolean;
    'twoFactorEnabled'?: boolean;
    'lockoutEnd'?: string | null;
    'lockoutEnabled'?: boolean;
    'accessFailedCount'?: number;
    'firstName'?: string | null;
    'lastName'?: string | null;
    'isSystemAdmin'?: boolean;
    'canSsoLogin'?: boolean;
    'isBlocked'?: boolean;
    'isTestData'?: boolean | null;
    'vacationMode'?: boolean;
    'lastLoginDate'?: string | null;
    'lastLoginIp'?: string | null;
    'profileInfo'?: string | null;
    'title'?: string | null;
    'phoneNumber'?: string | null;
    'location'?: string | null;
    'facebookUrl'?: string | null;
    'instagramUrl'?: string | null;
    'twitterUrl'?: string | null;
    'linkedinUrl'?: string | null;
    'photo'?: string | null;
    'department'?: string | null;
    'sapDepartmentText'?: string | null;
    'sapPositionText'?: string | null;
    'ticketDepartmentId'?: string | null;
    'ticketDepartment'?: TicketDepartment;
    'workCompanyId'?: string | null;
    'workCompany'?: WorkCompany;
    'resetPasswordCode'?: string | null;
    'resetCodeExpiry'?: string | null;
    'positionId'?: string | null;
    'positions'?: Positions;
    'departmentUsers'?: Array<DepartmentUser> | null;
    'userLevel'?: UserLevel;
}


export interface UserAppDto {
    'id'?: string | null;
    'company'?: string | null;
    'userName'?: string | null;
    'email'?: string | null;
    'password'?: string | null;
    'firstName'?: string | null;
    'lastName'?: string | null;
    'isSystemAdmin'?: boolean;
    'isBlocked'?: boolean;
    'isTestData'?: boolean | null;
    'vacationMode'?: boolean;
    'lastLoginDate'?: string;
    'lastLoginIp'?: string | null;
    'canSsoLogin'?: boolean;
    'profileInfo'?: string | null;
    'photo'?: string | null;
    'phoneNumber'?: string | null;
    'location'?: string | null;
    'facebookUrl'?: string | null;
    'instagramUrl'?: string | null;
    'twitterUrl'?: string | null;
    'linkedinUrl'?: string | null;
    'manager1'?: string | null;
    'manager2'?: string | null;
    'title'?: string | null;
    'sapDepartmentText'?: string | null;
    'sapPositionText'?: string | null;
    'departmentId'?: string | null;
    'ticketDepartmentId'?: string | null;
    'roles'?: Array<UserRoleDto> | null;
    'workCompanyId'?: string | null;
    'resetPasswordCode'?: string | null;
    'resetCodeExpiry'?: string | null;
    'positionId'?: string | null;
    'userLevel'?: UserLevel;
}


export interface UserAppDtoOnlyNameId {
    'id'?: string | null;
    'firstName'?: string | null;
    'lastName'?: string | null;
    'userName'?: string | null;
}
export interface UserAppDtoWithoutPhoto {
    'id'?: string | null;
    'company'?: string | null;
    'userName'?: string | null;
    'email'?: string | null;
    'password'?: string | null;
    'firstName'?: string | null;
    'lastName'?: string | null;
    'isSystemAdmin'?: boolean;
    'isBlocked'?: boolean;
    'vacationMode'?: boolean;
    'lastLoginDate'?: string;
    'lastLoginIp'?: string | null;
    'canSsoLogin'?: boolean;
    'profileInfo'?: string | null;
    'phoneNumber'?: string | null;
    'location'?: string | null;
    'facebookUrl'?: string | null;
    'instagramUrl'?: string | null;
    'twitterUrl'?: string | null;
    'linkedinUrl'?: string | null;
    'manager1'?: string | null;
    'manager2'?: string | null;
    'title'?: string | null;
    'sapDepartmentText'?: string | null;
    'sapPositionText'?: string | null;
    'departmentId'?: string | null;
    'ticketDepartmentId'?: string | null;
    'roles'?: Array<UserRoleDto> | null;
    'workCompanyId'?: string | null;
    'departmentText'?: string | null;
    'workCompanyText'?: string | null;
    'positionId'?: string | null;
    'userLevel'?: UserLevel;
}


export interface UserCalendarInsertDto {
    'name'?: string | null;
    'description'?: string | null;
    'startDate'?: string | null;
    'endDate'?: string | null;
    'customerRefId'?: string | null;
    'userAppId'?: string | null;
    'percentage'?: string | null;
    'workLocation'?: WorkLocation;
    'isAvailable'?: boolean;
}


export interface UserCalendarListDto {
    'id'?: string;
    'name'?: string | null;
    'description'?: string | null;
    'startDate'?: string | null;
    'endDate'?: string | null;
    'customerRefId'?: string | null;
    'customerRef'?: WorkCompany;
    'userAppId'?: string | null;
    'userAppDtoWithoutPhoto'?: UserAppDtoWithoutPhoto;
    'userAppDto'?: UserAppDto;
    'color'?: string | null;
    'percentage'?: string | null;
    'workLocation'?: WorkLocation;
    'daysOfWeek'?: Array<boolean> | null;
    'isAvailable'?: boolean;
}


export interface UserCalendarUpdateDto {
    'id'?: string;
    'name'?: string | null;
    'description'?: string | null;
    'startDate'?: string | null;
    'endDate'?: string | null;
    'customerRefId'?: string | null;
    'percentage'?: string | null;
    'userAppId'?: string | null;
    'workLocation'?: WorkLocation;
    'isAvailable'?: boolean | null;
}



export const UserLevel = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type UserLevel = typeof UserLevel[keyof typeof UserLevel];


export interface UserRoleAssignmentGetDto {
    'userId'?: string | null;
    'tenantId'?: string;
    'roles'?: Array<UserRoleAssignmentItemDto> | null;
}
export interface UserRoleAssignmentItemDto {
    'roleId'?: string | null;
    'roleName'?: string | null;
    'isActive'?: boolean;
    'isLocked'?: boolean;
    'isAssignedToUser'?: boolean;
    'userTenantRoleId'?: string | null;
}
export interface UserRoleAssignmentSaveDto {
    'userId'?: string | null;
    'tenantId'?: string;
    'roleAssignments'?: Array<UserRoleAssignmentSaveItemDto> | null;
}
export interface UserRoleAssignmentSaveItemDto {
    'roleId'?: string | null;
    'shouldAssign'?: boolean;
}
export interface UserRoleDto {
    'roleId'?: string | null;
    'roleName'?: string | null;
}
export interface UserSFListDto {
    'count'?: number;
    'sfuSerList'?: Array<SFUSerList> | null;
}
export interface UserTenantBulkAssignUsersDto {
    'tenantId'?: string;
    'userIds'?: Array<string> | null;
    'isActive'?: boolean;
}
export interface UserTenantByTenantDto {
    'userId'?: string | null;
    'userFullName'?: string | null;
    'tenantName'?: string | null;
}
export interface UserTenantInsertDto {
    'userId'?: string | null;
    'tenantId'?: string;
    'isActive'?: boolean;
    'hasTicketPermission'?: boolean;
    'hasDepartmentPermission'?: boolean;
    'hasOtherCompanyPermission'?: boolean;
    'hasOtherDeptCalendarPerm'?: boolean;
    'canEditTicket'?: boolean;
    'dontApplyDefaultFilters'?: boolean;
    'mainManagerUserAppId'?: string | null;
    'pCname'?: string | null;
    'manager1'?: string | null;
    'manager2'?: string | null;
}
export interface UserTenantUpdateDto {
    'id'?: string;
    'isActive'?: boolean;
    'hasTicketPermission'?: boolean;
    'hasDepartmentPermission'?: boolean;
    'hasOtherCompanyPermission'?: boolean;
    'hasOtherDeptCalendarPerm'?: boolean;
    'canEditTicket'?: boolean;
    'dontApplyDefaultFilters'?: boolean;
    'mainManagerUserAppId'?: string | null;
    'pCname'?: string | null;
    'manager1'?: string | null;
    'manager2'?: string | null;
}
export interface UserTenantWithAdminFlagDto {
    'id'?: string;
    'userId'?: string | null;
    'tenantId'?: string;
    'isActive'?: boolean;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'tenantName'?: string | null;
    'tenantSlug'?: string | null;
    'hasTicketPermission'?: boolean;
    'hasDepartmentPermission'?: boolean;
    'hasOtherCompanyPermission'?: boolean;
    'hasOtherDeptCalendarPerm'?: boolean;
    'canEditTicket'?: boolean;
    'dontApplyDefaultFilters'?: boolean;
    'mainManagerUserAppId'?: string | null;
    'pCname'?: string | null;
    'manager1'?: string | null;
    'manager2'?: string | null;
    'isTenantAdmin'?: boolean;
}
export interface UserWeeklyTasksDto {
    'userId'?: string;
    'firstName'?: string | null;
    'lastName'?: string | null;
    'email'?: string | null;
    'ticketDepartmentId'?: string | null;
    'positionId'?: string | null;
    'tasks'?: Array<UserCalendarListDto> | null;
}
export interface WorkCompany {
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'id'?: string;
    'name'?: string | null;
    'approveWorkDesign'?: ApproveWorkDesign;
    'userAppId'?: string | null;
    'userApp'?: UserApp;
    'workFlowDefinationId'?: string | null;
    'workFlowDefination'?: WorkFlowDefination;
    'isActive'?: boolean | null;
}


export interface WorkCompanyDto {
    'id'?: string;
    'name'?: string | null;
    'approveWorkDesign'?: ApproveWorkDesign;
    'userAppId'?: string | null;
    'userApp'?: UserAppDto;
    'workFlowDefination'?: WorkFlowDefination;
    'workFlowDefinationId'?: string | null;
    'isActive'?: boolean | null;
}


export interface WorkCompanyInsertDto {
    'name'?: string | null;
    'approveWorkDesign'?: ApproveWorkDesign;
    'userAppId'?: string | null;
    'workFlowDefinationId'?: string | null;
    'isActive'?: boolean | null;
}


export interface WorkCompanySystemInfo {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'name'?: string | null;
    'workCompanyId'?: string | null;
    'workCompany'?: WorkCompany;
}
export interface WorkCompanySystemInfoInsertDto {
    'name'?: string | null;
    'workCompanyId'?: string | null;
}
export interface WorkCompanySystemInfoListDto {
    'id'?: string;
    'name'?: string | null;
    'workCompanyId'?: string | null;
    'workCompany'?: WorkCompany;
}
export interface WorkCompanySystemInfoUpdateDto {
    'id'?: string | null;
    'name'?: string | null;
    'workCompanyId'?: string | null;
}
export interface WorkCompanyTicketMatrisInsertDto {
    'fromCompanyId'?: string;
    'toCompaniesIds'?: Array<string> | null;
}
export interface WorkCompanyTicketMatrisListDto {
    'id'?: string;
    'fromCompanyId'?: string;
    'fromCompany'?: WorkCompanyDto;
    'toCompaniesIds'?: Array<string> | null;
    'toCompanies'?: Array<WorkCompanyDto> | null;
}
export interface WorkCompanyTicketMatrisUpdateDto {
    'fromCompanyId'?: string;
    'toCompaniesIds'?: Array<string> | null;
}
export interface WorkCompanyUpdateDto {
    'id'?: string | null;
    'name'?: string | null;
    'approveWorkDesign'?: ApproveWorkDesign;
    'userAppId'?: string | null;
    'workFlowDefinationId'?: string | null;
    'isActive'?: boolean | null;
}


export interface WorkFlowContiuneApiDto {
    'approveItem'?: string | null;
    'workFlowItemId'?: string | null;
    'userName'?: string | null;
    'input'?: string | null;
    'note'?: string | null;
    'numberManDay'?: string | null;
}
export interface WorkFlowDefination {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'workflowName'?: string | null;
    'defination'?: string | null;
    'isActive'?: boolean;
    'revision'?: number;
    'workflows'?: Array<WorkflowHead> | null;
    'formId'?: string | null;
    'form'?: Form;
}
export interface WorkFlowDefinationInsertDto {
    'workflowName'?: string | null;
    'defination'?: string | null;
    'isActive'?: boolean;
    'revision'?: number;
}
export interface WorkFlowDefinationListDto {
    'id'?: string;
    'workflowName'?: string | null;
    'defination'?: string | null;
    'isActive'?: boolean;
    'revision'?: number;
}
export interface WorkFlowDefinationUpdateDto {
    'id'?: string;
    'workflowName'?: string | null;
    'defination'?: string | null;
    'isActive'?: boolean;
    'revision'?: number;
}
export interface WorkFlowHeadDto {
    'workflowName'?: string | null;
    'currentNodeId'?: string | null;
    'currentNodeName'?: string | null;
    'workFlowStatus'?: WorkflowStatus;
    'createUser'?: string | null;
    'workflowItems'?: Array<WorkflowItem> | null;
    'workFlowDefinationId'?: string;
    'workFlowDefination'?: WorkFlowDefination;
    'workFlowInfo'?: string | null;
    'uniqNumber'?: number;
}


export interface WorkFlowHeadDtoResultStartOrContinue {
    'id'?: string | null;
    'workFlowInfo'?: string | null;
}
export interface WorkFlowHeadDtoWithoutItems {
    'id'?: string | null;
    'workflowName'?: string | null;
    'currentNodeId'?: string | null;
    'currentNodeName'?: string | null;
    'workFlowStatus'?: WorkflowStatus;
    'createUser'?: string | null;
    'workFlowDefinationId'?: string;
    'workFlowDefination'?: WorkFlowDefination;
    'createdDate'?: string;
    'workFlowInfo'?: string | null;
    'uniqNumber'?: number;
}


export interface WorkFlowItemDto {
    'workflowHead'?: WorkFlowHeadDtoWithoutItems;
    'nodeId'?: string | null;
    'nodeName'?: string | null;
    'nodeType'?: string | null;
    'nodeDescription'?: string | null;
    'workFlowNodeStatus'?: WorkflowStatus;
}


export interface WorkFlowItemDtoWithApproveItems {
    'nodeId'?: string | null;
    'nodeName'?: string | null;
    'nodeType'?: string | null;
    'nodeDescription'?: string | null;
    'workFlowNodeStatus'?: WorkflowStatus;
    'approveItems'?: Array<ApproveItemsDto> | null;
}


export interface WorkFlowStartApiDto {
    'workFlowInfo'?: string | null;
    'definationId'?: string | null;
    'userName'?: string | null;
}

export const WorkLocation = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type WorkLocation = typeof WorkLocation[keyof typeof WorkLocation];


export interface WorkflowHead {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'workflowName'?: string | null;
    'currentNodeId'?: string | null;
    'currentNodeName'?: string | null;
    'workFlowStatus'?: WorkflowStatus;
    'workFlowInfo'?: string | null;
    'createUser'?: string | null;
    'workflowItems'?: Array<WorkflowItem> | null;
    'workFlowDefinationId'?: string;
    'workFlowDefination'?: WorkFlowDefination;
    'workFlowDefinationJson'?: string | null;
}


export interface WorkflowItem {
    'id'?: string;
    'mainClientId'?: string | null;
    'mainClient'?: MainClient;
    'companyId'?: string | null;
    'company'?: Company;
    'plantId'?: string | null;
    'plant'?: Plant;
    'createdBy'?: string | null;
    'updatedBy'?: string | null;
    'createdDate'?: string;
    'updatedDate'?: string | null;
    'isDelete'?: boolean;
    'uniqNumber'?: number;
    'workflowHeadId'?: string;
    'workflowHead'?: WorkflowHead;
    'nodeId'?: string | null;
    'nodeName'?: string | null;
    'nodeType'?: string | null;
    'nodeDescription'?: string | null;
    'workFlowNodeStatus'?: WorkflowStatus;
    'approveItems'?: Array<ApproveItems> | null;
}



export const WorkflowStatus = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type WorkflowStatus = typeof WorkflowStatus[keyof typeof WorkflowStatus];



/**
 * ActivitiesApi - axios parameter creator
 */
export const ActivitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmActivitiesCustomerCustomerIdGet: async (customerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCrmActivitiesCustomerCustomerIdGet', 'customerId', customerId)
            const localVarPath = `/api/crm/Activities/customer/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmActivitiesIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCrmActivitiesIdDelete', 'id', id)
            const localVarPath = `/api/crm/Activities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmActivitiesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCrmActivitiesIdGet', 'id', id)
            const localVarPath = `/api/crm/Activities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ActivityDto} [activityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmActivitiesPost: async (activityDto?: ActivityDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/crm/Activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(activityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ActivityDto} [activityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmActivitiesPut: async (activityDto?: ActivityDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/crm/Activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(activityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActivitiesApi - functional programming interface
 */
export const ActivitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ActivitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmActivitiesCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmActivitiesCustomerCustomerIdGet(customerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActivitiesApi.apiCrmActivitiesCustomerCustomerIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmActivitiesIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmActivitiesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActivitiesApi.apiCrmActivitiesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmActivitiesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmActivitiesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActivitiesApi.apiCrmActivitiesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ActivityDto} [activityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmActivitiesPost(activityDto?: ActivityDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmActivitiesPost(activityDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActivitiesApi.apiCrmActivitiesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ActivityDto} [activityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmActivitiesPut(activityDto?: ActivityDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmActivitiesPut(activityDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActivitiesApi.apiCrmActivitiesPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ActivitiesApi - factory interface
 */
export const ActivitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ActivitiesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmActivitiesCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmActivitiesCustomerCustomerIdGet(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmActivitiesIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmActivitiesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmActivitiesIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmActivitiesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ActivityDto} [activityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmActivitiesPost(activityDto?: ActivityDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmActivitiesPost(activityDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ActivityDto} [activityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmActivitiesPut(activityDto?: ActivityDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmActivitiesPut(activityDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActivitiesApi - object-oriented interface
 */
export class ActivitiesApi extends BaseAPI {
    /**
     * 
     * @param {string} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmActivitiesCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).apiCrmActivitiesCustomerCustomerIdGet(customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmActivitiesIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).apiCrmActivitiesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmActivitiesIdGet(id: string, options?: RawAxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).apiCrmActivitiesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ActivityDto} [activityDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmActivitiesPost(activityDto?: ActivityDto, options?: RawAxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).apiCrmActivitiesPost(activityDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ActivityDto} [activityDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmActivitiesPut(activityDto?: ActivityDto, options?: RawAxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).apiCrmActivitiesPut(activityDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ApproveItemsApi - axios parameter creator
 */
export const ApproveItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApproveItemsAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ApproveItems/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userName 
         * @param {ApproverStatus} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApproveItemsGetAdminApprovesUserNameGet: async (userName: string, type?: ApproverStatus, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userName' is not null or undefined
            assertParamExists('apiApproveItemsGetAdminApprovesUserNameGet', 'userName', userName)
            const localVarPath = `/api/ApproveItems/GetAdminApproves/{userName}`
                .replace(`{${"userName"}}`, encodeURIComponent(String(userName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApproverStatus} [type] 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [workFlowDefinationId] 
         * @param {string} [createUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApproveItemsGetApprovesGet: async (type?: ApproverStatus, skip?: number, top?: number, workFlowDefinationId?: string, createUser?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ApproveItems/GetApproves`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (workFlowDefinationId !== undefined) {
                localVarQueryParameter['WorkFlowDefinationId'] = workFlowDefinationId;
            }

            if (createUser !== undefined) {
                localVarQueryParameter['createUser'] = createUser;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApproveItemsGetByIdIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiApproveItemsGetByIdIdGet', 'id', id)
            const localVarPath = `/api/ApproveItems/GetById/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApproveItemsGetOpenApprovesUserNameGet: async (userName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userName' is not null or undefined
            assertParamExists('apiApproveItemsGetOpenApprovesUserNameGet', 'userName', userName)
            const localVarPath = `/api/ApproveItems/GetOpenApproves/{userName}`
                .replace(`{${"userName"}}`, encodeURIComponent(String(userName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [workFlowId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApproveItemsGetOpenDetailGetOpenDetailGet: async (workFlowId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ApproveItems/GetOpenDetail/GetOpenDetail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (workFlowId !== undefined) {
                localVarQueryParameter['workFlowId'] = workFlowId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApproveItemsGetPendingCountGetPendingCountGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ApproveItems/GetPendingCount/GetPendingCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [workflowHeadId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApproveItemsGetTicketIdGetTicketIdGet: async (workflowHeadId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ApproveItems/GetTicketId/GetTicketId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (workflowHeadId !== undefined) {
                localVarQueryParameter['workflowHeadId'] = workflowHeadId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApproveItemsApi - functional programming interface
 */
export const ApproveItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApproveItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiApproveItemsAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApproveHeadInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiApproveItemsAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApproveItemsApi.apiApproveItemsAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userName 
         * @param {ApproverStatus} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiApproveItemsGetAdminApprovesUserNameGet(userName: string, type?: ApproverStatus, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApproveItemsDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiApproveItemsGetAdminApprovesUserNameGet(userName, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApproveItemsApi.apiApproveItemsGetAdminApprovesUserNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApproverStatus} [type] 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [workFlowDefinationId] 
         * @param {string} [createUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiApproveItemsGetApprovesGet(type?: ApproverStatus, skip?: number, top?: number, workFlowDefinationId?: string, createUser?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApproveItemsDtoResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiApproveItemsGetApprovesGet(type, skip, top, workFlowDefinationId, createUser, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApproveItemsApi.apiApproveItemsGetApprovesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiApproveItemsGetByIdIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApproveItemsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiApproveItemsGetByIdIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApproveItemsApi.apiApproveItemsGetByIdIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiApproveItemsGetOpenApprovesUserNameGet(userName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApproveItemsDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiApproveItemsGetOpenApprovesUserNameGet(userName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApproveItemsApi.apiApproveItemsGetOpenApprovesUserNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [workFlowId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiApproveItemsGetOpenDetailGetOpenDetailGet(workFlowId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiApproveItemsGetOpenDetailGetOpenDetailGet(workFlowId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApproveItemsApi.apiApproveItemsGetOpenDetailGetOpenDetailGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiApproveItemsGetPendingCountGetPendingCountGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiApproveItemsGetPendingCountGetPendingCountGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApproveItemsApi.apiApproveItemsGetPendingCountGetPendingCountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [workflowHeadId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiApproveItemsGetTicketIdGetTicketIdGet(workflowHeadId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiApproveItemsGetTicketIdGetTicketIdGet(workflowHeadId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApproveItemsApi.apiApproveItemsGetTicketIdGetTicketIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApproveItemsApi - factory interface
 */
export const ApproveItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApproveItemsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApproveItemsAllGet(options?: RawAxiosRequestConfig): AxiosPromise<ApproveHeadInfo> {
            return localVarFp.apiApproveItemsAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userName 
         * @param {ApproverStatus} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApproveItemsGetAdminApprovesUserNameGet(userName: string, type?: ApproverStatus, options?: RawAxiosRequestConfig): AxiosPromise<Array<ApproveItemsDto>> {
            return localVarFp.apiApproveItemsGetAdminApprovesUserNameGet(userName, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApproverStatus} [type] 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [workFlowDefinationId] 
         * @param {string} [createUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApproveItemsGetApprovesGet(type?: ApproverStatus, skip?: number, top?: number, workFlowDefinationId?: string, createUser?: string, options?: RawAxiosRequestConfig): AxiosPromise<ApproveItemsDtoResult> {
            return localVarFp.apiApproveItemsGetApprovesGet(type, skip, top, workFlowDefinationId, createUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApproveItemsGetByIdIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ApproveItemsDto> {
            return localVarFp.apiApproveItemsGetByIdIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApproveItemsGetOpenApprovesUserNameGet(userName: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ApproveItemsDto>> {
            return localVarFp.apiApproveItemsGetOpenApprovesUserNameGet(userName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [workFlowId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApproveItemsGetOpenDetailGetOpenDetailGet(workFlowId?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiApproveItemsGetOpenDetailGetOpenDetailGet(workFlowId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApproveItemsGetPendingCountGetPendingCountGet(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.apiApproveItemsGetPendingCountGetPendingCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [workflowHeadId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApproveItemsGetTicketIdGetTicketIdGet(workflowHeadId?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiApproveItemsGetTicketIdGetTicketIdGet(workflowHeadId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApproveItemsApi - object-oriented interface
 */
export class ApproveItemsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiApproveItemsAllGet(options?: RawAxiosRequestConfig) {
        return ApproveItemsApiFp(this.configuration).apiApproveItemsAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userName 
     * @param {ApproverStatus} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiApproveItemsGetAdminApprovesUserNameGet(userName: string, type?: ApproverStatus, options?: RawAxiosRequestConfig) {
        return ApproveItemsApiFp(this.configuration).apiApproveItemsGetAdminApprovesUserNameGet(userName, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApproverStatus} [type] 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [workFlowDefinationId] 
     * @param {string} [createUser] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiApproveItemsGetApprovesGet(type?: ApproverStatus, skip?: number, top?: number, workFlowDefinationId?: string, createUser?: string, options?: RawAxiosRequestConfig) {
        return ApproveItemsApiFp(this.configuration).apiApproveItemsGetApprovesGet(type, skip, top, workFlowDefinationId, createUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiApproveItemsGetByIdIdGet(id: string, options?: RawAxiosRequestConfig) {
        return ApproveItemsApiFp(this.configuration).apiApproveItemsGetByIdIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiApproveItemsGetOpenApprovesUserNameGet(userName: string, options?: RawAxiosRequestConfig) {
        return ApproveItemsApiFp(this.configuration).apiApproveItemsGetOpenApprovesUserNameGet(userName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [workFlowId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiApproveItemsGetOpenDetailGetOpenDetailGet(workFlowId?: string, options?: RawAxiosRequestConfig) {
        return ApproveItemsApiFp(this.configuration).apiApproveItemsGetOpenDetailGetOpenDetailGet(workFlowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiApproveItemsGetPendingCountGetPendingCountGet(options?: RawAxiosRequestConfig) {
        return ApproveItemsApiFp(this.configuration).apiApproveItemsGetPendingCountGetPendingCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [workflowHeadId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiApproveItemsGetTicketIdGetTicketIdGet(workflowHeadId?: string, options?: RawAxiosRequestConfig) {
        return ApproveItemsApiFp(this.configuration).apiApproveItemsGetTicketIdGetTicketIdGet(workflowHeadId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ClientLoginDto} [clientLoginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthCreateTokenByClientPost: async (clientLoginDto?: ClientLoginDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/CreateTokenByClient`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RefreshTokenDto} [refreshTokenDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthCreateTokenByRefreshTokenPost: async (refreshTokenDto?: RefreshTokenDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/CreateTokenByRefreshToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginDto} [loginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthCreateTokenPost: async (loginDto?: LoginDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/CreateToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginDto} [loginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthCreateTokenPostCreateTokenPostPost: async (loginDto?: LoginDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/CreateTokenPost/CreateTokenPost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthGetDatabaseNameGetDatabaseNameGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/GetDatabaseName/getDatabaseName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RefreshTokenDto} [refreshTokenDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRevokeRefreshTokenPost: async (refreshTokenDto?: RefreshTokenDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/RevokeRefreshToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ClientLoginDto} [clientLoginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthCreateTokenByClientPost(clientLoginDto?: ClientLoginDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthCreateTokenByClientPost(clientLoginDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthCreateTokenByClientPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RefreshTokenDto} [refreshTokenDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthCreateTokenByRefreshTokenPost(refreshTokenDto?: RefreshTokenDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthCreateTokenByRefreshTokenPost(refreshTokenDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthCreateTokenByRefreshTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginDto} [loginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthCreateTokenPost(loginDto?: LoginDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthCreateTokenPost(loginDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthCreateTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginDto} [loginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthCreateTokenPostCreateTokenPostPost(loginDto?: LoginDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthCreateTokenPostCreateTokenPostPost(loginDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthCreateTokenPostCreateTokenPostPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthGetDatabaseNameGetDatabaseNameGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthGetDatabaseNameGetDatabaseNameGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthGetDatabaseNameGetDatabaseNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RefreshTokenDto} [refreshTokenDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthRevokeRefreshTokenPost(refreshTokenDto?: RefreshTokenDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthRevokeRefreshTokenPost(refreshTokenDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthRevokeRefreshTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {ClientLoginDto} [clientLoginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthCreateTokenByClientPost(clientLoginDto?: ClientLoginDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuthCreateTokenByClientPost(clientLoginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RefreshTokenDto} [refreshTokenDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthCreateTokenByRefreshTokenPost(refreshTokenDto?: RefreshTokenDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuthCreateTokenByRefreshTokenPost(refreshTokenDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginDto} [loginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthCreateTokenPost(loginDto?: LoginDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuthCreateTokenPost(loginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginDto} [loginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthCreateTokenPostCreateTokenPostPost(loginDto?: LoginDto, options?: RawAxiosRequestConfig): AxiosPromise<TokenDto> {
            return localVarFp.apiAuthCreateTokenPostCreateTokenPostPost(loginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthGetDatabaseNameGetDatabaseNameGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuthGetDatabaseNameGetDatabaseNameGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RefreshTokenDto} [refreshTokenDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRevokeRefreshTokenPost(refreshTokenDto?: RefreshTokenDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuthRevokeRefreshTokenPost(refreshTokenDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {ClientLoginDto} [clientLoginDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAuthCreateTokenByClientPost(clientLoginDto?: ClientLoginDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthCreateTokenByClientPost(clientLoginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RefreshTokenDto} [refreshTokenDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAuthCreateTokenByRefreshTokenPost(refreshTokenDto?: RefreshTokenDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthCreateTokenByRefreshTokenPost(refreshTokenDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginDto} [loginDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAuthCreateTokenPost(loginDto?: LoginDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthCreateTokenPost(loginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginDto} [loginDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAuthCreateTokenPostCreateTokenPostPost(loginDto?: LoginDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthCreateTokenPostCreateTokenPostPost(loginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAuthGetDatabaseNameGetDatabaseNameGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthGetDatabaseNameGetDatabaseNameGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RefreshTokenDto} [refreshTokenDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAuthRevokeRefreshTokenPost(refreshTokenDto?: RefreshTokenDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthRevokeRefreshTokenPost(refreshTokenDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BudgetAdminUserApi - axios parameter creator
 */
export const BudgetAdminUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} userid 
         * @param {string} proxyUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetAdminUserCheckProxyUserUseridproxyUserGet: async (userid: string, proxyUser: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userid' is not null or undefined
            assertParamExists('apiBudgetAdminUserCheckProxyUserUseridproxyUserGet', 'userid', userid)
            // verify required parameter 'proxyUser' is not null or undefined
            assertParamExists('apiBudgetAdminUserCheckProxyUserUseridproxyUserGet', 'proxyUser', proxyUser)
            const localVarPath = `/api/BudgetAdminUser/CheckProxyUser/{userid},{proxyUser}`
                .replace(`{${"userid"}}`, encodeURIComponent(String(userid)))
                .replace(`{${"proxyUser"}}`, encodeURIComponent(String(proxyUser)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetAdminUserGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BudgetAdminUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetAdminUserGetUsernNameUserNameGet: async (userName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userName' is not null or undefined
            assertParamExists('apiBudgetAdminUserGetUsernNameUserNameGet', 'userName', userName)
            const localVarPath = `/api/BudgetAdminUser/GetUsernName/{userName}`
                .replace(`{${"userName"}}`, encodeURIComponent(String(userName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetAdminUserIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBudgetAdminUserIdDelete', 'id', id)
            const localVarPath = `/api/BudgetAdminUser/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetAdminUserIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBudgetAdminUserIdGet', 'id', id)
            const localVarPath = `/api/BudgetAdminUser/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BudgetAdminUserInsertDto} [budgetAdminUserInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetAdminUserPost: async (budgetAdminUserInsertDto?: BudgetAdminUserInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BudgetAdminUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(budgetAdminUserInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BudgetAdminUserUpdateDto} [budgetAdminUserUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetAdminUserPut: async (budgetAdminUserUpdateDto?: BudgetAdminUserUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BudgetAdminUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(budgetAdminUserUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BudgetAdminUserApi - functional programming interface
 */
export const BudgetAdminUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BudgetAdminUserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} userid 
         * @param {string} proxyUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetAdminUserCheckProxyUserUseridproxyUserGet(userid: string, proxyUser: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetAdminUserCheckProxyUserUseridproxyUserGet(userid, proxyUser, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetAdminUserApi.apiBudgetAdminUserCheckProxyUserUseridproxyUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetAdminUserGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BudgetAdminUserListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetAdminUserGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetAdminUserApi.apiBudgetAdminUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetAdminUserGetUsernNameUserNameGet(userName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetAdminUserListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetAdminUserGetUsernNameUserNameGet(userName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetAdminUserApi.apiBudgetAdminUserGetUsernNameUserNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetAdminUserIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetAdminUserIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetAdminUserApi.apiBudgetAdminUserIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetAdminUserIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetAdminUserListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetAdminUserIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetAdminUserApi.apiBudgetAdminUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BudgetAdminUserInsertDto} [budgetAdminUserInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetAdminUserPost(budgetAdminUserInsertDto?: BudgetAdminUserInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetAdminUserListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetAdminUserPost(budgetAdminUserInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetAdminUserApi.apiBudgetAdminUserPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BudgetAdminUserUpdateDto} [budgetAdminUserUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetAdminUserPut(budgetAdminUserUpdateDto?: BudgetAdminUserUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetAdminUserUpdateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetAdminUserPut(budgetAdminUserUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetAdminUserApi.apiBudgetAdminUserPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BudgetAdminUserApi - factory interface
 */
export const BudgetAdminUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BudgetAdminUserApiFp(configuration)
    return {
        /**
         * 
         * @param {string} userid 
         * @param {string} proxyUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetAdminUserCheckProxyUserUseridproxyUserGet(userid: string, proxyUser: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.apiBudgetAdminUserCheckProxyUserUseridproxyUserGet(userid, proxyUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetAdminUserGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<BudgetAdminUserListDto>> {
            return localVarFp.apiBudgetAdminUserGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetAdminUserGetUsernNameUserNameGet(userName: string, options?: RawAxiosRequestConfig): AxiosPromise<BudgetAdminUserListDto> {
            return localVarFp.apiBudgetAdminUserGetUsernNameUserNameGet(userName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetAdminUserIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBudgetAdminUserIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetAdminUserIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<BudgetAdminUserListDto> {
            return localVarFp.apiBudgetAdminUserIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BudgetAdminUserInsertDto} [budgetAdminUserInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetAdminUserPost(budgetAdminUserInsertDto?: BudgetAdminUserInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<BudgetAdminUserListDto> {
            return localVarFp.apiBudgetAdminUserPost(budgetAdminUserInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BudgetAdminUserUpdateDto} [budgetAdminUserUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetAdminUserPut(budgetAdminUserUpdateDto?: BudgetAdminUserUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<BudgetAdminUserUpdateDto> {
            return localVarFp.apiBudgetAdminUserPut(budgetAdminUserUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BudgetAdminUserApi - object-oriented interface
 */
export class BudgetAdminUserApi extends BaseAPI {
    /**
     * 
     * @param {string} userid 
     * @param {string} proxyUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetAdminUserCheckProxyUserUseridproxyUserGet(userid: string, proxyUser: string, options?: RawAxiosRequestConfig) {
        return BudgetAdminUserApiFp(this.configuration).apiBudgetAdminUserCheckProxyUserUseridproxyUserGet(userid, proxyUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetAdminUserGet(options?: RawAxiosRequestConfig) {
        return BudgetAdminUserApiFp(this.configuration).apiBudgetAdminUserGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetAdminUserGetUsernNameUserNameGet(userName: string, options?: RawAxiosRequestConfig) {
        return BudgetAdminUserApiFp(this.configuration).apiBudgetAdminUserGetUsernNameUserNameGet(userName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetAdminUserIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return BudgetAdminUserApiFp(this.configuration).apiBudgetAdminUserIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetAdminUserIdGet(id: string, options?: RawAxiosRequestConfig) {
        return BudgetAdminUserApiFp(this.configuration).apiBudgetAdminUserIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BudgetAdminUserInsertDto} [budgetAdminUserInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetAdminUserPost(budgetAdminUserInsertDto?: BudgetAdminUserInsertDto, options?: RawAxiosRequestConfig) {
        return BudgetAdminUserApiFp(this.configuration).apiBudgetAdminUserPost(budgetAdminUserInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BudgetAdminUserUpdateDto} [budgetAdminUserUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetAdminUserPut(budgetAdminUserUpdateDto?: BudgetAdminUserUpdateDto, options?: RawAxiosRequestConfig) {
        return BudgetAdminUserApiFp(this.configuration).apiBudgetAdminUserPut(budgetAdminUserUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BudgetJobCodeRequestApi - axios parameter creator
 */
export const BudgetJobCodeRequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetJobCodeRequestGet: async (skip?: number, top?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BudgetJobCodeRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetJobCodeRequestIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBudgetJobCodeRequestIdDelete', 'id', id)
            const localVarPath = `/api/BudgetJobCodeRequest/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetJobCodeRequestIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBudgetJobCodeRequestIdGet', 'id', id)
            const localVarPath = `/api/BudgetJobCodeRequest/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BudgetJobCodeRequestInsertDto} [budgetJobCodeRequestInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetJobCodeRequestPost: async (budgetJobCodeRequestInsertDto?: BudgetJobCodeRequestInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BudgetJobCodeRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(budgetJobCodeRequestInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BudgetJobCodeRequestUpdateDto} [budgetJobCodeRequestUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetJobCodeRequestPut: async (budgetJobCodeRequestUpdateDto?: BudgetJobCodeRequestUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BudgetJobCodeRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(budgetJobCodeRequestUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BudgetJobCodeRequestApi - functional programming interface
 */
export const BudgetJobCodeRequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BudgetJobCodeRequestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetJobCodeRequestGet(skip?: number, top?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetJobCodeRequestListDtoResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetJobCodeRequestGet(skip, top, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetJobCodeRequestApi.apiBudgetJobCodeRequestGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetJobCodeRequestIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetJobCodeRequestIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetJobCodeRequestApi.apiBudgetJobCodeRequestIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetJobCodeRequestIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetJobCodeRequestListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetJobCodeRequestIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetJobCodeRequestApi.apiBudgetJobCodeRequestIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BudgetJobCodeRequestInsertDto} [budgetJobCodeRequestInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetJobCodeRequestPost(budgetJobCodeRequestInsertDto?: BudgetJobCodeRequestInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetJobCodeRequestListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetJobCodeRequestPost(budgetJobCodeRequestInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetJobCodeRequestApi.apiBudgetJobCodeRequestPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BudgetJobCodeRequestUpdateDto} [budgetJobCodeRequestUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetJobCodeRequestPut(budgetJobCodeRequestUpdateDto?: BudgetJobCodeRequestUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetJobCodeRequestUpdateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetJobCodeRequestPut(budgetJobCodeRequestUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetJobCodeRequestApi.apiBudgetJobCodeRequestPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BudgetJobCodeRequestApi - factory interface
 */
export const BudgetJobCodeRequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BudgetJobCodeRequestApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetJobCodeRequestGet(skip?: number, top?: number, options?: RawAxiosRequestConfig): AxiosPromise<BudgetJobCodeRequestListDtoResult> {
            return localVarFp.apiBudgetJobCodeRequestGet(skip, top, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetJobCodeRequestIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBudgetJobCodeRequestIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetJobCodeRequestIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<BudgetJobCodeRequestListDto> {
            return localVarFp.apiBudgetJobCodeRequestIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BudgetJobCodeRequestInsertDto} [budgetJobCodeRequestInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetJobCodeRequestPost(budgetJobCodeRequestInsertDto?: BudgetJobCodeRequestInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<BudgetJobCodeRequestListDto> {
            return localVarFp.apiBudgetJobCodeRequestPost(budgetJobCodeRequestInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BudgetJobCodeRequestUpdateDto} [budgetJobCodeRequestUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetJobCodeRequestPut(budgetJobCodeRequestUpdateDto?: BudgetJobCodeRequestUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<BudgetJobCodeRequestUpdateDto> {
            return localVarFp.apiBudgetJobCodeRequestPut(budgetJobCodeRequestUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BudgetJobCodeRequestApi - object-oriented interface
 */
export class BudgetJobCodeRequestApi extends BaseAPI {
    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetJobCodeRequestGet(skip?: number, top?: number, options?: RawAxiosRequestConfig) {
        return BudgetJobCodeRequestApiFp(this.configuration).apiBudgetJobCodeRequestGet(skip, top, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetJobCodeRequestIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return BudgetJobCodeRequestApiFp(this.configuration).apiBudgetJobCodeRequestIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetJobCodeRequestIdGet(id: string, options?: RawAxiosRequestConfig) {
        return BudgetJobCodeRequestApiFp(this.configuration).apiBudgetJobCodeRequestIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BudgetJobCodeRequestInsertDto} [budgetJobCodeRequestInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetJobCodeRequestPost(budgetJobCodeRequestInsertDto?: BudgetJobCodeRequestInsertDto, options?: RawAxiosRequestConfig) {
        return BudgetJobCodeRequestApiFp(this.configuration).apiBudgetJobCodeRequestPost(budgetJobCodeRequestInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BudgetJobCodeRequestUpdateDto} [budgetJobCodeRequestUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetJobCodeRequestPut(budgetJobCodeRequestUpdateDto?: BudgetJobCodeRequestUpdateDto, options?: RawAxiosRequestConfig) {
        return BudgetJobCodeRequestApiFp(this.configuration).apiBudgetJobCodeRequestPut(budgetJobCodeRequestUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BudgetNormCodeRequestApi - axios parameter creator
 */
export const BudgetNormCodeRequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetNormCodeRequestAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BudgetNormCodeRequest/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetNormCodeRequestAllWaitingApproveCountGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BudgetNormCodeRequest/allWaitingApproveCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetNormCodeRequestByCodeCodeGet: async (code: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('apiBudgetNormCodeRequestByCodeCodeGet', 'code', code)
            const localVarPath = `/api/BudgetNormCodeRequest/byCode/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetNormCodeRequestCheckPositionHasJobPostGet: async (code?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BudgetNormCodeRequest/CheckPositionHasJobPost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [createdBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetNormCodeRequestGet: async (skip?: number, top?: number, createdBy?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BudgetNormCodeRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['createdBy'] = createdBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetNormCodeRequestIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBudgetNormCodeRequestIdDelete', 'id', id)
            const localVarPath = `/api/BudgetNormCodeRequest/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetNormCodeRequestIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBudgetNormCodeRequestIdGet', 'id', id)
            const localVarPath = `/api/BudgetNormCodeRequest/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BudgetNormCodeRequestInsertDto} [budgetNormCodeRequestInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetNormCodeRequestPost: async (budgetNormCodeRequestInsertDto?: BudgetNormCodeRequestInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BudgetNormCodeRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(budgetNormCodeRequestInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BudgetNormCodeRequestUpdateDto} [budgetNormCodeRequestUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetNormCodeRequestPut: async (budgetNormCodeRequestUpdateDto?: BudgetNormCodeRequestUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BudgetNormCodeRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(budgetNormCodeRequestUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BudgetNormCodeRequestApi - functional programming interface
 */
export const BudgetNormCodeRequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BudgetNormCodeRequestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetNormCodeRequestAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetNormCodeRequestListDtoOnlyCodeResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetNormCodeRequestAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetNormCodeRequestApi.apiBudgetNormCodeRequestAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetNormCodeRequestAllWaitingApproveCountGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetNormCodeRequestAllWaitingApproveCountGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetNormCodeRequestApi.apiBudgetNormCodeRequestAllWaitingApproveCountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetNormCodeRequestByCodeCodeGet(code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetNormCodeRequestListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetNormCodeRequestByCodeCodeGet(code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetNormCodeRequestApi.apiBudgetNormCodeRequestByCodeCodeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetNormCodeRequestCheckPositionHasJobPostGet(code?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetNormCodeRequestCheckPositionHasJobPostGet(code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetNormCodeRequestApi.apiBudgetNormCodeRequestCheckPositionHasJobPostGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [createdBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetNormCodeRequestGet(skip?: number, top?: number, createdBy?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetNormCodeRequestListDtoResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetNormCodeRequestGet(skip, top, createdBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetNormCodeRequestApi.apiBudgetNormCodeRequestGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetNormCodeRequestIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetNormCodeRequestIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetNormCodeRequestApi.apiBudgetNormCodeRequestIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetNormCodeRequestIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetNormCodeRequestListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetNormCodeRequestIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetNormCodeRequestApi.apiBudgetNormCodeRequestIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BudgetNormCodeRequestInsertDto} [budgetNormCodeRequestInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetNormCodeRequestPost(budgetNormCodeRequestInsertDto?: BudgetNormCodeRequestInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetNormCodeRequestListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetNormCodeRequestPost(budgetNormCodeRequestInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetNormCodeRequestApi.apiBudgetNormCodeRequestPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BudgetNormCodeRequestUpdateDto} [budgetNormCodeRequestUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetNormCodeRequestPut(budgetNormCodeRequestUpdateDto?: BudgetNormCodeRequestUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetNormCodeRequestUpdateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetNormCodeRequestPut(budgetNormCodeRequestUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetNormCodeRequestApi.apiBudgetNormCodeRequestPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BudgetNormCodeRequestApi - factory interface
 */
export const BudgetNormCodeRequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BudgetNormCodeRequestApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetNormCodeRequestAllGet(options?: RawAxiosRequestConfig): AxiosPromise<BudgetNormCodeRequestListDtoOnlyCodeResult> {
            return localVarFp.apiBudgetNormCodeRequestAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetNormCodeRequestAllWaitingApproveCountGet(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.apiBudgetNormCodeRequestAllWaitingApproveCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetNormCodeRequestByCodeCodeGet(code: string, options?: RawAxiosRequestConfig): AxiosPromise<BudgetNormCodeRequestListDto> {
            return localVarFp.apiBudgetNormCodeRequestByCodeCodeGet(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetNormCodeRequestCheckPositionHasJobPostGet(code?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiBudgetNormCodeRequestCheckPositionHasJobPostGet(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [createdBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetNormCodeRequestGet(skip?: number, top?: number, createdBy?: string, options?: RawAxiosRequestConfig): AxiosPromise<BudgetNormCodeRequestListDtoResult> {
            return localVarFp.apiBudgetNormCodeRequestGet(skip, top, createdBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetNormCodeRequestIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBudgetNormCodeRequestIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetNormCodeRequestIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<BudgetNormCodeRequestListDto> {
            return localVarFp.apiBudgetNormCodeRequestIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BudgetNormCodeRequestInsertDto} [budgetNormCodeRequestInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetNormCodeRequestPost(budgetNormCodeRequestInsertDto?: BudgetNormCodeRequestInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<BudgetNormCodeRequestListDto> {
            return localVarFp.apiBudgetNormCodeRequestPost(budgetNormCodeRequestInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BudgetNormCodeRequestUpdateDto} [budgetNormCodeRequestUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetNormCodeRequestPut(budgetNormCodeRequestUpdateDto?: BudgetNormCodeRequestUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<BudgetNormCodeRequestUpdateDto> {
            return localVarFp.apiBudgetNormCodeRequestPut(budgetNormCodeRequestUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BudgetNormCodeRequestApi - object-oriented interface
 */
export class BudgetNormCodeRequestApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetNormCodeRequestAllGet(options?: RawAxiosRequestConfig) {
        return BudgetNormCodeRequestApiFp(this.configuration).apiBudgetNormCodeRequestAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetNormCodeRequestAllWaitingApproveCountGet(options?: RawAxiosRequestConfig) {
        return BudgetNormCodeRequestApiFp(this.configuration).apiBudgetNormCodeRequestAllWaitingApproveCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetNormCodeRequestByCodeCodeGet(code: string, options?: RawAxiosRequestConfig) {
        return BudgetNormCodeRequestApiFp(this.configuration).apiBudgetNormCodeRequestByCodeCodeGet(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [code] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetNormCodeRequestCheckPositionHasJobPostGet(code?: string, options?: RawAxiosRequestConfig) {
        return BudgetNormCodeRequestApiFp(this.configuration).apiBudgetNormCodeRequestCheckPositionHasJobPostGet(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [createdBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetNormCodeRequestGet(skip?: number, top?: number, createdBy?: string, options?: RawAxiosRequestConfig) {
        return BudgetNormCodeRequestApiFp(this.configuration).apiBudgetNormCodeRequestGet(skip, top, createdBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetNormCodeRequestIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return BudgetNormCodeRequestApiFp(this.configuration).apiBudgetNormCodeRequestIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetNormCodeRequestIdGet(id: string, options?: RawAxiosRequestConfig) {
        return BudgetNormCodeRequestApiFp(this.configuration).apiBudgetNormCodeRequestIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BudgetNormCodeRequestInsertDto} [budgetNormCodeRequestInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetNormCodeRequestPost(budgetNormCodeRequestInsertDto?: BudgetNormCodeRequestInsertDto, options?: RawAxiosRequestConfig) {
        return BudgetNormCodeRequestApiFp(this.configuration).apiBudgetNormCodeRequestPost(budgetNormCodeRequestInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BudgetNormCodeRequestUpdateDto} [budgetNormCodeRequestUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetNormCodeRequestPut(budgetNormCodeRequestUpdateDto?: BudgetNormCodeRequestUpdateDto, options?: RawAxiosRequestConfig) {
        return BudgetNormCodeRequestApiFp(this.configuration).apiBudgetNormCodeRequestPut(budgetNormCodeRequestUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BudgetPeriodApi - axios parameter creator
 */
export const BudgetPeriodApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPeriodGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BudgetPeriod`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPeriodIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBudgetPeriodIdDelete', 'id', id)
            const localVarPath = `/api/BudgetPeriod/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPeriodIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBudgetPeriodIdGet', 'id', id)
            const localVarPath = `/api/BudgetPeriod/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BudgetPeriodInsertDto} [budgetPeriodInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPeriodPost: async (budgetPeriodInsertDto?: BudgetPeriodInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BudgetPeriod`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(budgetPeriodInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BudgetPeriodUpdateDto} [budgetPeriodUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPeriodPut: async (budgetPeriodUpdateDto?: BudgetPeriodUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BudgetPeriod`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(budgetPeriodUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BudgetPeriodApi - functional programming interface
 */
export const BudgetPeriodApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BudgetPeriodApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetPeriodGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BudgetPeriodListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetPeriodGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetPeriodApi.apiBudgetPeriodGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetPeriodIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetPeriodIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetPeriodApi.apiBudgetPeriodIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetPeriodIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetPeriodListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetPeriodIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetPeriodApi.apiBudgetPeriodIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BudgetPeriodInsertDto} [budgetPeriodInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetPeriodPost(budgetPeriodInsertDto?: BudgetPeriodInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetPeriodListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetPeriodPost(budgetPeriodInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetPeriodApi.apiBudgetPeriodPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BudgetPeriodUpdateDto} [budgetPeriodUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetPeriodPut(budgetPeriodUpdateDto?: BudgetPeriodUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetPeriodUpdateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetPeriodPut(budgetPeriodUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetPeriodApi.apiBudgetPeriodPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BudgetPeriodApi - factory interface
 */
export const BudgetPeriodApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BudgetPeriodApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPeriodGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<BudgetPeriodListDto>> {
            return localVarFp.apiBudgetPeriodGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPeriodIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBudgetPeriodIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPeriodIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<BudgetPeriodListDto> {
            return localVarFp.apiBudgetPeriodIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BudgetPeriodInsertDto} [budgetPeriodInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPeriodPost(budgetPeriodInsertDto?: BudgetPeriodInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<BudgetPeriodListDto> {
            return localVarFp.apiBudgetPeriodPost(budgetPeriodInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BudgetPeriodUpdateDto} [budgetPeriodUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPeriodPut(budgetPeriodUpdateDto?: BudgetPeriodUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<BudgetPeriodUpdateDto> {
            return localVarFp.apiBudgetPeriodPut(budgetPeriodUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BudgetPeriodApi - object-oriented interface
 */
export class BudgetPeriodApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetPeriodGet(options?: RawAxiosRequestConfig) {
        return BudgetPeriodApiFp(this.configuration).apiBudgetPeriodGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetPeriodIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return BudgetPeriodApiFp(this.configuration).apiBudgetPeriodIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetPeriodIdGet(id: string, options?: RawAxiosRequestConfig) {
        return BudgetPeriodApiFp(this.configuration).apiBudgetPeriodIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BudgetPeriodInsertDto} [budgetPeriodInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetPeriodPost(budgetPeriodInsertDto?: BudgetPeriodInsertDto, options?: RawAxiosRequestConfig) {
        return BudgetPeriodApiFp(this.configuration).apiBudgetPeriodPost(budgetPeriodInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BudgetPeriodUpdateDto} [budgetPeriodUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetPeriodPut(budgetPeriodUpdateDto?: BudgetPeriodUpdateDto, options?: RawAxiosRequestConfig) {
        return BudgetPeriodApiFp(this.configuration).apiBudgetPeriodPut(budgetPeriodUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BudgetPeriodUserApi - axios parameter creator
 */
export const BudgetPeriodUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPeriodUserGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BudgetPeriodUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userid 
         * @param {RequestType} [screenType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPeriodUserGetActivePeriodUseridGet: async (userid: string, screenType?: RequestType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userid' is not null or undefined
            assertParamExists('apiBudgetPeriodUserGetActivePeriodUseridGet', 'userid', userid)
            const localVarPath = `/api/BudgetPeriodUser/GetActivePeriod/{userid}`
                .replace(`{${"userid"}}`, encodeURIComponent(String(userid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (screenType !== undefined) {
                localVarQueryParameter['ScreenType'] = screenType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPeriodUserIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBudgetPeriodUserIdDelete', 'id', id)
            const localVarPath = `/api/BudgetPeriodUser/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPeriodUserIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBudgetPeriodUserIdGet', 'id', id)
            const localVarPath = `/api/BudgetPeriodUser/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BudgetPeriodUserInsertDto} [budgetPeriodUserInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPeriodUserPost: async (budgetPeriodUserInsertDto?: BudgetPeriodUserInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BudgetPeriodUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(budgetPeriodUserInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BudgetPeriodUserUpdateDto} [budgetPeriodUserUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPeriodUserPut: async (budgetPeriodUserUpdateDto?: BudgetPeriodUserUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BudgetPeriodUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(budgetPeriodUserUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BudgetPeriodUserApi - functional programming interface
 */
export const BudgetPeriodUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BudgetPeriodUserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetPeriodUserGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BudgetPeriodUserListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetPeriodUserGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetPeriodUserApi.apiBudgetPeriodUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userid 
         * @param {RequestType} [screenType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetPeriodUserGetActivePeriodUseridGet(userid: string, screenType?: RequestType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetPeriodUserListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetPeriodUserGetActivePeriodUseridGet(userid, screenType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetPeriodUserApi.apiBudgetPeriodUserGetActivePeriodUseridGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetPeriodUserIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetPeriodUserIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetPeriodUserApi.apiBudgetPeriodUserIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetPeriodUserIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetPeriodUserListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetPeriodUserIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetPeriodUserApi.apiBudgetPeriodUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BudgetPeriodUserInsertDto} [budgetPeriodUserInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetPeriodUserPost(budgetPeriodUserInsertDto?: BudgetPeriodUserInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetPeriodUserListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetPeriodUserPost(budgetPeriodUserInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetPeriodUserApi.apiBudgetPeriodUserPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BudgetPeriodUserUpdateDto} [budgetPeriodUserUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetPeriodUserPut(budgetPeriodUserUpdateDto?: BudgetPeriodUserUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetPeriodUserUpdateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetPeriodUserPut(budgetPeriodUserUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetPeriodUserApi.apiBudgetPeriodUserPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BudgetPeriodUserApi - factory interface
 */
export const BudgetPeriodUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BudgetPeriodUserApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPeriodUserGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<BudgetPeriodUserListDto>> {
            return localVarFp.apiBudgetPeriodUserGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userid 
         * @param {RequestType} [screenType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPeriodUserGetActivePeriodUseridGet(userid: string, screenType?: RequestType, options?: RawAxiosRequestConfig): AxiosPromise<BudgetPeriodUserListDto> {
            return localVarFp.apiBudgetPeriodUserGetActivePeriodUseridGet(userid, screenType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPeriodUserIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBudgetPeriodUserIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPeriodUserIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<BudgetPeriodUserListDto> {
            return localVarFp.apiBudgetPeriodUserIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BudgetPeriodUserInsertDto} [budgetPeriodUserInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPeriodUserPost(budgetPeriodUserInsertDto?: BudgetPeriodUserInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<BudgetPeriodUserListDto> {
            return localVarFp.apiBudgetPeriodUserPost(budgetPeriodUserInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BudgetPeriodUserUpdateDto} [budgetPeriodUserUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPeriodUserPut(budgetPeriodUserUpdateDto?: BudgetPeriodUserUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<BudgetPeriodUserUpdateDto> {
            return localVarFp.apiBudgetPeriodUserPut(budgetPeriodUserUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BudgetPeriodUserApi - object-oriented interface
 */
export class BudgetPeriodUserApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetPeriodUserGet(options?: RawAxiosRequestConfig) {
        return BudgetPeriodUserApiFp(this.configuration).apiBudgetPeriodUserGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userid 
     * @param {RequestType} [screenType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetPeriodUserGetActivePeriodUseridGet(userid: string, screenType?: RequestType, options?: RawAxiosRequestConfig) {
        return BudgetPeriodUserApiFp(this.configuration).apiBudgetPeriodUserGetActivePeriodUseridGet(userid, screenType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetPeriodUserIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return BudgetPeriodUserApiFp(this.configuration).apiBudgetPeriodUserIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetPeriodUserIdGet(id: string, options?: RawAxiosRequestConfig) {
        return BudgetPeriodUserApiFp(this.configuration).apiBudgetPeriodUserIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BudgetPeriodUserInsertDto} [budgetPeriodUserInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetPeriodUserPost(budgetPeriodUserInsertDto?: BudgetPeriodUserInsertDto, options?: RawAxiosRequestConfig) {
        return BudgetPeriodUserApiFp(this.configuration).apiBudgetPeriodUserPost(budgetPeriodUserInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BudgetPeriodUserUpdateDto} [budgetPeriodUserUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetPeriodUserPut(budgetPeriodUserUpdateDto?: BudgetPeriodUserUpdateDto, options?: RawAxiosRequestConfig) {
        return BudgetPeriodUserApiFp(this.configuration).apiBudgetPeriodUserPut(budgetPeriodUserUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BudgetPromotionRequestApi - axios parameter creator
 */
export const BudgetPromotionRequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPromotionRequestGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BudgetPromotionRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPromotionRequestIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBudgetPromotionRequestIdDelete', 'id', id)
            const localVarPath = `/api/BudgetPromotionRequest/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPromotionRequestIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBudgetPromotionRequestIdGet', 'id', id)
            const localVarPath = `/api/BudgetPromotionRequest/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BudgetPromotionRequestInsertDto} [budgetPromotionRequestInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPromotionRequestPost: async (budgetPromotionRequestInsertDto?: BudgetPromotionRequestInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BudgetPromotionRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(budgetPromotionRequestInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BudgetPromotionRequestUpdateDto} [budgetPromotionRequestUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPromotionRequestPut: async (budgetPromotionRequestUpdateDto?: BudgetPromotionRequestUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BudgetPromotionRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(budgetPromotionRequestUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BudgetPromotionRequestApi - functional programming interface
 */
export const BudgetPromotionRequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BudgetPromotionRequestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetPromotionRequestGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BudgetPromotionRequestListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetPromotionRequestGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetPromotionRequestApi.apiBudgetPromotionRequestGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetPromotionRequestIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetPromotionRequestIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetPromotionRequestApi.apiBudgetPromotionRequestIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetPromotionRequestIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetPromotionRequestListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetPromotionRequestIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetPromotionRequestApi.apiBudgetPromotionRequestIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BudgetPromotionRequestInsertDto} [budgetPromotionRequestInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetPromotionRequestPost(budgetPromotionRequestInsertDto?: BudgetPromotionRequestInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetPromotionRequestListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetPromotionRequestPost(budgetPromotionRequestInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetPromotionRequestApi.apiBudgetPromotionRequestPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BudgetPromotionRequestUpdateDto} [budgetPromotionRequestUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBudgetPromotionRequestPut(budgetPromotionRequestUpdateDto?: BudgetPromotionRequestUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetPromotionRequestUpdateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBudgetPromotionRequestPut(budgetPromotionRequestUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BudgetPromotionRequestApi.apiBudgetPromotionRequestPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BudgetPromotionRequestApi - factory interface
 */
export const BudgetPromotionRequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BudgetPromotionRequestApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPromotionRequestGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<BudgetPromotionRequestListDto>> {
            return localVarFp.apiBudgetPromotionRequestGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPromotionRequestIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBudgetPromotionRequestIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPromotionRequestIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<BudgetPromotionRequestListDto> {
            return localVarFp.apiBudgetPromotionRequestIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BudgetPromotionRequestInsertDto} [budgetPromotionRequestInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPromotionRequestPost(budgetPromotionRequestInsertDto?: BudgetPromotionRequestInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<BudgetPromotionRequestListDto> {
            return localVarFp.apiBudgetPromotionRequestPost(budgetPromotionRequestInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BudgetPromotionRequestUpdateDto} [budgetPromotionRequestUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBudgetPromotionRequestPut(budgetPromotionRequestUpdateDto?: BudgetPromotionRequestUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<BudgetPromotionRequestUpdateDto> {
            return localVarFp.apiBudgetPromotionRequestPut(budgetPromotionRequestUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BudgetPromotionRequestApi - object-oriented interface
 */
export class BudgetPromotionRequestApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetPromotionRequestGet(options?: RawAxiosRequestConfig) {
        return BudgetPromotionRequestApiFp(this.configuration).apiBudgetPromotionRequestGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetPromotionRequestIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return BudgetPromotionRequestApiFp(this.configuration).apiBudgetPromotionRequestIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetPromotionRequestIdGet(id: string, options?: RawAxiosRequestConfig) {
        return BudgetPromotionRequestApiFp(this.configuration).apiBudgetPromotionRequestIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BudgetPromotionRequestInsertDto} [budgetPromotionRequestInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetPromotionRequestPost(budgetPromotionRequestInsertDto?: BudgetPromotionRequestInsertDto, options?: RawAxiosRequestConfig) {
        return BudgetPromotionRequestApiFp(this.configuration).apiBudgetPromotionRequestPost(budgetPromotionRequestInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BudgetPromotionRequestUpdateDto} [budgetPromotionRequestUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBudgetPromotionRequestPut(budgetPromotionRequestUpdateDto?: BudgetPromotionRequestUpdateDto, options?: RawAxiosRequestConfig) {
        return BudgetPromotionRequestApiFp(this.configuration).apiBudgetPromotionRequestPut(budgetPromotionRequestUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CacheApi - axios parameter creator
 */
export const CacheApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCacheDeleteAllCacheGet: async (userName?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Cache/DeleteAllCache`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userName !== undefined) {
                localVarQueryParameter['userName'] = userName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CacheApi - functional programming interface
 */
export const CacheApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CacheApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCacheDeleteAllCacheGet(userName?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCacheDeleteAllCacheGet(userName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CacheApi.apiCacheDeleteAllCacheGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CacheApi - factory interface
 */
export const CacheApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CacheApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCacheDeleteAllCacheGet(userName?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCacheDeleteAllCacheGet(userName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CacheApi - object-oriented interface
 */
export class CacheApi extends BaseAPI {
    /**
     * 
     * @param {string} [userName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCacheDeleteAllCacheGet(userName?: string, options?: RawAxiosRequestConfig) {
        return CacheApiFp(this.configuration).apiCacheDeleteAllCacheGet(userName, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ClientApi - axios parameter creator
 */
export const ClientApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientActiveGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Client/active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Client`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiClientIdDelete', 'id', id)
            const localVarPath = `/api/Client/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiClientIdGet', 'id', id)
            const localVarPath = `/api/Client/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MainClientInsertDto} [mainClientInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientPost: async (mainClientInsertDto?: MainClientInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Client`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mainClientInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MainClientUpdateDto} [mainClientUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientPut: async (mainClientUpdateDto?: MainClientUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Client`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mainClientUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientApi - functional programming interface
 */
export const ClientApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientActiveGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientActiveGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientApi.apiClientActiveGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientApi.apiClientGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientApi.apiClientIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientApi.apiClientIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {MainClientInsertDto} [mainClientInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientPost(mainClientInsertDto?: MainClientInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientPost(mainClientInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientApi.apiClientPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {MainClientUpdateDto} [mainClientUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientPut(mainClientUpdateDto?: MainClientUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientPut(mainClientUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientApi.apiClientPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ClientApi - factory interface
 */
export const ClientApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientActiveGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiClientActiveGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiClientGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiClientIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiClientIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MainClientInsertDto} [mainClientInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientPost(mainClientInsertDto?: MainClientInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiClientPost(mainClientInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MainClientUpdateDto} [mainClientUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientPut(mainClientUpdateDto?: MainClientUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiClientPut(mainClientUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClientApi - object-oriented interface
 */
export class ClientApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiClientActiveGet(options?: RawAxiosRequestConfig) {
        return ClientApiFp(this.configuration).apiClientActiveGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiClientGet(options?: RawAxiosRequestConfig) {
        return ClientApiFp(this.configuration).apiClientGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiClientIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return ClientApiFp(this.configuration).apiClientIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiClientIdGet(id: string, options?: RawAxiosRequestConfig) {
        return ClientApiFp(this.configuration).apiClientIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MainClientInsertDto} [mainClientInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiClientPost(mainClientInsertDto?: MainClientInsertDto, options?: RawAxiosRequestConfig) {
        return ClientApiFp(this.configuration).apiClientPost(mainClientInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MainClientUpdateDto} [mainClientUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiClientPut(mainClientUpdateDto?: MainClientUpdateDto, options?: RawAxiosRequestConfig) {
        return ClientApiFp(this.configuration).apiClientPut(mainClientUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CrmChangeLogsApi - axios parameter creator
 */
export const CrmChangeLogsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmCrmChangeLogsCustomerCustomerIdGet: async (customerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCrmCrmChangeLogsCustomerCustomerIdGet', 'customerId', customerId)
            const localVarPath = `/api/crm/CrmChangeLogs/customer/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} entityName 
         * @param {string} entityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmCrmChangeLogsEntityEntityNameEntityIdGet: async (entityName: string, entityId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityName' is not null or undefined
            assertParamExists('apiCrmCrmChangeLogsEntityEntityNameEntityIdGet', 'entityName', entityName)
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('apiCrmCrmChangeLogsEntityEntityNameEntityIdGet', 'entityId', entityId)
            const localVarPath = `/api/crm/CrmChangeLogs/entity/{entityName}/{entityId}`
                .replace(`{${"entityName"}}`, encodeURIComponent(String(entityName)))
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CrmChangeLogsApi - functional programming interface
 */
export const CrmChangeLogsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CrmChangeLogsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmCrmChangeLogsCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmCrmChangeLogsCustomerCustomerIdGet(customerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CrmChangeLogsApi.apiCrmCrmChangeLogsCustomerCustomerIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} entityName 
         * @param {string} entityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmCrmChangeLogsEntityEntityNameEntityIdGet(entityName: string, entityId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmCrmChangeLogsEntityEntityNameEntityIdGet(entityName, entityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CrmChangeLogsApi.apiCrmCrmChangeLogsEntityEntityNameEntityIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CrmChangeLogsApi - factory interface
 */
export const CrmChangeLogsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CrmChangeLogsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmCrmChangeLogsCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmCrmChangeLogsCustomerCustomerIdGet(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} entityName 
         * @param {string} entityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmCrmChangeLogsEntityEntityNameEntityIdGet(entityName: string, entityId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmCrmChangeLogsEntityEntityNameEntityIdGet(entityName, entityId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CrmChangeLogsApi - object-oriented interface
 */
export class CrmChangeLogsApi extends BaseAPI {
    /**
     * 
     * @param {string} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmCrmChangeLogsCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig) {
        return CrmChangeLogsApiFp(this.configuration).apiCrmCrmChangeLogsCustomerCustomerIdGet(customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} entityName 
     * @param {string} entityId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmCrmChangeLogsEntityEntityNameEntityIdGet(entityName: string, entityId: string, options?: RawAxiosRequestConfig) {
        return CrmChangeLogsApiFp(this.configuration).apiCrmCrmChangeLogsEntityEntityNameEntityIdGet(entityName, entityId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomerAddressesApi - axios parameter creator
 */
export const CustomerAddressesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {string} addressId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdAddressesAddressIdDelete: async (customerId: string, addressId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdAddressesAddressIdDelete', 'customerId', customerId)
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdAddressesAddressIdDelete', 'addressId', addressId)
            const localVarPath = `/api/customers/{customerId}/addresses/{addressId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} addressId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdAddressesAddressIdGet: async (customerId: string, addressId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdAddressesAddressIdGet', 'customerId', customerId)
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdAddressesAddressIdGet', 'addressId', addressId)
            const localVarPath = `/api/customers/{customerId}/addresses/{addressId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} addressId 
         * @param {CustomerAddressUpdateDto} [customerAddressUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdAddressesAddressIdPut: async (customerId: string, addressId: string, customerAddressUpdateDto?: CustomerAddressUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdAddressesAddressIdPut', 'customerId', customerId)
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdAddressesAddressIdPut', 'addressId', addressId)
            const localVarPath = `/api/customers/{customerId}/addresses/{addressId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerAddressUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} addressId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdAddressesAddressIdSetDefaultBillingPut: async (customerId: string, addressId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdAddressesAddressIdSetDefaultBillingPut', 'customerId', customerId)
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdAddressesAddressIdSetDefaultBillingPut', 'addressId', addressId)
            const localVarPath = `/api/customers/{customerId}/addresses/{addressId}/set-default-billing`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} addressId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdAddressesAddressIdSetDefaultShippingPut: async (customerId: string, addressId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdAddressesAddressIdSetDefaultShippingPut', 'customerId', customerId)
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdAddressesAddressIdSetDefaultShippingPut', 'addressId', addressId)
            const localVarPath = `/api/customers/{customerId}/addresses/{addressId}/set-default-shipping`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdAddressesGet: async (customerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdAddressesGet', 'customerId', customerId)
            const localVarPath = `/api/customers/{customerId}/addresses`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId 
         * @param {CustomerAddressInsertDto} [customerAddressInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdAddressesPost: async (customerId: string, customerAddressInsertDto?: CustomerAddressInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdAddressesPost', 'customerId', customerId)
            const localVarPath = `/api/customers/{customerId}/addresses`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerAddressInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerAddressesApi - functional programming interface
 */
export const CustomerAddressesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerAddressesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {string} addressId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersCustomerIdAddressesAddressIdDelete(customerId: string, addressId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersCustomerIdAddressesAddressIdDelete(customerId, addressId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAddressesApi.apiCustomersCustomerIdAddressesAddressIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} addressId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersCustomerIdAddressesAddressIdGet(customerId: string, addressId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersCustomerIdAddressesAddressIdGet(customerId, addressId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAddressesApi.apiCustomersCustomerIdAddressesAddressIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} addressId 
         * @param {CustomerAddressUpdateDto} [customerAddressUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersCustomerIdAddressesAddressIdPut(customerId: string, addressId: string, customerAddressUpdateDto?: CustomerAddressUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersCustomerIdAddressesAddressIdPut(customerId, addressId, customerAddressUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAddressesApi.apiCustomersCustomerIdAddressesAddressIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} addressId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersCustomerIdAddressesAddressIdSetDefaultBillingPut(customerId: string, addressId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersCustomerIdAddressesAddressIdSetDefaultBillingPut(customerId, addressId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAddressesApi.apiCustomersCustomerIdAddressesAddressIdSetDefaultBillingPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} addressId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersCustomerIdAddressesAddressIdSetDefaultShippingPut(customerId: string, addressId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersCustomerIdAddressesAddressIdSetDefaultShippingPut(customerId, addressId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAddressesApi.apiCustomersCustomerIdAddressesAddressIdSetDefaultShippingPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersCustomerIdAddressesGet(customerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersCustomerIdAddressesGet(customerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAddressesApi.apiCustomersCustomerIdAddressesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} customerId 
         * @param {CustomerAddressInsertDto} [customerAddressInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersCustomerIdAddressesPost(customerId: string, customerAddressInsertDto?: CustomerAddressInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersCustomerIdAddressesPost(customerId, customerAddressInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAddressesApi.apiCustomersCustomerIdAddressesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerAddressesApi - factory interface
 */
export const CustomerAddressesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerAddressesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {string} addressId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdAddressesAddressIdDelete(customerId: string, addressId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersCustomerIdAddressesAddressIdDelete(customerId, addressId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} addressId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdAddressesAddressIdGet(customerId: string, addressId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersCustomerIdAddressesAddressIdGet(customerId, addressId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} addressId 
         * @param {CustomerAddressUpdateDto} [customerAddressUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdAddressesAddressIdPut(customerId: string, addressId: string, customerAddressUpdateDto?: CustomerAddressUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersCustomerIdAddressesAddressIdPut(customerId, addressId, customerAddressUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} addressId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdAddressesAddressIdSetDefaultBillingPut(customerId: string, addressId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersCustomerIdAddressesAddressIdSetDefaultBillingPut(customerId, addressId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} addressId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdAddressesAddressIdSetDefaultShippingPut(customerId: string, addressId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersCustomerIdAddressesAddressIdSetDefaultShippingPut(customerId, addressId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdAddressesGet(customerId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersCustomerIdAddressesGet(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerId 
         * @param {CustomerAddressInsertDto} [customerAddressInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdAddressesPost(customerId: string, customerAddressInsertDto?: CustomerAddressInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersCustomerIdAddressesPost(customerId, customerAddressInsertDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerAddressesApi - object-oriented interface
 */
export class CustomerAddressesApi extends BaseAPI {
    /**
     * 
     * @param {string} customerId 
     * @param {string} addressId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersCustomerIdAddressesAddressIdDelete(customerId: string, addressId: string, options?: RawAxiosRequestConfig) {
        return CustomerAddressesApiFp(this.configuration).apiCustomersCustomerIdAddressesAddressIdDelete(customerId, addressId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerId 
     * @param {string} addressId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersCustomerIdAddressesAddressIdGet(customerId: string, addressId: string, options?: RawAxiosRequestConfig) {
        return CustomerAddressesApiFp(this.configuration).apiCustomersCustomerIdAddressesAddressIdGet(customerId, addressId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerId 
     * @param {string} addressId 
     * @param {CustomerAddressUpdateDto} [customerAddressUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersCustomerIdAddressesAddressIdPut(customerId: string, addressId: string, customerAddressUpdateDto?: CustomerAddressUpdateDto, options?: RawAxiosRequestConfig) {
        return CustomerAddressesApiFp(this.configuration).apiCustomersCustomerIdAddressesAddressIdPut(customerId, addressId, customerAddressUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerId 
     * @param {string} addressId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersCustomerIdAddressesAddressIdSetDefaultBillingPut(customerId: string, addressId: string, options?: RawAxiosRequestConfig) {
        return CustomerAddressesApiFp(this.configuration).apiCustomersCustomerIdAddressesAddressIdSetDefaultBillingPut(customerId, addressId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerId 
     * @param {string} addressId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersCustomerIdAddressesAddressIdSetDefaultShippingPut(customerId: string, addressId: string, options?: RawAxiosRequestConfig) {
        return CustomerAddressesApiFp(this.configuration).apiCustomersCustomerIdAddressesAddressIdSetDefaultShippingPut(customerId, addressId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersCustomerIdAddressesGet(customerId: string, options?: RawAxiosRequestConfig) {
        return CustomerAddressesApiFp(this.configuration).apiCustomersCustomerIdAddressesGet(customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerId 
     * @param {CustomerAddressInsertDto} [customerAddressInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersCustomerIdAddressesPost(customerId: string, customerAddressInsertDto?: CustomerAddressInsertDto, options?: RawAxiosRequestConfig) {
        return CustomerAddressesApiFp(this.configuration).apiCustomersCustomerIdAddressesPost(customerId, customerAddressInsertDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomerDocumentsApi - axios parameter creator
 */
export const CustomerDocumentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerDocumentsCategoriesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CustomerDocuments/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerDocumentsCategoryCategoryGet: async (category: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('apiCustomerDocumentsCategoryCategoryGet', 'category', category)
            const localVarPath = `/api/CustomerDocuments/category/{category}`
                .replace(`{${"category"}}`, encodeURIComponent(String(category)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerDocumentsCustomerCustomerIdCategoryCategoryGet: async (customerId: string, category: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCustomerDocumentsCustomerCustomerIdCategoryCategoryGet', 'customerId', customerId)
            // verify required parameter 'category' is not null or undefined
            assertParamExists('apiCustomerDocumentsCustomerCustomerIdCategoryCategoryGet', 'category', category)
            const localVarPath = `/api/CustomerDocuments/customer/{customerId}/category/{category}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"category"}}`, encodeURIComponent(String(category)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerDocumentsCustomerCustomerIdGet: async (customerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCustomerDocumentsCustomerCustomerIdGet', 'customerId', customerId)
            const localVarPath = `/api/CustomerDocuments/customer/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerDocumentsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CustomerDocuments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerDocumentsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCustomerDocumentsIdDelete', 'id', id)
            const localVarPath = `/api/CustomerDocuments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerDocumentsIdDownloadGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCustomerDocumentsIdDownloadGet', 'id', id)
            const localVarPath = `/api/CustomerDocuments/{id}/download`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [expiryInSeconds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerDocumentsIdDownloadUrlGet: async (id: string, expiryInSeconds?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCustomerDocumentsIdDownloadUrlGet', 'id', id)
            const localVarPath = `/api/CustomerDocuments/{id}/download-url`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (expiryInSeconds !== undefined) {
                localVarQueryParameter['expiryInSeconds'] = expiryInSeconds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerDocumentsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCustomerDocumentsIdGet', 'id', id)
            const localVarPath = `/api/CustomerDocuments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerDocumentUpdateDto} [customerDocumentUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerDocumentsPut: async (customerDocumentUpdateDto?: CustomerDocumentUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CustomerDocuments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerDocumentUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [contentType] 
         * @param {string} [contentDisposition] 
         * @param {{ [key: string]: Array<string>; }} [headers] 
         * @param {number} [length] 
         * @param {string} [name] 
         * @param {string} [fileName] 
         * @param {string} [customerId] 
         * @param {string} [description] 
         * @param {string} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerDocumentsUploadPost: async (contentType?: string, contentDisposition?: string, headers?: { [key: string]: Array<string>; }, length?: number, name?: string, fileName?: string, customerId?: string, description?: string, category?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CustomerDocuments/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (contentType !== undefined) { 
                localVarFormParams.append('ContentType', contentType as any);
            }
    
            if (contentDisposition !== undefined) { 
                localVarFormParams.append('ContentDisposition', contentDisposition as any);
            }
    
            if (headers !== undefined) { 
                localVarFormParams.append('Headers', new Blob([JSON.stringify(headers)], { type: "application/json", }));
            }
    
            if (length !== undefined) { 
                localVarFormParams.append('Length', length as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('Name', name as any);
            }
    
            if (fileName !== undefined) { 
                localVarFormParams.append('FileName', fileName as any);
            }
    
            if (customerId !== undefined) { 
                localVarFormParams.append('CustomerId', customerId as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('Description', description as any);
            }
    
            if (category !== undefined) { 
                localVarFormParams.append('Category', category as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerDocumentsApi - functional programming interface
 */
export const CustomerDocumentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerDocumentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomerDocumentsCategoriesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomerDocumentsCategoriesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerDocumentsApi.apiCustomerDocumentsCategoriesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomerDocumentsCategoryCategoryGet(category: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomerDocumentsCategoryCategoryGet(category, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerDocumentsApi.apiCustomerDocumentsCategoryCategoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomerDocumentsCustomerCustomerIdCategoryCategoryGet(customerId: string, category: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomerDocumentsCustomerCustomerIdCategoryCategoryGet(customerId, category, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerDocumentsApi.apiCustomerDocumentsCustomerCustomerIdCategoryCategoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomerDocumentsCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomerDocumentsCustomerCustomerIdGet(customerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerDocumentsApi.apiCustomerDocumentsCustomerCustomerIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomerDocumentsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomerDocumentsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerDocumentsApi.apiCustomerDocumentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomerDocumentsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomerDocumentsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerDocumentsApi.apiCustomerDocumentsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomerDocumentsIdDownloadGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomerDocumentsIdDownloadGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerDocumentsApi.apiCustomerDocumentsIdDownloadGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [expiryInSeconds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomerDocumentsIdDownloadUrlGet(id: string, expiryInSeconds?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomerDocumentsIdDownloadUrlGet(id, expiryInSeconds, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerDocumentsApi.apiCustomerDocumentsIdDownloadUrlGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomerDocumentsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomerDocumentsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerDocumentsApi.apiCustomerDocumentsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerDocumentUpdateDto} [customerDocumentUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomerDocumentsPut(customerDocumentUpdateDto?: CustomerDocumentUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomerDocumentsPut(customerDocumentUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerDocumentsApi.apiCustomerDocumentsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [contentType] 
         * @param {string} [contentDisposition] 
         * @param {{ [key: string]: Array<string>; }} [headers] 
         * @param {number} [length] 
         * @param {string} [name] 
         * @param {string} [fileName] 
         * @param {string} [customerId] 
         * @param {string} [description] 
         * @param {string} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomerDocumentsUploadPost(contentType?: string, contentDisposition?: string, headers?: { [key: string]: Array<string>; }, length?: number, name?: string, fileName?: string, customerId?: string, description?: string, category?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomerDocumentsUploadPost(contentType, contentDisposition, headers, length, name, fileName, customerId, description, category, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerDocumentsApi.apiCustomerDocumentsUploadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerDocumentsApi - factory interface
 */
export const CustomerDocumentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerDocumentsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerDocumentsCategoriesGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomerDocumentsCategoriesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerDocumentsCategoryCategoryGet(category: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomerDocumentsCategoryCategoryGet(category, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerDocumentsCustomerCustomerIdCategoryCategoryGet(customerId: string, category: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomerDocumentsCustomerCustomerIdCategoryCategoryGet(customerId, category, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerDocumentsCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomerDocumentsCustomerCustomerIdGet(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerDocumentsGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomerDocumentsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerDocumentsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomerDocumentsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerDocumentsIdDownloadGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomerDocumentsIdDownloadGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [expiryInSeconds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerDocumentsIdDownloadUrlGet(id: string, expiryInSeconds?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomerDocumentsIdDownloadUrlGet(id, expiryInSeconds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerDocumentsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomerDocumentsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerDocumentUpdateDto} [customerDocumentUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerDocumentsPut(customerDocumentUpdateDto?: CustomerDocumentUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomerDocumentsPut(customerDocumentUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [contentType] 
         * @param {string} [contentDisposition] 
         * @param {{ [key: string]: Array<string>; }} [headers] 
         * @param {number} [length] 
         * @param {string} [name] 
         * @param {string} [fileName] 
         * @param {string} [customerId] 
         * @param {string} [description] 
         * @param {string} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerDocumentsUploadPost(contentType?: string, contentDisposition?: string, headers?: { [key: string]: Array<string>; }, length?: number, name?: string, fileName?: string, customerId?: string, description?: string, category?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomerDocumentsUploadPost(contentType, contentDisposition, headers, length, name, fileName, customerId, description, category, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerDocumentsApi - object-oriented interface
 */
export class CustomerDocumentsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomerDocumentsCategoriesGet(options?: RawAxiosRequestConfig) {
        return CustomerDocumentsApiFp(this.configuration).apiCustomerDocumentsCategoriesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} category 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomerDocumentsCategoryCategoryGet(category: string, options?: RawAxiosRequestConfig) {
        return CustomerDocumentsApiFp(this.configuration).apiCustomerDocumentsCategoryCategoryGet(category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerId 
     * @param {string} category 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomerDocumentsCustomerCustomerIdCategoryCategoryGet(customerId: string, category: string, options?: RawAxiosRequestConfig) {
        return CustomerDocumentsApiFp(this.configuration).apiCustomerDocumentsCustomerCustomerIdCategoryCategoryGet(customerId, category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomerDocumentsCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig) {
        return CustomerDocumentsApiFp(this.configuration).apiCustomerDocumentsCustomerCustomerIdGet(customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomerDocumentsGet(options?: RawAxiosRequestConfig) {
        return CustomerDocumentsApiFp(this.configuration).apiCustomerDocumentsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomerDocumentsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return CustomerDocumentsApiFp(this.configuration).apiCustomerDocumentsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomerDocumentsIdDownloadGet(id: string, options?: RawAxiosRequestConfig) {
        return CustomerDocumentsApiFp(this.configuration).apiCustomerDocumentsIdDownloadGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {number} [expiryInSeconds] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomerDocumentsIdDownloadUrlGet(id: string, expiryInSeconds?: number, options?: RawAxiosRequestConfig) {
        return CustomerDocumentsApiFp(this.configuration).apiCustomerDocumentsIdDownloadUrlGet(id, expiryInSeconds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomerDocumentsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return CustomerDocumentsApiFp(this.configuration).apiCustomerDocumentsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerDocumentUpdateDto} [customerDocumentUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomerDocumentsPut(customerDocumentUpdateDto?: CustomerDocumentUpdateDto, options?: RawAxiosRequestConfig) {
        return CustomerDocumentsApiFp(this.configuration).apiCustomerDocumentsPut(customerDocumentUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [contentType] 
     * @param {string} [contentDisposition] 
     * @param {{ [key: string]: Array<string>; }} [headers] 
     * @param {number} [length] 
     * @param {string} [name] 
     * @param {string} [fileName] 
     * @param {string} [customerId] 
     * @param {string} [description] 
     * @param {string} [category] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomerDocumentsUploadPost(contentType?: string, contentDisposition?: string, headers?: { [key: string]: Array<string>; }, length?: number, name?: string, fileName?: string, customerId?: string, description?: string, category?: string, options?: RawAxiosRequestConfig) {
        return CustomerDocumentsApiFp(this.configuration).apiCustomerDocumentsUploadPost(contentType, contentDisposition, headers, length, name, fileName, customerId, description, category, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomerEmailsApi - axios parameter creator
 */
export const CustomerEmailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {string} emailId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdEmailsEmailIdDelete: async (customerId: string, emailId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdEmailsEmailIdDelete', 'customerId', customerId)
            // verify required parameter 'emailId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdEmailsEmailIdDelete', 'emailId', emailId)
            const localVarPath = `/api/customers/{customerId}/emails/{emailId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"emailId"}}`, encodeURIComponent(String(emailId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} emailId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdEmailsEmailIdGet: async (customerId: string, emailId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdEmailsEmailIdGet', 'customerId', customerId)
            // verify required parameter 'emailId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdEmailsEmailIdGet', 'emailId', emailId)
            const localVarPath = `/api/customers/{customerId}/emails/{emailId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"emailId"}}`, encodeURIComponent(String(emailId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} emailId 
         * @param {CustomerEmailUpdateDto} [customerEmailUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdEmailsEmailIdPut: async (customerId: string, emailId: string, customerEmailUpdateDto?: CustomerEmailUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdEmailsEmailIdPut', 'customerId', customerId)
            // verify required parameter 'emailId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdEmailsEmailIdPut', 'emailId', emailId)
            const localVarPath = `/api/customers/{customerId}/emails/{emailId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"emailId"}}`, encodeURIComponent(String(emailId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerEmailUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} emailId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdEmailsEmailIdSetPrimaryPut: async (customerId: string, emailId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdEmailsEmailIdSetPrimaryPut', 'customerId', customerId)
            // verify required parameter 'emailId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdEmailsEmailIdSetPrimaryPut', 'emailId', emailId)
            const localVarPath = `/api/customers/{customerId}/emails/{emailId}/set-primary`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"emailId"}}`, encodeURIComponent(String(emailId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdEmailsGet: async (customerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdEmailsGet', 'customerId', customerId)
            const localVarPath = `/api/customers/{customerId}/emails`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId 
         * @param {CustomerEmailInsertDto} [customerEmailInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdEmailsPost: async (customerId: string, customerEmailInsertDto?: CustomerEmailInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdEmailsPost', 'customerId', customerId)
            const localVarPath = `/api/customers/{customerId}/emails`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerEmailInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerEmailsApi - functional programming interface
 */
export const CustomerEmailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerEmailsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {string} emailId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersCustomerIdEmailsEmailIdDelete(customerId: string, emailId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersCustomerIdEmailsEmailIdDelete(customerId, emailId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerEmailsApi.apiCustomersCustomerIdEmailsEmailIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} emailId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersCustomerIdEmailsEmailIdGet(customerId: string, emailId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersCustomerIdEmailsEmailIdGet(customerId, emailId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerEmailsApi.apiCustomersCustomerIdEmailsEmailIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} emailId 
         * @param {CustomerEmailUpdateDto} [customerEmailUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersCustomerIdEmailsEmailIdPut(customerId: string, emailId: string, customerEmailUpdateDto?: CustomerEmailUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersCustomerIdEmailsEmailIdPut(customerId, emailId, customerEmailUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerEmailsApi.apiCustomersCustomerIdEmailsEmailIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} emailId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersCustomerIdEmailsEmailIdSetPrimaryPut(customerId: string, emailId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersCustomerIdEmailsEmailIdSetPrimaryPut(customerId, emailId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerEmailsApi.apiCustomersCustomerIdEmailsEmailIdSetPrimaryPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersCustomerIdEmailsGet(customerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersCustomerIdEmailsGet(customerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerEmailsApi.apiCustomersCustomerIdEmailsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} customerId 
         * @param {CustomerEmailInsertDto} [customerEmailInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersCustomerIdEmailsPost(customerId: string, customerEmailInsertDto?: CustomerEmailInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersCustomerIdEmailsPost(customerId, customerEmailInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerEmailsApi.apiCustomersCustomerIdEmailsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerEmailsApi - factory interface
 */
export const CustomerEmailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerEmailsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {string} emailId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdEmailsEmailIdDelete(customerId: string, emailId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersCustomerIdEmailsEmailIdDelete(customerId, emailId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} emailId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdEmailsEmailIdGet(customerId: string, emailId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersCustomerIdEmailsEmailIdGet(customerId, emailId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} emailId 
         * @param {CustomerEmailUpdateDto} [customerEmailUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdEmailsEmailIdPut(customerId: string, emailId: string, customerEmailUpdateDto?: CustomerEmailUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersCustomerIdEmailsEmailIdPut(customerId, emailId, customerEmailUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} emailId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdEmailsEmailIdSetPrimaryPut(customerId: string, emailId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersCustomerIdEmailsEmailIdSetPrimaryPut(customerId, emailId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdEmailsGet(customerId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersCustomerIdEmailsGet(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerId 
         * @param {CustomerEmailInsertDto} [customerEmailInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdEmailsPost(customerId: string, customerEmailInsertDto?: CustomerEmailInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersCustomerIdEmailsPost(customerId, customerEmailInsertDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerEmailsApi - object-oriented interface
 */
export class CustomerEmailsApi extends BaseAPI {
    /**
     * 
     * @param {string} customerId 
     * @param {string} emailId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersCustomerIdEmailsEmailIdDelete(customerId: string, emailId: string, options?: RawAxiosRequestConfig) {
        return CustomerEmailsApiFp(this.configuration).apiCustomersCustomerIdEmailsEmailIdDelete(customerId, emailId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerId 
     * @param {string} emailId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersCustomerIdEmailsEmailIdGet(customerId: string, emailId: string, options?: RawAxiosRequestConfig) {
        return CustomerEmailsApiFp(this.configuration).apiCustomersCustomerIdEmailsEmailIdGet(customerId, emailId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerId 
     * @param {string} emailId 
     * @param {CustomerEmailUpdateDto} [customerEmailUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersCustomerIdEmailsEmailIdPut(customerId: string, emailId: string, customerEmailUpdateDto?: CustomerEmailUpdateDto, options?: RawAxiosRequestConfig) {
        return CustomerEmailsApiFp(this.configuration).apiCustomersCustomerIdEmailsEmailIdPut(customerId, emailId, customerEmailUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerId 
     * @param {string} emailId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersCustomerIdEmailsEmailIdSetPrimaryPut(customerId: string, emailId: string, options?: RawAxiosRequestConfig) {
        return CustomerEmailsApiFp(this.configuration).apiCustomersCustomerIdEmailsEmailIdSetPrimaryPut(customerId, emailId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersCustomerIdEmailsGet(customerId: string, options?: RawAxiosRequestConfig) {
        return CustomerEmailsApiFp(this.configuration).apiCustomersCustomerIdEmailsGet(customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerId 
     * @param {CustomerEmailInsertDto} [customerEmailInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersCustomerIdEmailsPost(customerId: string, customerEmailInsertDto?: CustomerEmailInsertDto, options?: RawAxiosRequestConfig) {
        return CustomerEmailsApiFp(this.configuration).apiCustomersCustomerIdEmailsPost(customerId, customerEmailInsertDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomerNotesApi - axios parameter creator
 */
export const CustomerNotesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerNotesCustomerCustomerIdGet: async (customerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCustomerNotesCustomerCustomerIdGet', 'customerId', customerId)
            const localVarPath = `/api/CustomerNotes/customer/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerNotesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CustomerNotes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerNotesIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCustomerNotesIdDelete', 'id', id)
            const localVarPath = `/api/CustomerNotes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerNotesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCustomerNotesIdGet', 'id', id)
            const localVarPath = `/api/CustomerNotes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerNoteInsertDto} [customerNoteInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerNotesPost: async (customerNoteInsertDto?: CustomerNoteInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CustomerNotes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerNoteInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerNoteUpdateDto} [customerNoteUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerNotesPut: async (customerNoteUpdateDto?: CustomerNoteUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CustomerNotes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerNoteUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerNotesApi - functional programming interface
 */
export const CustomerNotesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerNotesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomerNotesCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomerNotesCustomerCustomerIdGet(customerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerNotesApi.apiCustomerNotesCustomerCustomerIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomerNotesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomerNotesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerNotesApi.apiCustomerNotesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomerNotesIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomerNotesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerNotesApi.apiCustomerNotesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomerNotesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomerNotesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerNotesApi.apiCustomerNotesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerNoteInsertDto} [customerNoteInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomerNotesPost(customerNoteInsertDto?: CustomerNoteInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomerNotesPost(customerNoteInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerNotesApi.apiCustomerNotesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerNoteUpdateDto} [customerNoteUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomerNotesPut(customerNoteUpdateDto?: CustomerNoteUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomerNotesPut(customerNoteUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerNotesApi.apiCustomerNotesPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerNotesApi - factory interface
 */
export const CustomerNotesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerNotesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerNotesCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomerNotesCustomerCustomerIdGet(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerNotesGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomerNotesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerNotesIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomerNotesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerNotesIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomerNotesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerNoteInsertDto} [customerNoteInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerNotesPost(customerNoteInsertDto?: CustomerNoteInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomerNotesPost(customerNoteInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerNoteUpdateDto} [customerNoteUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomerNotesPut(customerNoteUpdateDto?: CustomerNoteUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomerNotesPut(customerNoteUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerNotesApi - object-oriented interface
 */
export class CustomerNotesApi extends BaseAPI {
    /**
     * 
     * @param {string} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomerNotesCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig) {
        return CustomerNotesApiFp(this.configuration).apiCustomerNotesCustomerCustomerIdGet(customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomerNotesGet(options?: RawAxiosRequestConfig) {
        return CustomerNotesApiFp(this.configuration).apiCustomerNotesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomerNotesIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return CustomerNotesApiFp(this.configuration).apiCustomerNotesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomerNotesIdGet(id: string, options?: RawAxiosRequestConfig) {
        return CustomerNotesApiFp(this.configuration).apiCustomerNotesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerNoteInsertDto} [customerNoteInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomerNotesPost(customerNoteInsertDto?: CustomerNoteInsertDto, options?: RawAxiosRequestConfig) {
        return CustomerNotesApiFp(this.configuration).apiCustomerNotesPost(customerNoteInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerNoteUpdateDto} [customerNoteUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomerNotesPut(customerNoteUpdateDto?: CustomerNoteUpdateDto, options?: RawAxiosRequestConfig) {
        return CustomerNotesApiFp(this.configuration).apiCustomerNotesPut(customerNoteUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomerPhonesApi - axios parameter creator
 */
export const CustomerPhonesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdPhonesGet: async (customerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdPhonesGet', 'customerId', customerId)
            const localVarPath = `/api/customers/{customerId}/phones`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} phoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdPhonesPhoneIdDelete: async (customerId: string, phoneId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdPhonesPhoneIdDelete', 'customerId', customerId)
            // verify required parameter 'phoneId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdPhonesPhoneIdDelete', 'phoneId', phoneId)
            const localVarPath = `/api/customers/{customerId}/phones/{phoneId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"phoneId"}}`, encodeURIComponent(String(phoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} phoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdPhonesPhoneIdGet: async (customerId: string, phoneId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdPhonesPhoneIdGet', 'customerId', customerId)
            // verify required parameter 'phoneId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdPhonesPhoneIdGet', 'phoneId', phoneId)
            const localVarPath = `/api/customers/{customerId}/phones/{phoneId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"phoneId"}}`, encodeURIComponent(String(phoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} phoneId 
         * @param {CustomerPhoneUpdateDto} [customerPhoneUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdPhonesPhoneIdPut: async (customerId: string, phoneId: string, customerPhoneUpdateDto?: CustomerPhoneUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdPhonesPhoneIdPut', 'customerId', customerId)
            // verify required parameter 'phoneId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdPhonesPhoneIdPut', 'phoneId', phoneId)
            const localVarPath = `/api/customers/{customerId}/phones/{phoneId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"phoneId"}}`, encodeURIComponent(String(phoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerPhoneUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} phoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdPhonesPhoneIdSetPrimaryPut: async (customerId: string, phoneId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdPhonesPhoneIdSetPrimaryPut', 'customerId', customerId)
            // verify required parameter 'phoneId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdPhonesPhoneIdSetPrimaryPut', 'phoneId', phoneId)
            const localVarPath = `/api/customers/{customerId}/phones/{phoneId}/set-primary`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"phoneId"}}`, encodeURIComponent(String(phoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId 
         * @param {CustomerPhoneInsertDto} [customerPhoneInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdPhonesPost: async (customerId: string, customerPhoneInsertDto?: CustomerPhoneInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCustomersCustomerIdPhonesPost', 'customerId', customerId)
            const localVarPath = `/api/customers/{customerId}/phones`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerPhoneInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerPhonesApi - functional programming interface
 */
export const CustomerPhonesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerPhonesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersCustomerIdPhonesGet(customerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersCustomerIdPhonesGet(customerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerPhonesApi.apiCustomersCustomerIdPhonesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} phoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersCustomerIdPhonesPhoneIdDelete(customerId: string, phoneId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersCustomerIdPhonesPhoneIdDelete(customerId, phoneId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerPhonesApi.apiCustomersCustomerIdPhonesPhoneIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} phoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersCustomerIdPhonesPhoneIdGet(customerId: string, phoneId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersCustomerIdPhonesPhoneIdGet(customerId, phoneId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerPhonesApi.apiCustomersCustomerIdPhonesPhoneIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} phoneId 
         * @param {CustomerPhoneUpdateDto} [customerPhoneUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersCustomerIdPhonesPhoneIdPut(customerId: string, phoneId: string, customerPhoneUpdateDto?: CustomerPhoneUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersCustomerIdPhonesPhoneIdPut(customerId, phoneId, customerPhoneUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerPhonesApi.apiCustomersCustomerIdPhonesPhoneIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} phoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersCustomerIdPhonesPhoneIdSetPrimaryPut(customerId: string, phoneId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersCustomerIdPhonesPhoneIdSetPrimaryPut(customerId, phoneId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerPhonesApi.apiCustomersCustomerIdPhonesPhoneIdSetPrimaryPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} customerId 
         * @param {CustomerPhoneInsertDto} [customerPhoneInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersCustomerIdPhonesPost(customerId: string, customerPhoneInsertDto?: CustomerPhoneInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersCustomerIdPhonesPost(customerId, customerPhoneInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerPhonesApi.apiCustomersCustomerIdPhonesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerPhonesApi - factory interface
 */
export const CustomerPhonesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerPhonesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdPhonesGet(customerId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersCustomerIdPhonesGet(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} phoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdPhonesPhoneIdDelete(customerId: string, phoneId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersCustomerIdPhonesPhoneIdDelete(customerId, phoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} phoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdPhonesPhoneIdGet(customerId: string, phoneId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersCustomerIdPhonesPhoneIdGet(customerId, phoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} phoneId 
         * @param {CustomerPhoneUpdateDto} [customerPhoneUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdPhonesPhoneIdPut(customerId: string, phoneId: string, customerPhoneUpdateDto?: CustomerPhoneUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersCustomerIdPhonesPhoneIdPut(customerId, phoneId, customerPhoneUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerId 
         * @param {string} phoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdPhonesPhoneIdSetPrimaryPut(customerId: string, phoneId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersCustomerIdPhonesPhoneIdSetPrimaryPut(customerId, phoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerId 
         * @param {CustomerPhoneInsertDto} [customerPhoneInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCustomerIdPhonesPost(customerId: string, customerPhoneInsertDto?: CustomerPhoneInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersCustomerIdPhonesPost(customerId, customerPhoneInsertDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerPhonesApi - object-oriented interface
 */
export class CustomerPhonesApi extends BaseAPI {
    /**
     * 
     * @param {string} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersCustomerIdPhonesGet(customerId: string, options?: RawAxiosRequestConfig) {
        return CustomerPhonesApiFp(this.configuration).apiCustomersCustomerIdPhonesGet(customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerId 
     * @param {string} phoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersCustomerIdPhonesPhoneIdDelete(customerId: string, phoneId: string, options?: RawAxiosRequestConfig) {
        return CustomerPhonesApiFp(this.configuration).apiCustomersCustomerIdPhonesPhoneIdDelete(customerId, phoneId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerId 
     * @param {string} phoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersCustomerIdPhonesPhoneIdGet(customerId: string, phoneId: string, options?: RawAxiosRequestConfig) {
        return CustomerPhonesApiFp(this.configuration).apiCustomersCustomerIdPhonesPhoneIdGet(customerId, phoneId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerId 
     * @param {string} phoneId 
     * @param {CustomerPhoneUpdateDto} [customerPhoneUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersCustomerIdPhonesPhoneIdPut(customerId: string, phoneId: string, customerPhoneUpdateDto?: CustomerPhoneUpdateDto, options?: RawAxiosRequestConfig) {
        return CustomerPhonesApiFp(this.configuration).apiCustomersCustomerIdPhonesPhoneIdPut(customerId, phoneId, customerPhoneUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerId 
     * @param {string} phoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersCustomerIdPhonesPhoneIdSetPrimaryPut(customerId: string, phoneId: string, options?: RawAxiosRequestConfig) {
        return CustomerPhonesApiFp(this.configuration).apiCustomersCustomerIdPhonesPhoneIdSetPrimaryPut(customerId, phoneId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerId 
     * @param {CustomerPhoneInsertDto} [customerPhoneInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersCustomerIdPhonesPost(customerId: string, customerPhoneInsertDto?: CustomerPhoneInsertDto, options?: RawAxiosRequestConfig) {
        return CustomerPhonesApiFp(this.configuration).apiCustomersCustomerIdPhonesPost(customerId, customerPhoneInsertDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomersApi - axios parameter creator
 */
export const CustomersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersBasicGet: async (skip?: number, take?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Customers/basic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCountGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Customers/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCustomersIdDelete', 'id', id)
            const localVarPath = `/api/Customers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCustomersIdGet', 'id', id)
            const localVarPath = `/api/Customers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeDetails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersPagedGet: async (page?: number, pageSize?: number, includeDetails?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Customers/paged`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (includeDetails !== undefined) {
                localVarQueryParameter['includeDetails'] = includeDetails;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerInsertDto} [customerInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersPost: async (customerInsertDto?: CustomerInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerUpdateDto} [customerUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersPut: async (customerUpdateDto?: CustomerUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersApi - functional programming interface
 */
export const CustomersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersBasicGet(skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersBasicGet(skip, take, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomersApi.apiCustomersBasicGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersCountGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersCountGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomersApi.apiCustomersCountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomersApi.apiCustomersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomersApi.apiCustomersIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomersApi.apiCustomersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeDetails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersPagedGet(page?: number, pageSize?: number, includeDetails?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersPagedGet(page, pageSize, includeDetails, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomersApi.apiCustomersPagedGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerInsertDto} [customerInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersPost(customerInsertDto?: CustomerInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersPost(customerInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomersApi.apiCustomersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerUpdateDto} [customerUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersPut(customerUpdateDto?: CustomerUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersPut(customerUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomersApi.apiCustomersPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomersApi - factory interface
 */
export const CustomersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersBasicGet(skip?: number, take?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersBasicGet(skip, take, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersCountGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeDetails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersPagedGet(page?: number, pageSize?: number, includeDetails?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersPagedGet(page, pageSize, includeDetails, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerInsertDto} [customerInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersPost(customerInsertDto?: CustomerInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersPost(customerInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerUpdateDto} [customerUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersPut(customerUpdateDto?: CustomerUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCustomersPut(customerUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersApi - object-oriented interface
 */
export class CustomersApi extends BaseAPI {
    /**
     * 
     * @param {number} [skip] 
     * @param {number} [take] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersBasicGet(skip?: number, take?: number, options?: RawAxiosRequestConfig) {
        return CustomersApiFp(this.configuration).apiCustomersBasicGet(skip, take, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersCountGet(options?: RawAxiosRequestConfig) {
        return CustomersApiFp(this.configuration).apiCustomersCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersGet(options?: RawAxiosRequestConfig) {
        return CustomersApiFp(this.configuration).apiCustomersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return CustomersApiFp(this.configuration).apiCustomersIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersIdGet(id: string, options?: RawAxiosRequestConfig) {
        return CustomersApiFp(this.configuration).apiCustomersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {boolean} [includeDetails] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersPagedGet(page?: number, pageSize?: number, includeDetails?: boolean, options?: RawAxiosRequestConfig) {
        return CustomersApiFp(this.configuration).apiCustomersPagedGet(page, pageSize, includeDetails, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerInsertDto} [customerInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersPost(customerInsertDto?: CustomerInsertDto, options?: RawAxiosRequestConfig) {
        return CustomersApiFp(this.configuration).apiCustomersPost(customerInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerUpdateDto} [customerUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCustomersPut(customerUpdateDto?: CustomerUpdateDto, options?: RawAxiosRequestConfig) {
        return CustomersApiFp(this.configuration).apiCustomersPut(customerUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DashboardsApi - axios parameter creator
 */
export const DashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsCustomerAssignTeamInfoGet: async (userId?: string, startDate?: string, endDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Dashboards/CustomerAssignTeamInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsGetCustomerOpenCloseeGet: async (userId?: string, startDate?: string, endDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Dashboards/GetCustomerOpenClosee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsGetTicketAsyncGet: async (userId?: string, startDate?: string, endDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Dashboards/GetTicketAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsGetTicketStatusAsyncGet: async (userId?: string, startDate?: string, endDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Dashboards/GetTicketStatusAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsGetTicketSubjectCountAsyncGet: async (userId?: string, startDate?: string, endDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Dashboards/GetTicketSubjectCountAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsGetUserCompanyAllTicketCountGet: async (userId?: string, startDate?: string, endDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Dashboards/GetUserCompanyAllTicketCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsGetUserCompanyOpenTicketCountGet: async (userId?: string, startDate?: string, endDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Dashboards/GetUserCompanyOpenTicketCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsGetUserCompanyTicketCountGet: async (userId?: string, startDate?: string, endDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Dashboards/GetUserCompanyTicketCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsGetUserCompanyTicketInfoCountGet: async (userId?: string, startDate?: string, endDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Dashboards/GetUserCompanyTicketInfoCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsUserOpenFormCountGet: async (userId?: string, startDate?: string, endDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Dashboards/UserOpenFormCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardsApi - functional programming interface
 */
export const DashboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DashboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDashboardsCustomerAssignTeamInfoGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetTicketCustomerAssignGroupGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDashboardsCustomerAssignTeamInfoGet(userId, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardsApi.apiDashboardsCustomerAssignTeamInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDashboardsGetCustomerOpenCloseeGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetTicketCustomerOpenCloseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDashboardsGetCustomerOpenCloseeGet(userId, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardsApi.apiDashboardsGetCustomerOpenCloseeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDashboardsGetTicketAsyncGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSumTicketDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDashboardsGetTicketAsyncGet(userId, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardsApi.apiDashboardsGetTicketAsyncGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDashboardsGetTicketStatusAsyncGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTicketStatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDashboardsGetTicketStatusAsyncGet(userId, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardsApi.apiDashboardsGetTicketStatusAsyncGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDashboardsGetTicketSubjectCountAsyncGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetTicketSubjectInfoDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDashboardsGetTicketSubjectCountAsyncGet(userId, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardsApi.apiDashboardsGetTicketSubjectCountAsyncGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDashboardsGetUserCompanyAllTicketCountGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCompanyTicketDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDashboardsGetUserCompanyAllTicketCountGet(userId, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardsApi.apiDashboardsGetUserCompanyAllTicketCountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDashboardsGetUserCompanyOpenTicketCountGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCompanyTicketDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDashboardsGetUserCompanyOpenTicketCountGet(userId, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardsApi.apiDashboardsGetUserCompanyOpenTicketCountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDashboardsGetUserCompanyTicketCountGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSumTicketDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDashboardsGetUserCompanyTicketCountGet(userId, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardsApi.apiDashboardsGetUserCompanyTicketCountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDashboardsGetUserCompanyTicketInfoCountGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCompanyTicketInfoDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDashboardsGetUserCompanyTicketInfoCountGet(userId, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardsApi.apiDashboardsGetUserCompanyTicketInfoCountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDashboardsUserOpenFormCountGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDashboardsUserOpenFormCountGet(userId, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardsApi.apiDashboardsUserOpenFormCountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DashboardsApi - factory interface
 */
export const DashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DashboardsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsCustomerAssignTeamInfoGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetTicketCustomerAssignGroupGroup>> {
            return localVarFp.apiDashboardsCustomerAssignTeamInfoGet(userId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsGetCustomerOpenCloseeGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetTicketCustomerOpenCloseDto>> {
            return localVarFp.apiDashboardsGetCustomerOpenCloseeGet(userId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsGetTicketAsyncGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetSumTicketDto> {
            return localVarFp.apiDashboardsGetTicketAsyncGet(userId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsGetTicketStatusAsyncGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetTicketStatusDto> {
            return localVarFp.apiDashboardsGetTicketStatusAsyncGet(userId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsGetTicketSubjectCountAsyncGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetTicketSubjectInfoDto>> {
            return localVarFp.apiDashboardsGetTicketSubjectCountAsyncGet(userId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsGetUserCompanyAllTicketCountGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetCompanyTicketDto>> {
            return localVarFp.apiDashboardsGetUserCompanyAllTicketCountGet(userId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsGetUserCompanyOpenTicketCountGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetCompanyTicketDto>> {
            return localVarFp.apiDashboardsGetUserCompanyOpenTicketCountGet(userId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsGetUserCompanyTicketCountGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetSumTicketDto> {
            return localVarFp.apiDashboardsGetUserCompanyTicketCountGet(userId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsGetUserCompanyTicketInfoCountGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetCompanyTicketInfoDto>> {
            return localVarFp.apiDashboardsGetUserCompanyTicketInfoCountGet(userId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsUserOpenFormCountGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.apiDashboardsUserOpenFormCountGet(userId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DashboardsApi - object-oriented interface
 */
export class DashboardsApi extends BaseAPI {
    /**
     * 
     * @param {string} [userId] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiDashboardsCustomerAssignTeamInfoGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).apiDashboardsCustomerAssignTeamInfoGet(userId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userId] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiDashboardsGetCustomerOpenCloseeGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).apiDashboardsGetCustomerOpenCloseeGet(userId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userId] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiDashboardsGetTicketAsyncGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).apiDashboardsGetTicketAsyncGet(userId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userId] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiDashboardsGetTicketStatusAsyncGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).apiDashboardsGetTicketStatusAsyncGet(userId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userId] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiDashboardsGetTicketSubjectCountAsyncGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).apiDashboardsGetTicketSubjectCountAsyncGet(userId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userId] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiDashboardsGetUserCompanyAllTicketCountGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).apiDashboardsGetUserCompanyAllTicketCountGet(userId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userId] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiDashboardsGetUserCompanyOpenTicketCountGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).apiDashboardsGetUserCompanyOpenTicketCountGet(userId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userId] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiDashboardsGetUserCompanyTicketCountGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).apiDashboardsGetUserCompanyTicketCountGet(userId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userId] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiDashboardsGetUserCompanyTicketInfoCountGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).apiDashboardsGetUserCompanyTicketInfoCountGet(userId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userId] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiDashboardsUserOpenFormCountGet(userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).apiDashboardsUserOpenFormCountGet(userId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DepartmentUsersApi - axios parameter creator
 */
export const DepartmentUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [ticketDepartmentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentUsersGet: async (ticketDepartmentId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/DepartmentUsers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (ticketDepartmentId !== undefined) {
                localVarQueryParameter['ticketDepartmentId'] = ticketDepartmentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DepartmentUserInsertDto} [departmentUserInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentUsersPost: async (departmentUserInsertDto?: DepartmentUserInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/DepartmentUsers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(departmentUserInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} ticketDepartmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentUsersTicketDepartmentIdDelete: async (ticketDepartmentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticketDepartmentId' is not null or undefined
            assertParamExists('apiDepartmentUsersTicketDepartmentIdDelete', 'ticketDepartmentId', ticketDepartmentId)
            const localVarPath = `/api/DepartmentUsers/{ticketDepartmentId}`
                .replace(`{${"ticketDepartmentId"}}`, encodeURIComponent(String(ticketDepartmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DepartmentUsersApi - functional programming interface
 */
export const DepartmentUsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DepartmentUsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [ticketDepartmentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepartmentUsersGet(ticketDepartmentId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentUserListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDepartmentUsersGet(ticketDepartmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DepartmentUsersApi.apiDepartmentUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DepartmentUserInsertDto} [departmentUserInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepartmentUsersPost(departmentUserInsertDto?: DepartmentUserInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDepartmentUsersPost(departmentUserInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DepartmentUsersApi.apiDepartmentUsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} ticketDepartmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepartmentUsersTicketDepartmentIdDelete(ticketDepartmentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDepartmentUsersTicketDepartmentIdDelete(ticketDepartmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DepartmentUsersApi.apiDepartmentUsersTicketDepartmentIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DepartmentUsersApi - factory interface
 */
export const DepartmentUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DepartmentUsersApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [ticketDepartmentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentUsersGet(ticketDepartmentId?: string, options?: RawAxiosRequestConfig): AxiosPromise<DepartmentUserListDto> {
            return localVarFp.apiDepartmentUsersGet(ticketDepartmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DepartmentUserInsertDto} [departmentUserInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentUsersPost(departmentUserInsertDto?: DepartmentUserInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiDepartmentUsersPost(departmentUserInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} ticketDepartmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentUsersTicketDepartmentIdDelete(ticketDepartmentId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiDepartmentUsersTicketDepartmentIdDelete(ticketDepartmentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DepartmentUsersApi - object-oriented interface
 */
export class DepartmentUsersApi extends BaseAPI {
    /**
     * 
     * @param {string} [ticketDepartmentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiDepartmentUsersGet(ticketDepartmentId?: string, options?: RawAxiosRequestConfig) {
        return DepartmentUsersApiFp(this.configuration).apiDepartmentUsersGet(ticketDepartmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DepartmentUserInsertDto} [departmentUserInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiDepartmentUsersPost(departmentUserInsertDto?: DepartmentUserInsertDto, options?: RawAxiosRequestConfig) {
        return DepartmentUsersApiFp(this.configuration).apiDepartmentUsersPost(departmentUserInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} ticketDepartmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiDepartmentUsersTicketDepartmentIdDelete(ticketDepartmentId: string, options?: RawAxiosRequestConfig) {
        return DepartmentUsersApiFp(this.configuration).apiDepartmentUsersTicketDepartmentIdDelete(ticketDepartmentId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DepartmentsApi - axios parameter creator
 */
export const DepartmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentsDelete: async (id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiDepartmentsIdGet', 'id', id)
            const localVarPath = `/api/Departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DepartmentsInsertDto} [departmentsInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentsPost: async (departmentsInsertDto?: DepartmentsInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(departmentsInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DepartmentsUpdateDto} [departmentsUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentsPut: async (departmentsUpdateDto?: DepartmentsUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(departmentsUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DepartmentsApi - functional programming interface
 */
export const DepartmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DepartmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepartmentsDelete(id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDepartmentsDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DepartmentsApi.apiDepartmentsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepartmentsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDepartmentsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DepartmentsApi.apiDepartmentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepartmentsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDepartmentsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DepartmentsApi.apiDepartmentsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DepartmentsInsertDto} [departmentsInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepartmentsPost(departmentsInsertDto?: DepartmentsInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDepartmentsPost(departmentsInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DepartmentsApi.apiDepartmentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DepartmentsUpdateDto} [departmentsUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepartmentsPut(departmentsUpdateDto?: DepartmentsUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDepartmentsPut(departmentsUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DepartmentsApi.apiDepartmentsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DepartmentsApi - factory interface
 */
export const DepartmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DepartmentsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentsDelete(id?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiDepartmentsDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentsGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiDepartmentsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiDepartmentsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DepartmentsInsertDto} [departmentsInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentsPost(departmentsInsertDto?: DepartmentsInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiDepartmentsPost(departmentsInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DepartmentsUpdateDto} [departmentsUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentsPut(departmentsUpdateDto?: DepartmentsUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiDepartmentsPut(departmentsUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DepartmentsApi - object-oriented interface
 */
export class DepartmentsApi extends BaseAPI {
    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiDepartmentsDelete(id?: string, options?: RawAxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).apiDepartmentsDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiDepartmentsGet(options?: RawAxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).apiDepartmentsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiDepartmentsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).apiDepartmentsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DepartmentsInsertDto} [departmentsInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiDepartmentsPost(departmentsInsertDto?: DepartmentsInsertDto, options?: RawAxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).apiDepartmentsPost(departmentsInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DepartmentsUpdateDto} [departmentsUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiDepartmentsPut(departmentsUpdateDto?: DepartmentsUpdateDto, options?: RawAxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).apiDepartmentsPut(departmentsUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ForgotPasswordApi - axios parameter creator
 */
export const ForgotPasswordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [mail] 
         * @param {string} [code] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiForgotPasswordChangePwPost: async (mail?: string, code?: string, password?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ForgotPassword/change-pw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mail !== undefined) {
                localVarQueryParameter['mail'] = mail;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [mail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiForgotPasswordForgotPasswordPost: async (mail?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ForgotPassword/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mail !== undefined) {
                localVarQueryParameter['mail'] = mail;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [mail] 
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiForgotPasswordVerifyResetCodePost: async (mail?: string, code?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ForgotPassword/verify-reset-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mail !== undefined) {
                localVarQueryParameter['mail'] = mail;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ForgotPasswordApi - functional programming interface
 */
export const ForgotPasswordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ForgotPasswordApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [mail] 
         * @param {string} [code] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiForgotPasswordChangePwPost(mail?: string, code?: string, password?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiForgotPasswordChangePwPost(mail, code, password, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ForgotPasswordApi.apiForgotPasswordChangePwPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [mail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiForgotPasswordForgotPasswordPost(mail?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiForgotPasswordForgotPasswordPost(mail, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ForgotPasswordApi.apiForgotPasswordForgotPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [mail] 
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiForgotPasswordVerifyResetCodePost(mail?: string, code?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiForgotPasswordVerifyResetCodePost(mail, code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ForgotPasswordApi.apiForgotPasswordVerifyResetCodePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ForgotPasswordApi - factory interface
 */
export const ForgotPasswordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ForgotPasswordApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [mail] 
         * @param {string} [code] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiForgotPasswordChangePwPost(mail?: string, code?: string, password?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiForgotPasswordChangePwPost(mail, code, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [mail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiForgotPasswordForgotPasswordPost(mail?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiForgotPasswordForgotPasswordPost(mail, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [mail] 
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiForgotPasswordVerifyResetCodePost(mail?: string, code?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiForgotPasswordVerifyResetCodePost(mail, code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ForgotPasswordApi - object-oriented interface
 */
export class ForgotPasswordApi extends BaseAPI {
    /**
     * 
     * @param {string} [mail] 
     * @param {string} [code] 
     * @param {string} [password] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiForgotPasswordChangePwPost(mail?: string, code?: string, password?: string, options?: RawAxiosRequestConfig) {
        return ForgotPasswordApiFp(this.configuration).apiForgotPasswordChangePwPost(mail, code, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [mail] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiForgotPasswordForgotPasswordPost(mail?: string, options?: RawAxiosRequestConfig) {
        return ForgotPasswordApiFp(this.configuration).apiForgotPasswordForgotPasswordPost(mail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [mail] 
     * @param {string} [code] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiForgotPasswordVerifyResetCodePost(mail?: string, code?: string, options?: RawAxiosRequestConfig) {
        return ForgotPasswordApiFp(this.configuration).apiForgotPasswordVerifyResetCodePost(mail, code, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FormApi - axios parameter creator
 */
export const FormApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} formId 
         * @param {number} [limit] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormFormIdSubmissionGet: async (formId: string, limit?: number, skip?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'formId' is not null or undefined
            assertParamExists('apiFormFormIdSubmissionGet', 'formId', formId)
            const localVarPath = `/api/Form/{formId}/submission`
                .replace(`{${"formId"}}`, encodeURIComponent(String(formId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [type] 
         * @param {number} [limit] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormGet: async (type?: string, limit?: number, skip?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Form`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [limit] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormIdGet: async (id: string, limit?: number, skip?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFormIdGet', 'id', id)
            const localVarPath = `/api/Form/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FormApi - functional programming interface
 */
export const FormApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FormApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} formId 
         * @param {number} [limit] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormFormIdSubmissionGet(formId: string, limit?: number, skip?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormFormIdSubmissionGet(formId, limit, skip, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormApi.apiFormFormIdSubmissionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [type] 
         * @param {number} [limit] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormGet(type?: string, limit?: number, skip?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormGet(type, limit, skip, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormApi.apiFormGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [limit] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormIdGet(id: string, limit?: number, skip?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormIdGet(id, limit, skip, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormApi.apiFormIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FormApi - factory interface
 */
export const FormApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FormApiFp(configuration)
    return {
        /**
         * 
         * @param {string} formId 
         * @param {number} [limit] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormFormIdSubmissionGet(formId: string, limit?: number, skip?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormFormIdSubmissionGet(formId, limit, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [type] 
         * @param {number} [limit] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormGet(type?: string, limit?: number, skip?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormGet(type, limit, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [limit] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormIdGet(id: string, limit?: number, skip?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormIdGet(id, limit, skip, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FormApi - object-oriented interface
 */
export class FormApi extends BaseAPI {
    /**
     * 
     * @param {string} formId 
     * @param {number} [limit] 
     * @param {number} [skip] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormFormIdSubmissionGet(formId: string, limit?: number, skip?: number, options?: RawAxiosRequestConfig) {
        return FormApiFp(this.configuration).apiFormFormIdSubmissionGet(formId, limit, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [type] 
     * @param {number} [limit] 
     * @param {number} [skip] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormGet(type?: string, limit?: number, skip?: number, options?: RawAxiosRequestConfig) {
        return FormApiFp(this.configuration).apiFormGet(type, limit, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {number} [limit] 
     * @param {number} [skip] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormIdGet(id: string, limit?: number, skip?: number, options?: RawAxiosRequestConfig) {
        return FormApiFp(this.configuration).apiFormIdGet(id, limit, skip, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FormAssignApi - axios parameter creator
 */
export const FormAssignApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [username] 
         * @param {string} [formId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAssignAssignFormByMailPost: async (username?: string, formId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormAssign/AssignFormByMail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (formId !== undefined) {
                localVarQueryParameter['formId'] = formId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAssignCreateFormAssignGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormAssign/CreateFormAssign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAssignFormStatusGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormAssign/FormStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAssignGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormAssign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAssignGetByIdGet: async (id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormAssign/GetById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FormAssignDto} [formAssignDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAssignPost: async (formAssignDto?: FormAssignDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormAssign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(formAssignDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FormAssignDto} [formAssignDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAssignPut: async (formAssignDto?: FormAssignDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormAssign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(formAssignDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAssignUpdateExpiredFormsPut: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormAssign/UpdateExpiredForms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} [statues] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAssignUserFormsGet: async (statues?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormAssign/UserForms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (statues) {
                localVarQueryParameter['statues'] = statues;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FormAssignApi - functional programming interface
 */
export const FormAssignApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FormAssignApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [username] 
         * @param {string} [formId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormAssignAssignFormByMailPost(username?: string, formId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormAssignAssignFormByMailPost(username, formId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormAssignApi.apiFormAssignAssignFormByMailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormAssignCreateFormAssignGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormAssignCreateFormAssignGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormAssignApi.apiFormAssignCreateFormAssignGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormAssignFormStatusGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormAssignFormStatusGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormAssignApi.apiFormAssignFormStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormAssignGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FormAssignDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormAssignGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormAssignApi.apiFormAssignGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormAssignGetByIdGet(id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormAssignDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormAssignGetByIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormAssignApi.apiFormAssignGetByIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FormAssignDto} [formAssignDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormAssignPost(formAssignDto?: FormAssignDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormAssignPost(formAssignDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormAssignApi.apiFormAssignPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FormAssignDto} [formAssignDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormAssignPut(formAssignDto?: FormAssignDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormAssignPut(formAssignDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormAssignApi.apiFormAssignPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormAssignUpdateExpiredFormsPut(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormAssignUpdateExpiredFormsPut(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormAssignApi.apiFormAssignUpdateExpiredFormsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<string>} [statues] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormAssignUserFormsGet(statues?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FormAssignDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormAssignUserFormsGet(statues, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormAssignApi.apiFormAssignUserFormsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FormAssignApi - factory interface
 */
export const FormAssignApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FormAssignApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [username] 
         * @param {string} [formId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAssignAssignFormByMailPost(username?: string, formId?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormAssignAssignFormByMailPost(username, formId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAssignCreateFormAssignGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormAssignCreateFormAssignGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAssignFormStatusGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormAssignFormStatusGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAssignGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<FormAssignDto>> {
            return localVarFp.apiFormAssignGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAssignGetByIdGet(id?: string, options?: RawAxiosRequestConfig): AxiosPromise<FormAssignDto> {
            return localVarFp.apiFormAssignGetByIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormAssignDto} [formAssignDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAssignPost(formAssignDto?: FormAssignDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormAssignPost(formAssignDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormAssignDto} [formAssignDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAssignPut(formAssignDto?: FormAssignDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormAssignPut(formAssignDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAssignUpdateExpiredFormsPut(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormAssignUpdateExpiredFormsPut(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<string>} [statues] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAssignUserFormsGet(statues?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<Array<FormAssignDto>> {
            return localVarFp.apiFormAssignUserFormsGet(statues, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FormAssignApi - object-oriented interface
 */
export class FormAssignApi extends BaseAPI {
    /**
     * 
     * @param {string} [username] 
     * @param {string} [formId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormAssignAssignFormByMailPost(username?: string, formId?: string, options?: RawAxiosRequestConfig) {
        return FormAssignApiFp(this.configuration).apiFormAssignAssignFormByMailPost(username, formId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormAssignCreateFormAssignGet(options?: RawAxiosRequestConfig) {
        return FormAssignApiFp(this.configuration).apiFormAssignCreateFormAssignGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormAssignFormStatusGet(options?: RawAxiosRequestConfig) {
        return FormAssignApiFp(this.configuration).apiFormAssignFormStatusGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormAssignGet(options?: RawAxiosRequestConfig) {
        return FormAssignApiFp(this.configuration).apiFormAssignGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormAssignGetByIdGet(id?: string, options?: RawAxiosRequestConfig) {
        return FormAssignApiFp(this.configuration).apiFormAssignGetByIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormAssignDto} [formAssignDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormAssignPost(formAssignDto?: FormAssignDto, options?: RawAxiosRequestConfig) {
        return FormAssignApiFp(this.configuration).apiFormAssignPost(formAssignDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormAssignDto} [formAssignDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormAssignPut(formAssignDto?: FormAssignDto, options?: RawAxiosRequestConfig) {
        return FormAssignApiFp(this.configuration).apiFormAssignPut(formAssignDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormAssignUpdateExpiredFormsPut(options?: RawAxiosRequestConfig) {
        return FormAssignApiFp(this.configuration).apiFormAssignUpdateExpiredFormsPut(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<string>} [statues] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormAssignUserFormsGet(statues?: Array<string>, options?: RawAxiosRequestConfig) {
        return FormAssignApiFp(this.configuration).apiFormAssignUserFormsGet(statues, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FormAuthApi - axios parameter creator
 */
export const FormAuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAuthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormAuth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAuthIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFormAuthIdDelete', 'id', id)
            const localVarPath = `/api/FormAuth/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAuthIdGet: async (id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormAuth/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FormAuthInsertDto} [formAuthInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAuthPost: async (formAuthInsertDto?: FormAuthInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormAuth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(formAuthInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FormAuthUpdateDto} [formAuthUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAuthPut: async (formAuthUpdateDto?: FormAuthUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormAuth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(formAuthUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FormAuthApi - functional programming interface
 */
export const FormAuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FormAuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormAuthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FormAuthDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormAuthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormAuthApi.apiFormAuthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormAuthIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormAuthIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormAuthApi.apiFormAuthIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormAuthIdGet(id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormAuthDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormAuthIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormAuthApi.apiFormAuthIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FormAuthInsertDto} [formAuthInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormAuthPost(formAuthInsertDto?: FormAuthInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormAuthPost(formAuthInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormAuthApi.apiFormAuthPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FormAuthUpdateDto} [formAuthUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormAuthPut(formAuthUpdateDto?: FormAuthUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormAuthPut(formAuthUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormAuthApi.apiFormAuthPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FormAuthApi - factory interface
 */
export const FormAuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FormAuthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAuthGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<FormAuthDto>> {
            return localVarFp.apiFormAuthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAuthIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormAuthIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAuthIdGet(id?: string, options?: RawAxiosRequestConfig): AxiosPromise<FormAuthDto> {
            return localVarFp.apiFormAuthIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormAuthInsertDto} [formAuthInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAuthPost(formAuthInsertDto?: FormAuthInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormAuthPost(formAuthInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormAuthUpdateDto} [formAuthUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormAuthPut(formAuthUpdateDto?: FormAuthUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormAuthPut(formAuthUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FormAuthApi - object-oriented interface
 */
export class FormAuthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormAuthGet(options?: RawAxiosRequestConfig) {
        return FormAuthApiFp(this.configuration).apiFormAuthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormAuthIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return FormAuthApiFp(this.configuration).apiFormAuthIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormAuthIdGet(id?: string, options?: RawAxiosRequestConfig) {
        return FormAuthApiFp(this.configuration).apiFormAuthIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormAuthInsertDto} [formAuthInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormAuthPost(formAuthInsertDto?: FormAuthInsertDto, options?: RawAxiosRequestConfig) {
        return FormAuthApiFp(this.configuration).apiFormAuthPost(formAuthInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormAuthUpdateDto} [formAuthUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormAuthPut(formAuthUpdateDto?: FormAuthUpdateDto, options?: RawAxiosRequestConfig) {
        return FormAuthApiFp(this.configuration).apiFormAuthPut(formAuthUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FormDataApi - axios parameter creator
 */
export const FormDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {FormRuleEngineDto} [formRuleEngineDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataAddFormRuleEnginePost: async (formRuleEngineDto?: FormRuleEngineDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormData/AddFormRuleEngine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(formRuleEngineDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} guid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataGetFieldByFormGuidGet: async (guid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiFormDataGetFieldByFormGuidGet', 'guid', guid)
            const localVarPath = `/api/FormData/GetFieldByForm/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataGetFormCategoriesEnumGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormData/GetFormCategoriesEnum`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataGetFormListByMenuGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormData/GetFormListByMenu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataGetFormPrioritiesEnumGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormData/GetFormPrioritiesEnum`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataGetFormTypesEnumGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormData/GetFormTypesEnum`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFormDataIdDelete', 'id', id)
            const localVarPath = `/api/FormData/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFormDataIdGet', 'id', id)
            const localVarPath = `/api/FormData/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FormDataInsertDto} [formDataInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataPost: async (formDataInsertDto?: FormDataInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(formDataInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FormDataUpdateDto} [formDataUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataPut: async (formDataUpdateDto?: FormDataUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(formDataUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FormRuleEngineDto} [formRuleEngineDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataUpdateFormRuleEnginePut: async (formRuleEngineDto?: FormRuleEngineDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormData/UpdateFormRuleEngine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(formRuleEngineDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FormDataApi - functional programming interface
 */
export const FormDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FormDataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {FormRuleEngineDto} [formRuleEngineDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormDataAddFormRuleEnginePost(formRuleEngineDto?: FormRuleEngineDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormDataAddFormRuleEnginePost(formRuleEngineDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormDataApi.apiFormDataAddFormRuleEnginePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormDataGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FormDataListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormDataGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormDataApi.apiFormDataGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} guid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormDataGetFieldByFormGuidGet(guid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FieldInfoDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormDataGetFieldByFormGuidGet(guid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormDataApi.apiFormDataGetFieldByFormGuidGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormDataGetFormCategoriesEnumGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormDataGetFormCategoriesEnumGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormDataApi.apiFormDataGetFormCategoriesEnumGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormDataGetFormListByMenuGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FormDataListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormDataGetFormListByMenuGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormDataApi.apiFormDataGetFormListByMenuGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormDataGetFormPrioritiesEnumGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormDataGetFormPrioritiesEnumGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormDataApi.apiFormDataGetFormPrioritiesEnumGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormDataGetFormTypesEnumGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormDataGetFormTypesEnumGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormDataApi.apiFormDataGetFormTypesEnumGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormDataIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormDataIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormDataApi.apiFormDataIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormDataIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormDataListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormDataIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormDataApi.apiFormDataIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FormDataInsertDto} [formDataInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormDataPost(formDataInsertDto?: FormDataInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormDataPost(formDataInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormDataApi.apiFormDataPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FormDataUpdateDto} [formDataUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormDataPut(formDataUpdateDto?: FormDataUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormDataPut(formDataUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormDataApi.apiFormDataPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FormRuleEngineDto} [formRuleEngineDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormDataUpdateFormRuleEnginePut(formRuleEngineDto?: FormRuleEngineDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormDataUpdateFormRuleEnginePut(formRuleEngineDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormDataApi.apiFormDataUpdateFormRuleEnginePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FormDataApi - factory interface
 */
export const FormDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FormDataApiFp(configuration)
    return {
        /**
         * 
         * @param {FormRuleEngineDto} [formRuleEngineDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataAddFormRuleEnginePost(formRuleEngineDto?: FormRuleEngineDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormDataAddFormRuleEnginePost(formRuleEngineDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<FormDataListDto>> {
            return localVarFp.apiFormDataGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} guid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataGetFieldByFormGuidGet(guid: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<FieldInfoDto>> {
            return localVarFp.apiFormDataGetFieldByFormGuidGet(guid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataGetFormCategoriesEnumGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormDataGetFormCategoriesEnumGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataGetFormListByMenuGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<FormDataListDto>> {
            return localVarFp.apiFormDataGetFormListByMenuGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataGetFormPrioritiesEnumGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormDataGetFormPrioritiesEnumGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataGetFormTypesEnumGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormDataGetFormTypesEnumGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormDataIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<FormDataListDto> {
            return localVarFp.apiFormDataIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormDataInsertDto} [formDataInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataPost(formDataInsertDto?: FormDataInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormDataPost(formDataInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormDataUpdateDto} [formDataUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataPut(formDataUpdateDto?: FormDataUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormDataPut(formDataUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormRuleEngineDto} [formRuleEngineDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormDataUpdateFormRuleEnginePut(formRuleEngineDto?: FormRuleEngineDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormDataUpdateFormRuleEnginePut(formRuleEngineDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FormDataApi - object-oriented interface
 */
export class FormDataApi extends BaseAPI {
    /**
     * 
     * @param {FormRuleEngineDto} [formRuleEngineDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormDataAddFormRuleEnginePost(formRuleEngineDto?: FormRuleEngineDto, options?: RawAxiosRequestConfig) {
        return FormDataApiFp(this.configuration).apiFormDataAddFormRuleEnginePost(formRuleEngineDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormDataGet(options?: RawAxiosRequestConfig) {
        return FormDataApiFp(this.configuration).apiFormDataGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} guid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormDataGetFieldByFormGuidGet(guid: string, options?: RawAxiosRequestConfig) {
        return FormDataApiFp(this.configuration).apiFormDataGetFieldByFormGuidGet(guid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormDataGetFormCategoriesEnumGet(options?: RawAxiosRequestConfig) {
        return FormDataApiFp(this.configuration).apiFormDataGetFormCategoriesEnumGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormDataGetFormListByMenuGet(options?: RawAxiosRequestConfig) {
        return FormDataApiFp(this.configuration).apiFormDataGetFormListByMenuGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormDataGetFormPrioritiesEnumGet(options?: RawAxiosRequestConfig) {
        return FormDataApiFp(this.configuration).apiFormDataGetFormPrioritiesEnumGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormDataGetFormTypesEnumGet(options?: RawAxiosRequestConfig) {
        return FormDataApiFp(this.configuration).apiFormDataGetFormTypesEnumGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormDataIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return FormDataApiFp(this.configuration).apiFormDataIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormDataIdGet(id: string, options?: RawAxiosRequestConfig) {
        return FormDataApiFp(this.configuration).apiFormDataIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormDataInsertDto} [formDataInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormDataPost(formDataInsertDto?: FormDataInsertDto, options?: RawAxiosRequestConfig) {
        return FormDataApiFp(this.configuration).apiFormDataPost(formDataInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormDataUpdateDto} [formDataUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormDataPut(formDataUpdateDto?: FormDataUpdateDto, options?: RawAxiosRequestConfig) {
        return FormDataApiFp(this.configuration).apiFormDataPut(formDataUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormRuleEngineDto} [formRuleEngineDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormDataUpdateFormRuleEnginePut(formRuleEngineDto?: FormRuleEngineDto, options?: RawAxiosRequestConfig) {
        return FormDataApiFp(this.configuration).apiFormDataUpdateFormRuleEnginePut(formRuleEngineDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FormRuleEngineApi - axios parameter creator
 */
export const FormRuleEngineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuleEngineGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormRuleEngine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuleEngineGetRuleByNodeIdNodeIdGet: async (nodeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('apiFormRuleEngineGetRuleByNodeIdNodeIdGet', 'nodeId', nodeId)
            const localVarPath = `/api/FormRuleEngine/GetRuleByNodeId/{nodeId}`
                .replace(`{${"nodeId"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuleEngineIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFormRuleEngineIdDelete', 'id', id)
            const localVarPath = `/api/FormRuleEngine/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuleEngineIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFormRuleEngineIdGet', 'id', id)
            const localVarPath = `/api/FormRuleEngine/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FormRuleEngineDto} [formRuleEngineDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuleEnginePost: async (formRuleEngineDto?: FormRuleEngineDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormRuleEngine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(formRuleEngineDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FormRuleEngineDto} [formRuleEngineDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuleEnginePut: async (formRuleEngineDto?: FormRuleEngineDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormRuleEngine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(formRuleEngineDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FormRuleEngineApi - functional programming interface
 */
export const FormRuleEngineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FormRuleEngineApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormRuleEngineGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormRuleEngineGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormRuleEngineApi.apiFormRuleEngineGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormRuleEngineGetRuleByNodeIdNodeIdGet(nodeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormRuleEngineGetRuleByNodeIdNodeIdGet(nodeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormRuleEngineApi.apiFormRuleEngineGetRuleByNodeIdNodeIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormRuleEngineIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormRuleEngineIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormRuleEngineApi.apiFormRuleEngineIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormRuleEngineIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormRuleEngineIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormRuleEngineApi.apiFormRuleEngineIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FormRuleEngineDto} [formRuleEngineDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormRuleEnginePost(formRuleEngineDto?: FormRuleEngineDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormRuleEnginePost(formRuleEngineDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormRuleEngineApi.apiFormRuleEnginePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FormRuleEngineDto} [formRuleEngineDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormRuleEnginePut(formRuleEngineDto?: FormRuleEngineDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormRuleEnginePut(formRuleEngineDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormRuleEngineApi.apiFormRuleEnginePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FormRuleEngineApi - factory interface
 */
export const FormRuleEngineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FormRuleEngineApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuleEngineGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormRuleEngineGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuleEngineGetRuleByNodeIdNodeIdGet(nodeId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormRuleEngineGetRuleByNodeIdNodeIdGet(nodeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuleEngineIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormRuleEngineIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuleEngineIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormRuleEngineIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormRuleEngineDto} [formRuleEngineDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuleEnginePost(formRuleEngineDto?: FormRuleEngineDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormRuleEnginePost(formRuleEngineDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormRuleEngineDto} [formRuleEngineDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuleEnginePut(formRuleEngineDto?: FormRuleEngineDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormRuleEnginePut(formRuleEngineDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FormRuleEngineApi - object-oriented interface
 */
export class FormRuleEngineApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormRuleEngineGet(options?: RawAxiosRequestConfig) {
        return FormRuleEngineApiFp(this.configuration).apiFormRuleEngineGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} nodeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormRuleEngineGetRuleByNodeIdNodeIdGet(nodeId: string, options?: RawAxiosRequestConfig) {
        return FormRuleEngineApiFp(this.configuration).apiFormRuleEngineGetRuleByNodeIdNodeIdGet(nodeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormRuleEngineIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return FormRuleEngineApiFp(this.configuration).apiFormRuleEngineIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormRuleEngineIdGet(id: string, options?: RawAxiosRequestConfig) {
        return FormRuleEngineApiFp(this.configuration).apiFormRuleEngineIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormRuleEngineDto} [formRuleEngineDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormRuleEnginePost(formRuleEngineDto?: FormRuleEngineDto, options?: RawAxiosRequestConfig) {
        return FormRuleEngineApiFp(this.configuration).apiFormRuleEnginePost(formRuleEngineDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormRuleEngineDto} [formRuleEngineDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormRuleEnginePut(formRuleEngineDto?: FormRuleEngineDto, options?: RawAxiosRequestConfig) {
        return FormRuleEngineApiFp(this.configuration).apiFormRuleEnginePut(formRuleEngineDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FormRuntimeApi - axios parameter creator
 */
export const FormRuntimeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuntimeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormRuntime`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} formId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuntimeGetColumnListFormIdGet: async (formId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'formId' is not null or undefined
            assertParamExists('apiFormRuntimeGetColumnListFormIdGet', 'formId', formId)
            const localVarPath = `/api/FormRuntime/GetColumnList/{formId}`
                .replace(`{${"formId"}}`, encodeURIComponent(String(formId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuntimeGetDetailIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFormRuntimeGetDetailIdGet', 'id', id)
            const localVarPath = `/api/FormRuntime/getDetail/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} formId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuntimeGetFormDataByIdFormIdGet: async (formId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'formId' is not null or undefined
            assertParamExists('apiFormRuntimeGetFormDataByIdFormIdGet', 'formId', formId)
            const localVarPath = `/api/FormRuntime/getFormDataById/{formId}`
                .replace(`{${"formId"}}`, encodeURIComponent(String(formId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} formId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuntimeGetListFormIdGet: async (formId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'formId' is not null or undefined
            assertParamExists('apiFormRuntimeGetListFormIdGet', 'formId', formId)
            const localVarPath = `/api/FormRuntime/GetList/{formId}`
                .replace(`{${"formId"}}`, encodeURIComponent(String(formId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuntimeIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFormRuntimeIdDelete', 'id', id)
            const localVarPath = `/api/FormRuntime/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuntimeIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFormRuntimeIdGet', 'id', id)
            const localVarPath = `/api/FormRuntime/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [formAssignId] 
         * @param {FormRuntimeDto} [formRuntimeDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuntimePost: async (formAssignId?: string, formRuntimeDto?: FormRuntimeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormRuntime`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (formAssignId !== undefined) {
                localVarQueryParameter['formAssignId'] = formAssignId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(formRuntimeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FormRuntimeDto} [formRuntimeDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuntimePut: async (formRuntimeDto?: FormRuntimeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FormRuntime`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(formRuntimeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FormRuntimeApi - functional programming interface
 */
export const FormRuntimeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FormRuntimeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormRuntimeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FormRuntimeDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormRuntimeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormRuntimeApi.apiFormRuntimeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} formId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormRuntimeGetColumnListFormIdGet(formId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FormColumnDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormRuntimeGetColumnListFormIdGet(formId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormRuntimeApi.apiFormRuntimeGetColumnListFormIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormRuntimeGetDetailIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormRuntimeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormRuntimeGetDetailIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormRuntimeApi.apiFormRuntimeGetDetailIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} formId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormRuntimeGetFormDataByIdFormIdGet(formId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FormRuntimeDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormRuntimeGetFormDataByIdFormIdGet(formId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormRuntimeApi.apiFormRuntimeGetFormDataByIdFormIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} formId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormRuntimeGetListFormIdGet(formId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormRuntimeGetListFormIdGet(formId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormRuntimeApi.apiFormRuntimeGetListFormIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormRuntimeIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormRuntimeIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormRuntimeApi.apiFormRuntimeIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormRuntimeIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormRuntimeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormRuntimeIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormRuntimeApi.apiFormRuntimeIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [formAssignId] 
         * @param {FormRuntimeDto} [formRuntimeDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormRuntimePost(formAssignId?: string, formRuntimeDto?: FormRuntimeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormRuntimePost(formAssignId, formRuntimeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormRuntimeApi.apiFormRuntimePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FormRuntimeDto} [formRuntimeDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFormRuntimePut(formRuntimeDto?: FormRuntimeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFormRuntimePut(formRuntimeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormRuntimeApi.apiFormRuntimePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FormRuntimeApi - factory interface
 */
export const FormRuntimeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FormRuntimeApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuntimeGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<FormRuntimeDto>> {
            return localVarFp.apiFormRuntimeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} formId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuntimeGetColumnListFormIdGet(formId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<FormColumnDto>> {
            return localVarFp.apiFormRuntimeGetColumnListFormIdGet(formId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuntimeGetDetailIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<FormRuntimeDto> {
            return localVarFp.apiFormRuntimeGetDetailIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} formId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuntimeGetFormDataByIdFormIdGet(formId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<FormRuntimeDto>> {
            return localVarFp.apiFormRuntimeGetFormDataByIdFormIdGet(formId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} formId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuntimeGetListFormIdGet(formId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.apiFormRuntimeGetListFormIdGet(formId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuntimeIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormRuntimeIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuntimeIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<FormRuntimeDto> {
            return localVarFp.apiFormRuntimeIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [formAssignId] 
         * @param {FormRuntimeDto} [formRuntimeDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuntimePost(formAssignId?: string, formRuntimeDto?: FormRuntimeDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormRuntimePost(formAssignId, formRuntimeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormRuntimeDto} [formRuntimeDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFormRuntimePut(formRuntimeDto?: FormRuntimeDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFormRuntimePut(formRuntimeDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FormRuntimeApi - object-oriented interface
 */
export class FormRuntimeApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormRuntimeGet(options?: RawAxiosRequestConfig) {
        return FormRuntimeApiFp(this.configuration).apiFormRuntimeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} formId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormRuntimeGetColumnListFormIdGet(formId: string, options?: RawAxiosRequestConfig) {
        return FormRuntimeApiFp(this.configuration).apiFormRuntimeGetColumnListFormIdGet(formId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormRuntimeGetDetailIdGet(id: string, options?: RawAxiosRequestConfig) {
        return FormRuntimeApiFp(this.configuration).apiFormRuntimeGetDetailIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} formId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormRuntimeGetFormDataByIdFormIdGet(formId: string, options?: RawAxiosRequestConfig) {
        return FormRuntimeApiFp(this.configuration).apiFormRuntimeGetFormDataByIdFormIdGet(formId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} formId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormRuntimeGetListFormIdGet(formId: string, options?: RawAxiosRequestConfig) {
        return FormRuntimeApiFp(this.configuration).apiFormRuntimeGetListFormIdGet(formId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormRuntimeIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return FormRuntimeApiFp(this.configuration).apiFormRuntimeIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormRuntimeIdGet(id: string, options?: RawAxiosRequestConfig) {
        return FormRuntimeApiFp(this.configuration).apiFormRuntimeIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [formAssignId] 
     * @param {FormRuntimeDto} [formRuntimeDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormRuntimePost(formAssignId?: string, formRuntimeDto?: FormRuntimeDto, options?: RawAxiosRequestConfig) {
        return FormRuntimeApiFp(this.configuration).apiFormRuntimePost(formAssignId, formRuntimeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormRuntimeDto} [formRuntimeDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFormRuntimePut(formRuntimeDto?: FormRuntimeDto, options?: RawAxiosRequestConfig) {
        return FormRuntimeApiFp(this.configuration).apiFormRuntimePut(formRuntimeDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GenericListApi - axios parameter creator
 */
export const GenericListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGenericListByBolgeFonksiyonGetBolumProjeByBolgeFonksiyonGet: async (skip?: number, top?: number, name?: string, company?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/GenericList/byBolgeFonksiyon/GetBolumProjeByBolgeFonksiyon`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (company !== undefined) {
                localVarQueryParameter['company'] = company;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGenericListByCompanyGetBolgeFonksiyonByCompanyGet: async (skip?: number, top?: number, name?: string, company?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/GenericList/byCompany/GetBolgeFonksiyonByCompany`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (company !== undefined) {
                localVarQueryParameter['company'] = company;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [grupBaskanlik] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGenericListBygrupBaskanlikGetCompanyByGrupBaskanlikGet: async (skip?: number, top?: number, name?: string, grupBaskanlik?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/GenericList/bygrupBaskanlik/GetCompanyByGrupBaskanlik`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (grupBaskanlik !== undefined) {
                localVarQueryParameter['grupBaskanlik'] = grupBaskanlik;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GenericList} [pc] 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [parentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGenericListGet: async (pc?: GenericList, skip?: number, top?: number, name?: string, parentId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/GenericList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pc !== undefined) {
                localVarQueryParameter['pc'] = pc;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (parentId !== undefined) {
                localVarQueryParameter['parentId'] = parentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GenericList} [pc] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGenericListGetFilteredDataAsyncGet: async (pc?: GenericList, value?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/GenericList/GetFilteredDataAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pc !== undefined) {
                localVarQueryParameter['pc'] = pc;
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGenericListGetHardwareListGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/GenericList/GetHardwareList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGenericListGetLicenceListGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/GenericList/GetLicenceList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GenericListApi - functional programming interface
 */
export const GenericListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GenericListApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGenericListByBolgeFonksiyonGetBolumProjeByBolgeFonksiyonGet(skip?: number, top?: number, name?: string, company?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IGenericListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGenericListByBolgeFonksiyonGetBolumProjeByBolgeFonksiyonGet(skip, top, name, company, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GenericListApi.apiGenericListByBolgeFonksiyonGetBolumProjeByBolgeFonksiyonGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGenericListByCompanyGetBolgeFonksiyonByCompanyGet(skip?: number, top?: number, name?: string, company?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IGenericListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGenericListByCompanyGetBolgeFonksiyonByCompanyGet(skip, top, name, company, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GenericListApi.apiGenericListByCompanyGetBolgeFonksiyonByCompanyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [grupBaskanlik] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGenericListBygrupBaskanlikGetCompanyByGrupBaskanlikGet(skip?: number, top?: number, name?: string, grupBaskanlik?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IGenericListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGenericListBygrupBaskanlikGetCompanyByGrupBaskanlikGet(skip, top, name, grupBaskanlik, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GenericListApi.apiGenericListBygrupBaskanlikGetCompanyByGrupBaskanlikGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GenericList} [pc] 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [parentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGenericListGet(pc?: GenericList, skip?: number, top?: number, name?: string, parentId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IGenericListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGenericListGet(pc, skip, top, name, parentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GenericListApi.apiGenericListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GenericList} [pc] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGenericListGetFilteredDataAsyncGet(pc?: GenericList, value?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGenericListGetFilteredDataAsyncGet(pc, value, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GenericListApi.apiGenericListGetFilteredDataAsyncGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGenericListGetHardwareListGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HardwareList>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGenericListGetHardwareListGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GenericListApi.apiGenericListGetHardwareListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGenericListGetLicenceListGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LicenceList>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGenericListGetLicenceListGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GenericListApi.apiGenericListGetLicenceListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GenericListApi - factory interface
 */
export const GenericListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GenericListApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGenericListByBolgeFonksiyonGetBolumProjeByBolgeFonksiyonGet(skip?: number, top?: number, name?: string, company?: string, options?: RawAxiosRequestConfig): AxiosPromise<IGenericListDto> {
            return localVarFp.apiGenericListByBolgeFonksiyonGetBolumProjeByBolgeFonksiyonGet(skip, top, name, company, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGenericListByCompanyGetBolgeFonksiyonByCompanyGet(skip?: number, top?: number, name?: string, company?: string, options?: RawAxiosRequestConfig): AxiosPromise<IGenericListDto> {
            return localVarFp.apiGenericListByCompanyGetBolgeFonksiyonByCompanyGet(skip, top, name, company, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [grupBaskanlik] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGenericListBygrupBaskanlikGetCompanyByGrupBaskanlikGet(skip?: number, top?: number, name?: string, grupBaskanlik?: string, options?: RawAxiosRequestConfig): AxiosPromise<IGenericListDto> {
            return localVarFp.apiGenericListBygrupBaskanlikGetCompanyByGrupBaskanlikGet(skip, top, name, grupBaskanlik, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GenericList} [pc] 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [parentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGenericListGet(pc?: GenericList, skip?: number, top?: number, name?: string, parentId?: string, options?: RawAxiosRequestConfig): AxiosPromise<IGenericListDto> {
            return localVarFp.apiGenericListGet(pc, skip, top, name, parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GenericList} [pc] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGenericListGetFilteredDataAsyncGet(pc?: GenericList, value?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiGenericListGetFilteredDataAsyncGet(pc, value, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGenericListGetHardwareListGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<HardwareList>> {
            return localVarFp.apiGenericListGetHardwareListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGenericListGetLicenceListGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<LicenceList>> {
            return localVarFp.apiGenericListGetLicenceListGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GenericListApi - object-oriented interface
 */
export class GenericListApi extends BaseAPI {
    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [name] 
     * @param {string} [company] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiGenericListByBolgeFonksiyonGetBolumProjeByBolgeFonksiyonGet(skip?: number, top?: number, name?: string, company?: string, options?: RawAxiosRequestConfig) {
        return GenericListApiFp(this.configuration).apiGenericListByBolgeFonksiyonGetBolumProjeByBolgeFonksiyonGet(skip, top, name, company, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [name] 
     * @param {string} [company] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiGenericListByCompanyGetBolgeFonksiyonByCompanyGet(skip?: number, top?: number, name?: string, company?: string, options?: RawAxiosRequestConfig) {
        return GenericListApiFp(this.configuration).apiGenericListByCompanyGetBolgeFonksiyonByCompanyGet(skip, top, name, company, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [name] 
     * @param {string} [grupBaskanlik] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiGenericListBygrupBaskanlikGetCompanyByGrupBaskanlikGet(skip?: number, top?: number, name?: string, grupBaskanlik?: string, options?: RawAxiosRequestConfig) {
        return GenericListApiFp(this.configuration).apiGenericListBygrupBaskanlikGetCompanyByGrupBaskanlikGet(skip, top, name, grupBaskanlik, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GenericList} [pc] 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [name] 
     * @param {string} [parentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiGenericListGet(pc?: GenericList, skip?: number, top?: number, name?: string, parentId?: string, options?: RawAxiosRequestConfig) {
        return GenericListApiFp(this.configuration).apiGenericListGet(pc, skip, top, name, parentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GenericList} [pc] 
     * @param {string} [value] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiGenericListGetFilteredDataAsyncGet(pc?: GenericList, value?: string, options?: RawAxiosRequestConfig) {
        return GenericListApiFp(this.configuration).apiGenericListGetFilteredDataAsyncGet(pc, value, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiGenericListGetHardwareListGet(options?: RawAxiosRequestConfig) {
        return GenericListApiFp(this.configuration).apiGenericListGetHardwareListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiGenericListGetLicenceListGet(options?: RawAxiosRequestConfig) {
        return GenericListApiFp(this.configuration).apiGenericListGetLicenceListGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * InventoryApi - axios parameter creator
 */
export const InventoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [inventoryId] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInventoryAssignPut: async (inventoryId?: string, userId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Inventory/Assign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (inventoryId !== undefined) {
                localVarQueryParameter['inventoryId'] = inventoryId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInventoryDelete: async (id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Inventory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInventoryGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Inventory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [inventoryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInventoryGetAssignUserGet: async (inventoryId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Inventory/GetAssignUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (inventoryId !== undefined) {
                localVarQueryParameter['inventoryId'] = inventoryId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInventoryGetEnumsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Inventory/GetEnums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInventoryIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiInventoryIdGet', 'id', id)
            const localVarPath = `/api/Inventory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InventoryInsertDto} [inventoryInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInventoryPost: async (inventoryInsertDto?: InventoryInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Inventory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inventoryInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InventoryUpdateDto} [inventoryUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInventoryPut: async (inventoryUpdateDto?: InventoryUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Inventory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inventoryUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InventoryApi - functional programming interface
 */
export const InventoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InventoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [inventoryId] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInventoryAssignPut(inventoryId?: string, userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInventoryAssignPut(inventoryId, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InventoryApi.apiInventoryAssignPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInventoryDelete(id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInventoryDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InventoryApi.apiInventoryDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInventoryGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InventoryListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInventoryGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InventoryApi.apiInventoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [inventoryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInventoryGetAssignUserGet(inventoryId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserApp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInventoryGetAssignUserGet(inventoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InventoryApi.apiInventoryGetAssignUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInventoryGetEnumsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EnumListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInventoryGetEnumsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InventoryApi.apiInventoryGetEnumsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInventoryIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInventoryIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InventoryApi.apiInventoryIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {InventoryInsertDto} [inventoryInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInventoryPost(inventoryInsertDto?: InventoryInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInventoryPost(inventoryInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InventoryApi.apiInventoryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {InventoryUpdateDto} [inventoryUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInventoryPut(inventoryUpdateDto?: InventoryUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInventoryPut(inventoryUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InventoryApi.apiInventoryPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * InventoryApi - factory interface
 */
export const InventoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InventoryApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [inventoryId] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInventoryAssignPut(inventoryId?: string, userId?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiInventoryAssignPut(inventoryId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInventoryDelete(id?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiInventoryDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInventoryGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<InventoryListDto>> {
            return localVarFp.apiInventoryGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [inventoryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInventoryGetAssignUserGet(inventoryId?: string, options?: RawAxiosRequestConfig): AxiosPromise<UserApp> {
            return localVarFp.apiInventoryGetAssignUserGet(inventoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInventoryGetEnumsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<EnumListDto>> {
            return localVarFp.apiInventoryGetEnumsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInventoryIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<InventoryListDto> {
            return localVarFp.apiInventoryIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InventoryInsertDto} [inventoryInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInventoryPost(inventoryInsertDto?: InventoryInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiInventoryPost(inventoryInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InventoryUpdateDto} [inventoryUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInventoryPut(inventoryUpdateDto?: InventoryUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiInventoryPut(inventoryUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InventoryApi - object-oriented interface
 */
export class InventoryApi extends BaseAPI {
    /**
     * 
     * @param {string} [inventoryId] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiInventoryAssignPut(inventoryId?: string, userId?: string, options?: RawAxiosRequestConfig) {
        return InventoryApiFp(this.configuration).apiInventoryAssignPut(inventoryId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiInventoryDelete(id?: string, options?: RawAxiosRequestConfig) {
        return InventoryApiFp(this.configuration).apiInventoryDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiInventoryGet(options?: RawAxiosRequestConfig) {
        return InventoryApiFp(this.configuration).apiInventoryGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [inventoryId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiInventoryGetAssignUserGet(inventoryId?: string, options?: RawAxiosRequestConfig) {
        return InventoryApiFp(this.configuration).apiInventoryGetAssignUserGet(inventoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiInventoryGetEnumsGet(options?: RawAxiosRequestConfig) {
        return InventoryApiFp(this.configuration).apiInventoryGetEnumsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiInventoryIdGet(id: string, options?: RawAxiosRequestConfig) {
        return InventoryApiFp(this.configuration).apiInventoryIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InventoryInsertDto} [inventoryInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiInventoryPost(inventoryInsertDto?: InventoryInsertDto, options?: RawAxiosRequestConfig) {
        return InventoryApiFp(this.configuration).apiInventoryPost(inventoryInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InventoryUpdateDto} [inventoryUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiInventoryPut(inventoryUpdateDto?: InventoryUpdateDto, options?: RawAxiosRequestConfig) {
        return InventoryApiFp(this.configuration).apiInventoryPut(inventoryUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * KanbanApi - axios parameter creator
 */
export const KanbanApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiKanbanDelete: async (id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Kanban`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiKanbanGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Kanban`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiKanbanIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiKanbanIdGet', 'id', id)
            const localVarPath = `/api/Kanban/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {KanbanTasksInsertDto} [kanbanTasksInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiKanbanPost: async (kanbanTasksInsertDto?: KanbanTasksInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Kanban`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(kanbanTasksInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {KanbanTasksUpdateDto} [kanbanTasksUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiKanbanPut: async (kanbanTasksUpdateDto?: KanbanTasksUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Kanban`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(kanbanTasksUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KanbanApi - functional programming interface
 */
export const KanbanApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KanbanApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiKanbanDelete(id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiKanbanDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['KanbanApi.apiKanbanDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiKanbanGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KanbanTasksListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiKanbanGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['KanbanApi.apiKanbanGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiKanbanIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KanbanTasksListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiKanbanIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['KanbanApi.apiKanbanIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {KanbanTasksInsertDto} [kanbanTasksInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiKanbanPost(kanbanTasksInsertDto?: KanbanTasksInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiKanbanPost(kanbanTasksInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['KanbanApi.apiKanbanPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {KanbanTasksUpdateDto} [kanbanTasksUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiKanbanPut(kanbanTasksUpdateDto?: KanbanTasksUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiKanbanPut(kanbanTasksUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['KanbanApi.apiKanbanPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * KanbanApi - factory interface
 */
export const KanbanApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KanbanApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiKanbanDelete(id?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiKanbanDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiKanbanGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<KanbanTasksListDto>> {
            return localVarFp.apiKanbanGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiKanbanIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<KanbanTasksListDto> {
            return localVarFp.apiKanbanIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {KanbanTasksInsertDto} [kanbanTasksInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiKanbanPost(kanbanTasksInsertDto?: KanbanTasksInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiKanbanPost(kanbanTasksInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {KanbanTasksUpdateDto} [kanbanTasksUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiKanbanPut(kanbanTasksUpdateDto?: KanbanTasksUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiKanbanPut(kanbanTasksUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * KanbanApi - object-oriented interface
 */
export class KanbanApi extends BaseAPI {
    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiKanbanDelete(id?: string, options?: RawAxiosRequestConfig) {
        return KanbanApiFp(this.configuration).apiKanbanDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiKanbanGet(options?: RawAxiosRequestConfig) {
        return KanbanApiFp(this.configuration).apiKanbanGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiKanbanIdGet(id: string, options?: RawAxiosRequestConfig) {
        return KanbanApiFp(this.configuration).apiKanbanIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {KanbanTasksInsertDto} [kanbanTasksInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiKanbanPost(kanbanTasksInsertDto?: KanbanTasksInsertDto, options?: RawAxiosRequestConfig) {
        return KanbanApiFp(this.configuration).apiKanbanPost(kanbanTasksInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {KanbanTasksUpdateDto} [kanbanTasksUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiKanbanPut(kanbanTasksUpdateDto?: KanbanTasksUpdateDto, options?: RawAxiosRequestConfig) {
        return KanbanApiFp(this.configuration).apiKanbanPut(kanbanTasksUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LookupApi - axios parameter creator
 */
export const LookupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [moduleKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupCategoriesGet: async (moduleKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Lookup/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (moduleKey !== undefined) {
                localVarQueryParameter['moduleKey'] = moduleKey;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupCategoriesIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiLookupCategoriesIdDelete', 'id', id)
            const localVarPath = `/api/Lookup/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {LookupCategoryDto} [lookupCategoryDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupCategoriesIdPut: async (id: string, lookupCategoryDto?: LookupCategoryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiLookupCategoriesIdPut', 'id', id)
            const localVarPath = `/api/Lookup/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lookupCategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LookupCategoryDto} [lookupCategoryDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupCategoriesPost: async (lookupCategoryDto?: LookupCategoryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Lookup/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lookupCategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupItemsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiLookupItemsIdDelete', 'id', id)
            const localVarPath = `/api/Lookup/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {LookupItemDto} [lookupItemDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupItemsIdPut: async (id: string, lookupItemDto?: LookupItemDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiLookupItemsIdPut', 'id', id)
            const localVarPath = `/api/Lookup/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lookupItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupItemsKeyGet: async (key: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiLookupItemsKeyGet', 'key', key)
            const localVarPath = `/api/Lookup/items/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LookupItemDto} [lookupItemDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupItemsPost: async (lookupItemDto?: LookupItemDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Lookup/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lookupItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupModulesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Lookup/modules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupModulesIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiLookupModulesIdDelete', 'id', id)
            const localVarPath = `/api/Lookup/modules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {LookupModuleDto} [lookupModuleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupModulesIdPut: async (id: string, lookupModuleDto?: LookupModuleDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiLookupModulesIdPut', 'id', id)
            const localVarPath = `/api/Lookup/modules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lookupModuleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LookupModuleDto} [lookupModuleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupModulesPost: async (lookupModuleDto?: LookupModuleDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Lookup/modules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lookupModuleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [moduleKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupTreeGet: async (moduleKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Lookup/tree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (moduleKey !== undefined) {
                localVarQueryParameter['moduleKey'] = moduleKey;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LookupApi - functional programming interface
 */
export const LookupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LookupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [moduleKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLookupCategoriesGet(moduleKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLookupCategoriesGet(moduleKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LookupApi.apiLookupCategoriesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLookupCategoriesIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLookupCategoriesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LookupApi.apiLookupCategoriesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {LookupCategoryDto} [lookupCategoryDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLookupCategoriesIdPut(id: string, lookupCategoryDto?: LookupCategoryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLookupCategoriesIdPut(id, lookupCategoryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LookupApi.apiLookupCategoriesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LookupCategoryDto} [lookupCategoryDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLookupCategoriesPost(lookupCategoryDto?: LookupCategoryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLookupCategoriesPost(lookupCategoryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LookupApi.apiLookupCategoriesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLookupItemsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLookupItemsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LookupApi.apiLookupItemsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {LookupItemDto} [lookupItemDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLookupItemsIdPut(id: string, lookupItemDto?: LookupItemDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLookupItemsIdPut(id, lookupItemDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LookupApi.apiLookupItemsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLookupItemsKeyGet(key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLookupItemsKeyGet(key, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LookupApi.apiLookupItemsKeyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LookupItemDto} [lookupItemDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLookupItemsPost(lookupItemDto?: LookupItemDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLookupItemsPost(lookupItemDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LookupApi.apiLookupItemsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLookupModulesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLookupModulesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LookupApi.apiLookupModulesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLookupModulesIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLookupModulesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LookupApi.apiLookupModulesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {LookupModuleDto} [lookupModuleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLookupModulesIdPut(id: string, lookupModuleDto?: LookupModuleDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLookupModulesIdPut(id, lookupModuleDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LookupApi.apiLookupModulesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LookupModuleDto} [lookupModuleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLookupModulesPost(lookupModuleDto?: LookupModuleDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLookupModulesPost(lookupModuleDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LookupApi.apiLookupModulesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [moduleKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLookupTreeGet(moduleKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLookupTreeGet(moduleKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LookupApi.apiLookupTreeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LookupApi - factory interface
 */
export const LookupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LookupApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [moduleKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupCategoriesGet(moduleKey?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiLookupCategoriesGet(moduleKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupCategoriesIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiLookupCategoriesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {LookupCategoryDto} [lookupCategoryDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupCategoriesIdPut(id: string, lookupCategoryDto?: LookupCategoryDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiLookupCategoriesIdPut(id, lookupCategoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LookupCategoryDto} [lookupCategoryDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupCategoriesPost(lookupCategoryDto?: LookupCategoryDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiLookupCategoriesPost(lookupCategoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupItemsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiLookupItemsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {LookupItemDto} [lookupItemDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupItemsIdPut(id: string, lookupItemDto?: LookupItemDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiLookupItemsIdPut(id, lookupItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupItemsKeyGet(key: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiLookupItemsKeyGet(key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LookupItemDto} [lookupItemDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupItemsPost(lookupItemDto?: LookupItemDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiLookupItemsPost(lookupItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupModulesGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiLookupModulesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupModulesIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiLookupModulesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {LookupModuleDto} [lookupModuleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupModulesIdPut(id: string, lookupModuleDto?: LookupModuleDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiLookupModulesIdPut(id, lookupModuleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LookupModuleDto} [lookupModuleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupModulesPost(lookupModuleDto?: LookupModuleDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiLookupModulesPost(lookupModuleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [moduleKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupTreeGet(moduleKey?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiLookupTreeGet(moduleKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LookupApi - object-oriented interface
 */
export class LookupApi extends BaseAPI {
    /**
     * 
     * @param {string} [moduleKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiLookupCategoriesGet(moduleKey?: string, options?: RawAxiosRequestConfig) {
        return LookupApiFp(this.configuration).apiLookupCategoriesGet(moduleKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiLookupCategoriesIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return LookupApiFp(this.configuration).apiLookupCategoriesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {LookupCategoryDto} [lookupCategoryDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiLookupCategoriesIdPut(id: string, lookupCategoryDto?: LookupCategoryDto, options?: RawAxiosRequestConfig) {
        return LookupApiFp(this.configuration).apiLookupCategoriesIdPut(id, lookupCategoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LookupCategoryDto} [lookupCategoryDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiLookupCategoriesPost(lookupCategoryDto?: LookupCategoryDto, options?: RawAxiosRequestConfig) {
        return LookupApiFp(this.configuration).apiLookupCategoriesPost(lookupCategoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiLookupItemsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return LookupApiFp(this.configuration).apiLookupItemsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {LookupItemDto} [lookupItemDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiLookupItemsIdPut(id: string, lookupItemDto?: LookupItemDto, options?: RawAxiosRequestConfig) {
        return LookupApiFp(this.configuration).apiLookupItemsIdPut(id, lookupItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} key 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiLookupItemsKeyGet(key: string, options?: RawAxiosRequestConfig) {
        return LookupApiFp(this.configuration).apiLookupItemsKeyGet(key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LookupItemDto} [lookupItemDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiLookupItemsPost(lookupItemDto?: LookupItemDto, options?: RawAxiosRequestConfig) {
        return LookupApiFp(this.configuration).apiLookupItemsPost(lookupItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiLookupModulesGet(options?: RawAxiosRequestConfig) {
        return LookupApiFp(this.configuration).apiLookupModulesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiLookupModulesIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return LookupApiFp(this.configuration).apiLookupModulesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {LookupModuleDto} [lookupModuleDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiLookupModulesIdPut(id: string, lookupModuleDto?: LookupModuleDto, options?: RawAxiosRequestConfig) {
        return LookupApiFp(this.configuration).apiLookupModulesIdPut(id, lookupModuleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LookupModuleDto} [lookupModuleDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiLookupModulesPost(lookupModuleDto?: LookupModuleDto, options?: RawAxiosRequestConfig) {
        return LookupApiFp(this.configuration).apiLookupModulesPost(lookupModuleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [moduleKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiLookupTreeGet(moduleKey?: string, options?: RawAxiosRequestConfig) {
        return LookupApiFp(this.configuration).apiLookupTreeGet(moduleKey, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LookupModuleApi - axios parameter creator
 */
export const LookupModuleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupModuleGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LookupModule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupModuleIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiLookupModuleIdDelete', 'id', id)
            const localVarPath = `/api/LookupModule/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupModuleIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiLookupModuleIdGet', 'id', id)
            const localVarPath = `/api/LookupModule/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {LookupModuleDto} [lookupModuleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupModuleIdPut: async (id: string, lookupModuleDto?: LookupModuleDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiLookupModuleIdPut', 'id', id)
            const localVarPath = `/api/LookupModule/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lookupModuleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LookupModuleDto} [lookupModuleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupModulePost: async (lookupModuleDto?: LookupModuleDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LookupModule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lookupModuleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LookupModuleApi - functional programming interface
 */
export const LookupModuleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LookupModuleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLookupModuleGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLookupModuleGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LookupModuleApi.apiLookupModuleGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLookupModuleIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLookupModuleIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LookupModuleApi.apiLookupModuleIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLookupModuleIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLookupModuleIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LookupModuleApi.apiLookupModuleIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {LookupModuleDto} [lookupModuleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLookupModuleIdPut(id: string, lookupModuleDto?: LookupModuleDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLookupModuleIdPut(id, lookupModuleDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LookupModuleApi.apiLookupModuleIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LookupModuleDto} [lookupModuleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLookupModulePost(lookupModuleDto?: LookupModuleDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLookupModulePost(lookupModuleDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LookupModuleApi.apiLookupModulePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LookupModuleApi - factory interface
 */
export const LookupModuleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LookupModuleApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupModuleGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiLookupModuleGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupModuleIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiLookupModuleIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupModuleIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiLookupModuleIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {LookupModuleDto} [lookupModuleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupModuleIdPut(id: string, lookupModuleDto?: LookupModuleDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiLookupModuleIdPut(id, lookupModuleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LookupModuleDto} [lookupModuleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupModulePost(lookupModuleDto?: LookupModuleDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiLookupModulePost(lookupModuleDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LookupModuleApi - object-oriented interface
 */
export class LookupModuleApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiLookupModuleGet(options?: RawAxiosRequestConfig) {
        return LookupModuleApiFp(this.configuration).apiLookupModuleGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiLookupModuleIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return LookupModuleApiFp(this.configuration).apiLookupModuleIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiLookupModuleIdGet(id: string, options?: RawAxiosRequestConfig) {
        return LookupModuleApiFp(this.configuration).apiLookupModuleIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {LookupModuleDto} [lookupModuleDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiLookupModuleIdPut(id: string, lookupModuleDto?: LookupModuleDto, options?: RawAxiosRequestConfig) {
        return LookupModuleApiFp(this.configuration).apiLookupModuleIdPut(id, lookupModuleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LookupModuleDto} [lookupModuleDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiLookupModulePost(lookupModuleDto?: LookupModuleDto, options?: RawAxiosRequestConfig) {
        return LookupModuleApiFp(this.configuration).apiLookupModulePost(lookupModuleDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MeetingsApi - axios parameter creator
 */
export const MeetingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmMeetingsCustomerCustomerIdGet: async (customerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCrmMeetingsCustomerCustomerIdGet', 'customerId', customerId)
            const localVarPath = `/api/crm/Meetings/customer/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmMeetingsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCrmMeetingsIdDelete', 'id', id)
            const localVarPath = `/api/crm/Meetings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmMeetingsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCrmMeetingsIdGet', 'id', id)
            const localVarPath = `/api/crm/Meetings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MeetingDto} [meetingDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmMeetingsPost: async (meetingDto?: MeetingDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/crm/Meetings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(meetingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MeetingDto} [meetingDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmMeetingsPut: async (meetingDto?: MeetingDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/crm/Meetings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(meetingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeetingsApi - functional programming interface
 */
export const MeetingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeetingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmMeetingsCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmMeetingsCustomerCustomerIdGet(customerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeetingsApi.apiCrmMeetingsCustomerCustomerIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmMeetingsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmMeetingsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeetingsApi.apiCrmMeetingsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmMeetingsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmMeetingsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeetingsApi.apiCrmMeetingsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {MeetingDto} [meetingDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmMeetingsPost(meetingDto?: MeetingDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmMeetingsPost(meetingDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeetingsApi.apiCrmMeetingsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {MeetingDto} [meetingDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmMeetingsPut(meetingDto?: MeetingDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmMeetingsPut(meetingDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeetingsApi.apiCrmMeetingsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MeetingsApi - factory interface
 */
export const MeetingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeetingsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmMeetingsCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmMeetingsCustomerCustomerIdGet(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmMeetingsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmMeetingsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmMeetingsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmMeetingsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MeetingDto} [meetingDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmMeetingsPost(meetingDto?: MeetingDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmMeetingsPost(meetingDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MeetingDto} [meetingDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmMeetingsPut(meetingDto?: MeetingDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmMeetingsPut(meetingDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeetingsApi - object-oriented interface
 */
export class MeetingsApi extends BaseAPI {
    /**
     * 
     * @param {string} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmMeetingsCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).apiCrmMeetingsCustomerCustomerIdGet(customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmMeetingsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).apiCrmMeetingsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmMeetingsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).apiCrmMeetingsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MeetingDto} [meetingDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmMeetingsPost(meetingDto?: MeetingDto, options?: RawAxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).apiCrmMeetingsPost(meetingDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MeetingDto} [meetingDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmMeetingsPut(meetingDto?: MeetingDto, options?: RawAxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).apiCrmMeetingsPut(meetingDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MenuApi - axios parameter creator
 */
export const MenuApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuAllListDataGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Menu/AllListData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [tenantOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuAllPlainGet: async (tenantOnly?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Menu/all-plain`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (tenantOnly !== undefined) {
                localVarQueryParameter['tenantOnly'] = tenantOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuAllWithoutAuthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Menu/all-without-auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [tenantId] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuEffectivePreviewGet: async (tenantId?: string, userId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Menu/effective-preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (tenantId !== undefined) {
                localVarQueryParameter['tenantId'] = tenantId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Menu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuGetAuthByUserGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Menu/GetAuthByUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMenuIdDelete', 'id', id)
            const localVarPath = `/api/Menu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMenuIdGet', 'id', id)
            const localVarPath = `/api/Menu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MenuInsertDto} [menuInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuPost: async (menuInsertDto?: MenuInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Menu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(menuInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MenuUpdateDto} [menuUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuPut: async (menuUpdateDto?: MenuUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Menu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(menuUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuTenantOnlyGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Menu/tenant-only`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuApi - functional programming interface
 */
export const MenuApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MenuApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMenuAllListDataGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MenuListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMenuAllListDataGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenuApi.apiMenuAllListDataGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {boolean} [tenantOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMenuAllPlainGet(tenantOnly?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MenuListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMenuAllPlainGet(tenantOnly, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenuApi.apiMenuAllPlainGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMenuAllWithoutAuthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Menu>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMenuAllWithoutAuthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenuApi.apiMenuAllWithoutAuthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [tenantId] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMenuEffectivePreviewGet(tenantId?: string, userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Menu>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMenuEffectivePreviewGet(tenantId, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenuApi.apiMenuEffectivePreviewGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMenuGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Menu>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMenuGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenuApi.apiMenuGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMenuGetAuthByUserGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Menu>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMenuGetAuthByUserGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenuApi.apiMenuGetAuthByUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMenuIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMenuIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenuApi.apiMenuIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMenuIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MenuListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMenuIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenuApi.apiMenuIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {MenuInsertDto} [menuInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMenuPost(menuInsertDto?: MenuInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MenuListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMenuPost(menuInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenuApi.apiMenuPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {MenuUpdateDto} [menuUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMenuPut(menuUpdateDto?: MenuUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMenuPut(menuUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenuApi.apiMenuPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMenuTenantOnlyGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MenuListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMenuTenantOnlyGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenuApi.apiMenuTenantOnlyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MenuApi - factory interface
 */
export const MenuApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MenuApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuAllListDataGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<MenuListDto>> {
            return localVarFp.apiMenuAllListDataGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} [tenantOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuAllPlainGet(tenantOnly?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<Array<MenuListDto>> {
            return localVarFp.apiMenuAllPlainGet(tenantOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuAllWithoutAuthGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Menu>> {
            return localVarFp.apiMenuAllWithoutAuthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [tenantId] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuEffectivePreviewGet(tenantId?: string, userId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Menu>> {
            return localVarFp.apiMenuEffectivePreviewGet(tenantId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Menu>> {
            return localVarFp.apiMenuGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuGetAuthByUserGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Menu>> {
            return localVarFp.apiMenuGetAuthByUserGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiMenuIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<MenuListDto> {
            return localVarFp.apiMenuIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MenuInsertDto} [menuInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuPost(menuInsertDto?: MenuInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<MenuListDto> {
            return localVarFp.apiMenuPost(menuInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MenuUpdateDto} [menuUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuPut(menuUpdateDto?: MenuUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiMenuPut(menuUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuTenantOnlyGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<MenuListDto>> {
            return localVarFp.apiMenuTenantOnlyGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MenuApi - object-oriented interface
 */
export class MenuApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiMenuAllListDataGet(options?: RawAxiosRequestConfig) {
        return MenuApiFp(this.configuration).apiMenuAllListDataGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} [tenantOnly] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiMenuAllPlainGet(tenantOnly?: boolean, options?: RawAxiosRequestConfig) {
        return MenuApiFp(this.configuration).apiMenuAllPlainGet(tenantOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiMenuAllWithoutAuthGet(options?: RawAxiosRequestConfig) {
        return MenuApiFp(this.configuration).apiMenuAllWithoutAuthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [tenantId] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiMenuEffectivePreviewGet(tenantId?: string, userId?: string, options?: RawAxiosRequestConfig) {
        return MenuApiFp(this.configuration).apiMenuEffectivePreviewGet(tenantId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiMenuGet(options?: RawAxiosRequestConfig) {
        return MenuApiFp(this.configuration).apiMenuGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiMenuGetAuthByUserGet(options?: RawAxiosRequestConfig) {
        return MenuApiFp(this.configuration).apiMenuGetAuthByUserGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiMenuIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return MenuApiFp(this.configuration).apiMenuIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiMenuIdGet(id: string, options?: RawAxiosRequestConfig) {
        return MenuApiFp(this.configuration).apiMenuIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MenuInsertDto} [menuInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiMenuPost(menuInsertDto?: MenuInsertDto, options?: RawAxiosRequestConfig) {
        return MenuApiFp(this.configuration).apiMenuPost(menuInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MenuUpdateDto} [menuUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiMenuPut(menuUpdateDto?: MenuUpdateDto, options?: RawAxiosRequestConfig) {
        return MenuApiFp(this.configuration).apiMenuPut(menuUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiMenuTenantOnlyGet(options?: RawAxiosRequestConfig) {
        return MenuApiFp(this.configuration).apiMenuTenantOnlyGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OpportunitiesApi - axios parameter creator
 */
export const OpportunitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmOpportunitiesCustomerCustomerIdGet: async (customerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCrmOpportunitiesCustomerCustomerIdGet', 'customerId', customerId)
            const localVarPath = `/api/crm/Opportunities/customer/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmOpportunitiesIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCrmOpportunitiesIdDelete', 'id', id)
            const localVarPath = `/api/crm/Opportunities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmOpportunitiesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCrmOpportunitiesIdGet', 'id', id)
            const localVarPath = `/api/crm/Opportunities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OpportunityDto} [opportunityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmOpportunitiesPost: async (opportunityDto?: OpportunityDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/crm/Opportunities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(opportunityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OpportunityDto} [opportunityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmOpportunitiesPut: async (opportunityDto?: OpportunityDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/crm/Opportunities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(opportunityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpportunitiesApi - functional programming interface
 */
export const OpportunitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpportunitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmOpportunitiesCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmOpportunitiesCustomerCustomerIdGet(customerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpportunitiesApi.apiCrmOpportunitiesCustomerCustomerIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmOpportunitiesIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmOpportunitiesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpportunitiesApi.apiCrmOpportunitiesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmOpportunitiesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmOpportunitiesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpportunitiesApi.apiCrmOpportunitiesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {OpportunityDto} [opportunityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmOpportunitiesPost(opportunityDto?: OpportunityDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmOpportunitiesPost(opportunityDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpportunitiesApi.apiCrmOpportunitiesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {OpportunityDto} [opportunityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmOpportunitiesPut(opportunityDto?: OpportunityDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmOpportunitiesPut(opportunityDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpportunitiesApi.apiCrmOpportunitiesPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OpportunitiesApi - factory interface
 */
export const OpportunitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpportunitiesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmOpportunitiesCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmOpportunitiesCustomerCustomerIdGet(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmOpportunitiesIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmOpportunitiesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmOpportunitiesIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmOpportunitiesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpportunityDto} [opportunityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmOpportunitiesPost(opportunityDto?: OpportunityDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmOpportunitiesPost(opportunityDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpportunityDto} [opportunityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmOpportunitiesPut(opportunityDto?: OpportunityDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmOpportunitiesPut(opportunityDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OpportunitiesApi - object-oriented interface
 */
export class OpportunitiesApi extends BaseAPI {
    /**
     * 
     * @param {string} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmOpportunitiesCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig) {
        return OpportunitiesApiFp(this.configuration).apiCrmOpportunitiesCustomerCustomerIdGet(customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmOpportunitiesIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return OpportunitiesApiFp(this.configuration).apiCrmOpportunitiesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmOpportunitiesIdGet(id: string, options?: RawAxiosRequestConfig) {
        return OpportunitiesApiFp(this.configuration).apiCrmOpportunitiesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpportunityDto} [opportunityDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmOpportunitiesPost(opportunityDto?: OpportunityDto, options?: RawAxiosRequestConfig) {
        return OpportunitiesApiFp(this.configuration).apiCrmOpportunitiesPost(opportunityDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpportunityDto} [opportunityDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmOpportunitiesPut(opportunityDto?: OpportunityDto, options?: RawAxiosRequestConfig) {
        return OpportunitiesApiFp(this.configuration).apiCrmOpportunitiesPut(opportunityDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrganizationApi - axios parameter creator
 */
export const OrganizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrganizationGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [dptId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrganizationGetByDepartmentGet: async (dptId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Organization/GetByDepartment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (dptId !== undefined) {
                localVarQueryParameter['dptId'] = dptId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationApi - functional programming interface
 */
export const OrganizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrganizationGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrganizationGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationApi.apiOrganizationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [dptId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrganizationGetByDepartmentGet(dptId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrganizationGetByDepartmentGet(dptId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationApi.apiOrganizationGetByDepartmentGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrganizationApi - factory interface
 */
export const OrganizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrganizationGet(options?: RawAxiosRequestConfig): AxiosPromise<OrganizationDto> {
            return localVarFp.apiOrganizationGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [dptId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrganizationGetByDepartmentGet(dptId?: string, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationDto> {
            return localVarFp.apiOrganizationGetByDepartmentGet(dptId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationApi - object-oriented interface
 */
export class OrganizationApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiOrganizationGet(options?: RawAxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).apiOrganizationGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [dptId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiOrganizationGetByDepartmentGet(dptId?: string, options?: RawAxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).apiOrganizationGetByDepartmentGet(dptId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PdksApi - axios parameter creator
 */
export const PdksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [fileName] 
         * @param {string} [passKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPdksGet: async (fileName?: string, passKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Pdks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fileName !== undefined) {
                localVarQueryParameter['fileName'] = fileName;
            }

            if (passKey !== undefined) {
                localVarQueryParameter['passKey'] = passKey;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PdksApi - functional programming interface
 */
export const PdksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PdksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [fileName] 
         * @param {string} [passKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPdksGet(fileName?: string, passKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HareketDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPdksGet(fileName, passKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PdksApi.apiPdksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PdksApi - factory interface
 */
export const PdksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PdksApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [fileName] 
         * @param {string} [passKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPdksGet(fileName?: string, passKey?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<HareketDto>> {
            return localVarFp.apiPdksGet(fileName, passKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PdksApi - object-oriented interface
 */
export class PdksApi extends BaseAPI {
    /**
     * 
     * @param {string} [fileName] 
     * @param {string} [passKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiPdksGet(fileName?: string, passKey?: string, options?: RawAxiosRequestConfig) {
        return PdksApiFp(this.configuration).apiPdksGet(fileName, passKey, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PickListApi - axios parameter creator
 */
export const PickListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PickList} [pc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPickListGet: async (pc?: PickList, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/PickList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pc !== undefined) {
                localVarQueryParameter['pc'] = pc;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PickListApi - functional programming interface
 */
export const PickListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PickListApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {PickList} [pc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPickListGet(pc?: PickList, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PickListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPickListGet(pc, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PickListApi.apiPickListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PickListApi - factory interface
 */
export const PickListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PickListApiFp(configuration)
    return {
        /**
         * 
         * @param {PickList} [pc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPickListGet(pc?: PickList, options?: RawAxiosRequestConfig): AxiosPromise<Array<PickListDto>> {
            return localVarFp.apiPickListGet(pc, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PickListApi - object-oriented interface
 */
export class PickListApi extends BaseAPI {
    /**
     * 
     * @param {PickList} [pc] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiPickListGet(pc?: PickList, options?: RawAxiosRequestConfig) {
        return PickListApiFp(this.configuration).apiPickListGet(pc, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PositionsApi - axios parameter creator
 */
export const PositionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionsDelete: async (id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Positions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Positions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionsGetPositionsByCompanyGet: async (id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Positions/GetPositionsByCompany`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiPositionsIdGet', 'id', id)
            const localVarPath = `/api/Positions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePositionDto} [createPositionDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionsPost: async (createPositionDto?: CreatePositionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Positions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPositionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdatePositionDto} [updatePositionDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionsPut: async (updatePositionDto?: UpdatePositionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Positions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePositionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PositionsApi - functional programming interface
 */
export const PositionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PositionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPositionsDelete(id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPositionsDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PositionsApi.apiPositionsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPositionsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PositionListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPositionsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PositionsApi.apiPositionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPositionsGetPositionsByCompanyGet(id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PositionListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPositionsGetPositionsByCompanyGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PositionsApi.apiPositionsGetPositionsByCompanyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPositionsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPositionsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PositionsApi.apiPositionsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreatePositionDto} [createPositionDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPositionsPost(createPositionDto?: CreatePositionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPositionsPost(createPositionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PositionsApi.apiPositionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdatePositionDto} [updatePositionDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPositionsPut(updatePositionDto?: UpdatePositionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPositionsPut(updatePositionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PositionsApi.apiPositionsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PositionsApi - factory interface
 */
export const PositionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PositionsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionsDelete(id?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiPositionsDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<PositionListDto>> {
            return localVarFp.apiPositionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionsGetPositionsByCompanyGet(id?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<PositionListDto>> {
            return localVarFp.apiPositionsGetPositionsByCompanyGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<PositionListDto> {
            return localVarFp.apiPositionsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePositionDto} [createPositionDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionsPost(createPositionDto?: CreatePositionDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiPositionsPost(createPositionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdatePositionDto} [updatePositionDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionsPut(updatePositionDto?: UpdatePositionDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiPositionsPut(updatePositionDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PositionsApi - object-oriented interface
 */
export class PositionsApi extends BaseAPI {
    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiPositionsDelete(id?: string, options?: RawAxiosRequestConfig) {
        return PositionsApiFp(this.configuration).apiPositionsDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiPositionsGet(options?: RawAxiosRequestConfig) {
        return PositionsApiFp(this.configuration).apiPositionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiPositionsGetPositionsByCompanyGet(id?: string, options?: RawAxiosRequestConfig) {
        return PositionsApiFp(this.configuration).apiPositionsGetPositionsByCompanyGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiPositionsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return PositionsApiFp(this.configuration).apiPositionsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePositionDto} [createPositionDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiPositionsPost(createPositionDto?: CreatePositionDto, options?: RawAxiosRequestConfig) {
        return PositionsApiFp(this.configuration).apiPositionsPost(createPositionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdatePositionDto} [updatePositionDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiPositionsPut(updatePositionDto?: UpdatePositionDto, options?: RawAxiosRequestConfig) {
        return PositionsApiFp(this.configuration).apiPositionsPut(updatePositionDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProjectCategoriesApi - axios parameter creator
 */
export const ProjectCategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectCategoriesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ProjectCategories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProjectCategoriesInsertDto} [projectCategoriesInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectCategoriesPost: async (projectCategoriesInsertDto?: ProjectCategoriesInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ProjectCategories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectCategoriesInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectCategoriesApi - functional programming interface
 */
export const ProjectCategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectCategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectCategoriesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectCategoriesListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectCategoriesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectCategoriesApi.apiProjectCategoriesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ProjectCategoriesInsertDto} [projectCategoriesInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectCategoriesPost(projectCategoriesInsertDto?: ProjectCategoriesInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectCategoriesPost(projectCategoriesInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectCategoriesApi.apiProjectCategoriesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectCategoriesApi - factory interface
 */
export const ProjectCategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectCategoriesApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectCategoriesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ProjectCategoriesListDto>> {
            return localVarFp.apiProjectCategoriesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProjectCategoriesInsertDto} [projectCategoriesInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectCategoriesPost(projectCategoriesInsertDto?: ProjectCategoriesInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiProjectCategoriesPost(projectCategoriesInsertDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectCategoriesApi - object-oriented interface
 */
export class ProjectCategoriesApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProjectCategoriesGet(options?: RawAxiosRequestConfig) {
        return ProjectCategoriesApiFp(this.configuration).apiProjectCategoriesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProjectCategoriesInsertDto} [projectCategoriesInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProjectCategoriesPost(projectCategoriesInsertDto?: ProjectCategoriesInsertDto, options?: RawAxiosRequestConfig) {
        return ProjectCategoriesApiFp(this.configuration).apiProjectCategoriesPost(projectCategoriesInsertDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProjectTasksApi - axios parameter creator
 */
export const ProjectTasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectTasksDelete: async (requestBody?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ProjectTasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectTasksGet: async (projectId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ProjectTasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectTasksGetProjectUsersGet: async (projectId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ProjectTasks/GetProjectUsers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [projectId] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectTasksGetProjectUsersWithPhotoGet: async (projectId?: string, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ProjectTasks/GetProjectUsersWithPhoto`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectTasksGetTasksByUserGet: async (userId?: string, projectId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ProjectTasks/GetTasksByUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectTasksGetUserTasksGet: async (userId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ProjectTasks/GetUserTasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectTasksHasPermGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ProjectTasks/HasPerm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectTasksIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProjectTasksIdGet', 'id', id)
            const localVarPath = `/api/ProjectTasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProjectTasksInsertDto} [projectTasksInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectTasksPost: async (projectTasksInsertDto?: ProjectTasksInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ProjectTasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectTasksInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProjectTasksUpdateDto} [projectTasksUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectTasksPut: async (projectTasksUpdateDto?: ProjectTasksUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ProjectTasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectTasksUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectTasksApi - functional programming interface
 */
export const ProjectTasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectTasksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectTasksDelete(requestBody?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectTasksDelete(requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectTasksApi.apiProjectTasksDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectTasksGet(projectId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectTasksListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectTasksGet(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectTasksApi.apiProjectTasksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectTasksGetProjectUsersGet(projectId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserAppDtoOnlyNameId>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectTasksGetProjectUsersGet(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectTasksApi.apiProjectTasksGetProjectUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [projectId] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectTasksGetProjectUsersWithPhotoGet(projectId?: string, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserAppDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectTasksGetProjectUsersWithPhotoGet(projectId, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectTasksApi.apiProjectTasksGetProjectUsersWithPhotoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectTasksGetTasksByUserGet(userId?: string, projectId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectTasksGetTasksByUserGet(userId, projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectTasksApi.apiProjectTasksGetTasksByUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectTasksGetUserTasksGet(userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectInfoDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectTasksGetUserTasksGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectTasksApi.apiProjectTasksGetUserTasksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectTasksHasPermGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectTasksHasPermGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectTasksApi.apiProjectTasksHasPermGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectTasksIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectTasksListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectTasksIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectTasksApi.apiProjectTasksIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ProjectTasksInsertDto} [projectTasksInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectTasksPost(projectTasksInsertDto?: ProjectTasksInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectTasksPost(projectTasksInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectTasksApi.apiProjectTasksPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ProjectTasksUpdateDto} [projectTasksUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectTasksPut(projectTasksUpdateDto?: ProjectTasksUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectTasksPut(projectTasksUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectTasksApi.apiProjectTasksPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectTasksApi - factory interface
 */
export const ProjectTasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectTasksApiFp(configuration)
    return {
        /**
         * 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectTasksDelete(requestBody?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiProjectTasksDelete(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectTasksGet(projectId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ProjectTasksListDto>> {
            return localVarFp.apiProjectTasksGet(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectTasksGetProjectUsersGet(projectId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserAppDtoOnlyNameId>> {
            return localVarFp.apiProjectTasksGetProjectUsersGet(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [projectId] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectTasksGetProjectUsersWithPhotoGet(projectId?: string, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserAppDto>> {
            return localVarFp.apiProjectTasksGetProjectUsersWithPhotoGet(projectId, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectTasksGetTasksByUserGet(userId?: string, projectId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.apiProjectTasksGetTasksByUserGet(userId, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectTasksGetUserTasksGet(userId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ProjectInfoDto>> {
            return localVarFp.apiProjectTasksGetUserTasksGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectTasksHasPermGet(options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.apiProjectTasksHasPermGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectTasksIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ProjectTasksListDto> {
            return localVarFp.apiProjectTasksIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProjectTasksInsertDto} [projectTasksInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectTasksPost(projectTasksInsertDto?: ProjectTasksInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiProjectTasksPost(projectTasksInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProjectTasksUpdateDto} [projectTasksUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectTasksPut(projectTasksUpdateDto?: ProjectTasksUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiProjectTasksPut(projectTasksUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectTasksApi - object-oriented interface
 */
export class ProjectTasksApi extends BaseAPI {
    /**
     * 
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProjectTasksDelete(requestBody?: Array<string>, options?: RawAxiosRequestConfig) {
        return ProjectTasksApiFp(this.configuration).apiProjectTasksDelete(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [projectId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProjectTasksGet(projectId?: string, options?: RawAxiosRequestConfig) {
        return ProjectTasksApiFp(this.configuration).apiProjectTasksGet(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [projectId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProjectTasksGetProjectUsersGet(projectId?: string, options?: RawAxiosRequestConfig) {
        return ProjectTasksApiFp(this.configuration).apiProjectTasksGetProjectUsersGet(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [projectId] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProjectTasksGetProjectUsersWithPhotoGet(projectId?: string, page?: number, options?: RawAxiosRequestConfig) {
        return ProjectTasksApiFp(this.configuration).apiProjectTasksGetProjectUsersWithPhotoGet(projectId, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userId] 
     * @param {string} [projectId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProjectTasksGetTasksByUserGet(userId?: string, projectId?: string, options?: RawAxiosRequestConfig) {
        return ProjectTasksApiFp(this.configuration).apiProjectTasksGetTasksByUserGet(userId, projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProjectTasksGetUserTasksGet(userId?: string, options?: RawAxiosRequestConfig) {
        return ProjectTasksApiFp(this.configuration).apiProjectTasksGetUserTasksGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProjectTasksHasPermGet(options?: RawAxiosRequestConfig) {
        return ProjectTasksApiFp(this.configuration).apiProjectTasksHasPermGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProjectTasksIdGet(id: string, options?: RawAxiosRequestConfig) {
        return ProjectTasksApiFp(this.configuration).apiProjectTasksIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProjectTasksInsertDto} [projectTasksInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProjectTasksPost(projectTasksInsertDto?: ProjectTasksInsertDto, options?: RawAxiosRequestConfig) {
        return ProjectTasksApiFp(this.configuration).apiProjectTasksPost(projectTasksInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProjectTasksUpdateDto} [projectTasksUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProjectTasksPut(projectTasksUpdateDto?: ProjectTasksUpdateDto, options?: RawAxiosRequestConfig) {
        return ProjectTasksApiFp(this.configuration).apiProjectTasksPut(projectTasksUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProjectsApi - axios parameter creator
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsDelete: async (id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsGetByProjectIdProjectListGet: async (id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Projects/GetByProjectIdProjectList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsGetByUserIdProjectListGet: async (userId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Projects/GetByUserIdProjectList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsGetCategoryGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Projects/GetCategory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsGetUserProjectGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Projects/GetUserProject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProjectsIdGet', 'id', id)
            const localVarPath = `/api/Projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateProjectDto} [createProjectDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsPost: async (createProjectDto?: CreateProjectDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateProjectDto} [updateProjectDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsPut: async (updateProjectDto?: UpdateProjectDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectsDelete(id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectsDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.apiProjectsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.apiProjectsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectsGetByProjectIdProjectListGet(id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectsGetByProjectIdProjectListGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.apiProjectsGetByProjectIdProjectListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectsGetByUserIdProjectListGet(userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectsGetByUserIdProjectListGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.apiProjectsGetByUserIdProjectListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectsGetCategoryGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectsGetCategoryGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.apiProjectsGetCategoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectsGetUserProjectGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectsGetUserProjectGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.apiProjectsGetUserProjectGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.apiProjectsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateProjectDto} [createProjectDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectsPost(createProjectDto?: CreateProjectDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectsPost(createProjectDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.apiProjectsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateProjectDto} [updateProjectDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectsPut(updateProjectDto?: UpdateProjectDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectsPut(updateProjectDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.apiProjectsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectsApi - factory interface
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsDelete(id?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiProjectsDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiProjectsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsGetByProjectIdProjectListGet(id?: string, options?: RawAxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.apiProjectsGetByProjectIdProjectListGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsGetByUserIdProjectListGet(userId?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiProjectsGetByUserIdProjectListGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsGetCategoryGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiProjectsGetCategoryGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsGetUserProjectGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiProjectsGetUserProjectGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiProjectsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateProjectDto} [createProjectDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsPost(createProjectDto?: CreateProjectDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiProjectsPost(createProjectDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateProjectDto} [updateProjectDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsPut(updateProjectDto?: UpdateProjectDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiProjectsPut(updateProjectDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectsApi - object-oriented interface
 */
export class ProjectsApi extends BaseAPI {
    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProjectsDelete(id?: string, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).apiProjectsDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProjectsGet(options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).apiProjectsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProjectsGetByProjectIdProjectListGet(id?: string, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).apiProjectsGetByProjectIdProjectListGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProjectsGetByUserIdProjectListGet(userId?: string, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).apiProjectsGetByUserIdProjectListGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProjectsGetCategoryGet(options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).apiProjectsGetCategoryGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProjectsGetUserProjectGet(options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).apiProjectsGetUserProjectGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProjectsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).apiProjectsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateProjectDto} [createProjectDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProjectsPost(createProjectDto?: CreateProjectDto, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).apiProjectsPost(createProjectDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateProjectDto} [updateProjectDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProjectsPut(updateProjectDto?: UpdateProjectDto, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).apiProjectsPut(updateProjectDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * QuotesApi - axios parameter creator
 */
export const QuotesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmQuotesCustomerCustomerIdGet: async (customerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCrmQuotesCustomerCustomerIdGet', 'customerId', customerId)
            const localVarPath = `/api/crm/Quotes/customer/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmQuotesIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCrmQuotesIdDelete', 'id', id)
            const localVarPath = `/api/crm/Quotes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmQuotesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCrmQuotesIdGet', 'id', id)
            const localVarPath = `/api/crm/Quotes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {QuoteDto} [quoteDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmQuotesPost: async (quoteDto?: QuoteDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/crm/Quotes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {QuoteDto} [quoteDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmQuotesPut: async (quoteDto?: QuoteDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/crm/Quotes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuotesApi - functional programming interface
 */
export const QuotesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuotesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmQuotesCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmQuotesCustomerCustomerIdGet(customerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuotesApi.apiCrmQuotesCustomerCustomerIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmQuotesIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmQuotesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuotesApi.apiCrmQuotesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmQuotesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmQuotesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuotesApi.apiCrmQuotesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {QuoteDto} [quoteDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmQuotesPost(quoteDto?: QuoteDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmQuotesPost(quoteDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuotesApi.apiCrmQuotesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {QuoteDto} [quoteDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmQuotesPut(quoteDto?: QuoteDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmQuotesPut(quoteDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuotesApi.apiCrmQuotesPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QuotesApi - factory interface
 */
export const QuotesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuotesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmQuotesCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmQuotesCustomerCustomerIdGet(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmQuotesIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmQuotesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmQuotesIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmQuotesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QuoteDto} [quoteDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmQuotesPost(quoteDto?: QuoteDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmQuotesPost(quoteDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QuoteDto} [quoteDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmQuotesPut(quoteDto?: QuoteDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmQuotesPut(quoteDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuotesApi - object-oriented interface
 */
export class QuotesApi extends BaseAPI {
    /**
     * 
     * @param {string} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmQuotesCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig) {
        return QuotesApiFp(this.configuration).apiCrmQuotesCustomerCustomerIdGet(customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmQuotesIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return QuotesApiFp(this.configuration).apiCrmQuotesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmQuotesIdGet(id: string, options?: RawAxiosRequestConfig) {
        return QuotesApiFp(this.configuration).apiCrmQuotesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QuoteDto} [quoteDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmQuotesPost(quoteDto?: QuoteDto, options?: RawAxiosRequestConfig) {
        return QuotesApiFp(this.configuration).apiCrmQuotesPost(quoteDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QuoteDto} [quoteDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmQuotesPut(quoteDto?: QuoteDto, options?: RawAxiosRequestConfig) {
        return QuotesApiFp(this.configuration).apiCrmQuotesPut(quoteDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RemindersApi - axios parameter creator
 */
export const RemindersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmRemindersCustomerCustomerIdGet: async (customerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCrmRemindersCustomerCustomerIdGet', 'customerId', customerId)
            const localVarPath = `/api/crm/Reminders/customer/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmRemindersIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCrmRemindersIdDelete', 'id', id)
            const localVarPath = `/api/crm/Reminders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmRemindersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCrmRemindersIdGet', 'id', id)
            const localVarPath = `/api/crm/Reminders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ReminderDto} [reminderDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmRemindersPost: async (reminderDto?: ReminderDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/crm/Reminders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reminderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ReminderDto} [reminderDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmRemindersPut: async (reminderDto?: ReminderDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/crm/Reminders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reminderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RemindersApi - functional programming interface
 */
export const RemindersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RemindersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmRemindersCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmRemindersCustomerCustomerIdGet(customerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RemindersApi.apiCrmRemindersCustomerCustomerIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmRemindersIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmRemindersIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RemindersApi.apiCrmRemindersIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmRemindersIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmRemindersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RemindersApi.apiCrmRemindersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ReminderDto} [reminderDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmRemindersPost(reminderDto?: ReminderDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmRemindersPost(reminderDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RemindersApi.apiCrmRemindersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ReminderDto} [reminderDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmRemindersPut(reminderDto?: ReminderDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmRemindersPut(reminderDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RemindersApi.apiCrmRemindersPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RemindersApi - factory interface
 */
export const RemindersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RemindersApiFp(configuration)
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmRemindersCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmRemindersCustomerCustomerIdGet(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmRemindersIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmRemindersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmRemindersIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmRemindersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ReminderDto} [reminderDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmRemindersPost(reminderDto?: ReminderDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmRemindersPost(reminderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ReminderDto} [reminderDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmRemindersPut(reminderDto?: ReminderDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmRemindersPut(reminderDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RemindersApi - object-oriented interface
 */
export class RemindersApi extends BaseAPI {
    /**
     * 
     * @param {string} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmRemindersCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig) {
        return RemindersApiFp(this.configuration).apiCrmRemindersCustomerCustomerIdGet(customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmRemindersIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return RemindersApiFp(this.configuration).apiCrmRemindersIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmRemindersIdGet(id: string, options?: RawAxiosRequestConfig) {
        return RemindersApiFp(this.configuration).apiCrmRemindersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ReminderDto} [reminderDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmRemindersPost(reminderDto?: ReminderDto, options?: RawAxiosRequestConfig) {
        return RemindersApiFp(this.configuration).apiCrmRemindersPost(reminderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ReminderDto} [reminderDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmRemindersPut(reminderDto?: ReminderDto, options?: RawAxiosRequestConfig) {
        return RemindersApiFp(this.configuration).apiCrmRemindersPut(reminderDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RoleMenuApi - axios parameter creator
 */
export const RoleMenuApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleMenuAllOnlyHeadGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RoleMenu/AllOnlyHead`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleMenuAllOnlyHeadWithoutGlobalGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RoleMenu/AllOnlyHeadWithoutGlobal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleMenuGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RoleMenu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleMenuGetAuthByUserGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RoleMenu/GetAuthByUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [href] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleMenuGetAuthByUserWithHrefGet: async (href?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RoleMenu/GetAuthByUserWithHref`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (href !== undefined) {
                localVarQueryParameter['href'] = href;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleMenuGetByIdRoleIdGet: async (roleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('apiRoleMenuGetByIdRoleIdGet', 'roleId', roleId)
            const localVarPath = `/api/RoleMenu/GetById/{roleId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RoleMenuInsertDto} [roleMenuInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleMenuPost: async (roleMenuInsertDto?: RoleMenuInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RoleMenu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleMenuInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RoleMenuUpdateDto} [roleMenuUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleMenuPut: async (roleMenuUpdateDto?: RoleMenuUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RoleMenu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleMenuUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleMenuRoleIdDelete: async (roleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('apiRoleMenuRoleIdDelete', 'roleId', roleId)
            const localVarPath = `/api/RoleMenu/{roleId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleMenuApi - functional programming interface
 */
export const RoleMenuApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoleMenuApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoleMenuAllOnlyHeadGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentityRole>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoleMenuAllOnlyHeadGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMenuApi.apiRoleMenuAllOnlyHeadGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoleMenuAllOnlyHeadWithoutGlobalGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentityRole>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoleMenuAllOnlyHeadWithoutGlobalGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMenuApi.apiRoleMenuAllOnlyHeadWithoutGlobalGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoleMenuGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleMenuListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoleMenuGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMenuApi.apiRoleMenuGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoleMenuGetAuthByUserGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Menu>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoleMenuGetAuthByUserGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMenuApi.apiRoleMenuGetAuthByUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [href] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoleMenuGetAuthByUserWithHrefGet(href?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoleMenuGetAuthByUserWithHrefGet(href, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMenuApi.apiRoleMenuGetAuthByUserWithHrefGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoleMenuGetByIdRoleIdGet(roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleMenuResuResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoleMenuGetByIdRoleIdGet(roleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMenuApi.apiRoleMenuGetByIdRoleIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RoleMenuInsertDto} [roleMenuInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoleMenuPost(roleMenuInsertDto?: RoleMenuInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoleMenuPost(roleMenuInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMenuApi.apiRoleMenuPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RoleMenuUpdateDto} [roleMenuUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoleMenuPut(roleMenuUpdateDto?: RoleMenuUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoleMenuPut(roleMenuUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMenuApi.apiRoleMenuPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoleMenuRoleIdDelete(roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoleMenuRoleIdDelete(roleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMenuApi.apiRoleMenuRoleIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RoleMenuApi - factory interface
 */
export const RoleMenuApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoleMenuApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleMenuAllOnlyHeadGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<IdentityRole>> {
            return localVarFp.apiRoleMenuAllOnlyHeadGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleMenuAllOnlyHeadWithoutGlobalGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<IdentityRole>> {
            return localVarFp.apiRoleMenuAllOnlyHeadWithoutGlobalGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleMenuGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<RoleMenuListDto>> {
            return localVarFp.apiRoleMenuGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleMenuGetAuthByUserGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Menu>> {
            return localVarFp.apiRoleMenuGetAuthByUserGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [href] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleMenuGetAuthByUserWithHrefGet(href?: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.apiRoleMenuGetAuthByUserWithHrefGet(href, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleMenuGetByIdRoleIdGet(roleId: string, options?: RawAxiosRequestConfig): AxiosPromise<RoleMenuResuResultDto> {
            return localVarFp.apiRoleMenuGetByIdRoleIdGet(roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleMenuInsertDto} [roleMenuInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleMenuPost(roleMenuInsertDto?: RoleMenuInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiRoleMenuPost(roleMenuInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleMenuUpdateDto} [roleMenuUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleMenuPut(roleMenuUpdateDto?: RoleMenuUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiRoleMenuPut(roleMenuUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleMenuRoleIdDelete(roleId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiRoleMenuRoleIdDelete(roleId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoleMenuApi - object-oriented interface
 */
export class RoleMenuApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRoleMenuAllOnlyHeadGet(options?: RawAxiosRequestConfig) {
        return RoleMenuApiFp(this.configuration).apiRoleMenuAllOnlyHeadGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRoleMenuAllOnlyHeadWithoutGlobalGet(options?: RawAxiosRequestConfig) {
        return RoleMenuApiFp(this.configuration).apiRoleMenuAllOnlyHeadWithoutGlobalGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRoleMenuGet(options?: RawAxiosRequestConfig) {
        return RoleMenuApiFp(this.configuration).apiRoleMenuGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRoleMenuGetAuthByUserGet(options?: RawAxiosRequestConfig) {
        return RoleMenuApiFp(this.configuration).apiRoleMenuGetAuthByUserGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [href] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRoleMenuGetAuthByUserWithHrefGet(href?: string, options?: RawAxiosRequestConfig) {
        return RoleMenuApiFp(this.configuration).apiRoleMenuGetAuthByUserWithHrefGet(href, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRoleMenuGetByIdRoleIdGet(roleId: string, options?: RawAxiosRequestConfig) {
        return RoleMenuApiFp(this.configuration).apiRoleMenuGetByIdRoleIdGet(roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleMenuInsertDto} [roleMenuInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRoleMenuPost(roleMenuInsertDto?: RoleMenuInsertDto, options?: RawAxiosRequestConfig) {
        return RoleMenuApiFp(this.configuration).apiRoleMenuPost(roleMenuInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleMenuUpdateDto} [roleMenuUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRoleMenuPut(roleMenuUpdateDto?: RoleMenuUpdateDto, options?: RawAxiosRequestConfig) {
        return RoleMenuApiFp(this.configuration).apiRoleMenuPut(roleMenuUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRoleMenuRoleIdDelete(roleId: string, options?: RawAxiosRequestConfig) {
        return RoleMenuApiFp(this.configuration).apiRoleMenuRoleIdDelete(roleId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RoleTenantMenuApi - axios parameter creator
 */
export const RoleTenantMenuApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {RoleTenantMenuBulkSaveDto} [roleTenantMenuBulkSaveDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleTenantMenuBulkSavePost: async (roleTenantMenuBulkSaveDto?: RoleTenantMenuBulkSaveDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RoleTenantMenu/bulk-save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleTenantMenuBulkSaveDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MakeTenantAdminRequest} [makeTenantAdminRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleTenantMenuMakeTenantAdminPost: async (makeTenantAdminRequest?: MakeTenantAdminRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RoleTenantMenu/make-tenant-admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(makeTenantAdminRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} roleId 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleTenantMenuRoleIdTenantIdDelete: async (roleId: string, tenantId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('apiRoleTenantMenuRoleIdTenantIdDelete', 'roleId', roleId)
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('apiRoleTenantMenuRoleIdTenantIdDelete', 'tenantId', tenantId)
            const localVarPath = `/api/RoleTenantMenu/{roleId}/{tenantId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)))
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} roleId 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleTenantMenuRoleIdTenantIdGet: async (roleId: string, tenantId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('apiRoleTenantMenuRoleIdTenantIdGet', 'roleId', roleId)
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('apiRoleTenantMenuRoleIdTenantIdGet', 'tenantId', tenantId)
            const localVarPath = `/api/RoleTenantMenu/{roleId}/{tenantId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)))
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [tenantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleTenantMenuRolesByUserGet: async (userId?: string, tenantId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RoleTenantMenu/roles-by-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (tenantId !== undefined) {
                localVarQueryParameter['tenantId'] = tenantId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [tenantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleTenantMenuRolesByUserGet_1: async (userId?: string, tenantId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RoleTenantMenu/roles/by-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (tenantId !== undefined) {
                localVarQueryParameter['tenantId'] = tenantId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [tenantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleTenantMenuRolesWithMenusByUserGet: async (userId?: string, tenantId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RoleTenantMenu/roles-with-menus/by-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (tenantId !== undefined) {
                localVarQueryParameter['tenantId'] = tenantId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [tenantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleTenantMenuUserRoleAssignmentsGet: async (userId?: string, tenantId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RoleTenantMenu/user-role-assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (tenantId !== undefined) {
                localVarQueryParameter['tenantId'] = tenantId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserRoleAssignmentSaveDto} [userRoleAssignmentSaveDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleTenantMenuUserRoleAssignmentsPost: async (userRoleAssignmentSaveDto?: UserRoleAssignmentSaveDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RoleTenantMenu/user-role-assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRoleAssignmentSaveDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleTenantMenuApi - functional programming interface
 */
export const RoleTenantMenuApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoleTenantMenuApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {RoleTenantMenuBulkSaveDto} [roleTenantMenuBulkSaveDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoleTenantMenuBulkSavePost(roleTenantMenuBulkSaveDto?: RoleTenantMenuBulkSaveDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoleTenantMenuBulkSavePost(roleTenantMenuBulkSaveDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleTenantMenuApi.apiRoleTenantMenuBulkSavePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {MakeTenantAdminRequest} [makeTenantAdminRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoleTenantMenuMakeTenantAdminPost(makeTenantAdminRequest?: MakeTenantAdminRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoleTenantMenuMakeTenantAdminPost(makeTenantAdminRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleTenantMenuApi.apiRoleTenantMenuMakeTenantAdminPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} roleId 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoleTenantMenuRoleIdTenantIdDelete(roleId: string, tenantId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoleTenantMenuRoleIdTenantIdDelete(roleId, tenantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleTenantMenuApi.apiRoleTenantMenuRoleIdTenantIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} roleId 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoleTenantMenuRoleIdTenantIdGet(roleId: string, tenantId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleTenantMenuListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoleTenantMenuRoleIdTenantIdGet(roleId, tenantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleTenantMenuApi.apiRoleTenantMenuRoleIdTenantIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [tenantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoleTenantMenuRolesByUserGet(userId?: string, tenantId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleTenantMenuListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoleTenantMenuRolesByUserGet(userId, tenantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleTenantMenuApi.apiRoleTenantMenuRolesByUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [tenantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoleTenantMenuRolesByUserGet_1(userId?: string, tenantId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoleTenantMenuRolesByUserGet_1(userId, tenantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleTenantMenuApi.apiRoleTenantMenuRolesByUserGet_1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [tenantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoleTenantMenuRolesWithMenusByUserGet(userId?: string, tenantId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleTenantWithMenusGetDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoleTenantMenuRolesWithMenusByUserGet(userId, tenantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleTenantMenuApi.apiRoleTenantMenuRolesWithMenusByUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [tenantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoleTenantMenuUserRoleAssignmentsGet(userId?: string, tenantId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRoleAssignmentGetDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoleTenantMenuUserRoleAssignmentsGet(userId, tenantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleTenantMenuApi.apiRoleTenantMenuUserRoleAssignmentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserRoleAssignmentSaveDto} [userRoleAssignmentSaveDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoleTenantMenuUserRoleAssignmentsPost(userRoleAssignmentSaveDto?: UserRoleAssignmentSaveDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoleTenantMenuUserRoleAssignmentsPost(userRoleAssignmentSaveDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleTenantMenuApi.apiRoleTenantMenuUserRoleAssignmentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RoleTenantMenuApi - factory interface
 */
export const RoleTenantMenuApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoleTenantMenuApiFp(configuration)
    return {
        /**
         * 
         * @param {RoleTenantMenuBulkSaveDto} [roleTenantMenuBulkSaveDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleTenantMenuBulkSavePost(roleTenantMenuBulkSaveDto?: RoleTenantMenuBulkSaveDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiRoleTenantMenuBulkSavePost(roleTenantMenuBulkSaveDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MakeTenantAdminRequest} [makeTenantAdminRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleTenantMenuMakeTenantAdminPost(makeTenantAdminRequest?: MakeTenantAdminRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiRoleTenantMenuMakeTenantAdminPost(makeTenantAdminRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} roleId 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleTenantMenuRoleIdTenantIdDelete(roleId: string, tenantId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiRoleTenantMenuRoleIdTenantIdDelete(roleId, tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} roleId 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleTenantMenuRoleIdTenantIdGet(roleId: string, tenantId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<RoleTenantMenuListDto>> {
            return localVarFp.apiRoleTenantMenuRoleIdTenantIdGet(roleId, tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [tenantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleTenantMenuRolesByUserGet(userId?: string, tenantId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<RoleTenantMenuListDto>> {
            return localVarFp.apiRoleTenantMenuRolesByUserGet(userId, tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [tenantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleTenantMenuRolesByUserGet_1(userId?: string, tenantId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.apiRoleTenantMenuRolesByUserGet_1(userId, tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [tenantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleTenantMenuRolesWithMenusByUserGet(userId?: string, tenantId?: string, options?: RawAxiosRequestConfig): AxiosPromise<RoleTenantWithMenusGetDto> {
            return localVarFp.apiRoleTenantMenuRolesWithMenusByUserGet(userId, tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [tenantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleTenantMenuUserRoleAssignmentsGet(userId?: string, tenantId?: string, options?: RawAxiosRequestConfig): AxiosPromise<UserRoleAssignmentGetDto> {
            return localVarFp.apiRoleTenantMenuUserRoleAssignmentsGet(userId, tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserRoleAssignmentSaveDto} [userRoleAssignmentSaveDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleTenantMenuUserRoleAssignmentsPost(userRoleAssignmentSaveDto?: UserRoleAssignmentSaveDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiRoleTenantMenuUserRoleAssignmentsPost(userRoleAssignmentSaveDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoleTenantMenuApi - object-oriented interface
 */
export class RoleTenantMenuApi extends BaseAPI {
    /**
     * 
     * @param {RoleTenantMenuBulkSaveDto} [roleTenantMenuBulkSaveDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRoleTenantMenuBulkSavePost(roleTenantMenuBulkSaveDto?: RoleTenantMenuBulkSaveDto, options?: RawAxiosRequestConfig) {
        return RoleTenantMenuApiFp(this.configuration).apiRoleTenantMenuBulkSavePost(roleTenantMenuBulkSaveDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MakeTenantAdminRequest} [makeTenantAdminRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRoleTenantMenuMakeTenantAdminPost(makeTenantAdminRequest?: MakeTenantAdminRequest, options?: RawAxiosRequestConfig) {
        return RoleTenantMenuApiFp(this.configuration).apiRoleTenantMenuMakeTenantAdminPost(makeTenantAdminRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} roleId 
     * @param {string} tenantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRoleTenantMenuRoleIdTenantIdDelete(roleId: string, tenantId: string, options?: RawAxiosRequestConfig) {
        return RoleTenantMenuApiFp(this.configuration).apiRoleTenantMenuRoleIdTenantIdDelete(roleId, tenantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} roleId 
     * @param {string} tenantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRoleTenantMenuRoleIdTenantIdGet(roleId: string, tenantId: string, options?: RawAxiosRequestConfig) {
        return RoleTenantMenuApiFp(this.configuration).apiRoleTenantMenuRoleIdTenantIdGet(roleId, tenantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userId] 
     * @param {string} [tenantId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRoleTenantMenuRolesByUserGet(userId?: string, tenantId?: string, options?: RawAxiosRequestConfig) {
        return RoleTenantMenuApiFp(this.configuration).apiRoleTenantMenuRolesByUserGet(userId, tenantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userId] 
     * @param {string} [tenantId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRoleTenantMenuRolesByUserGet_1(userId?: string, tenantId?: string, options?: RawAxiosRequestConfig) {
        return RoleTenantMenuApiFp(this.configuration).apiRoleTenantMenuRolesByUserGet_1(userId, tenantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userId] 
     * @param {string} [tenantId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRoleTenantMenuRolesWithMenusByUserGet(userId?: string, tenantId?: string, options?: RawAxiosRequestConfig) {
        return RoleTenantMenuApiFp(this.configuration).apiRoleTenantMenuRolesWithMenusByUserGet(userId, tenantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userId] 
     * @param {string} [tenantId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRoleTenantMenuUserRoleAssignmentsGet(userId?: string, tenantId?: string, options?: RawAxiosRequestConfig) {
        return RoleTenantMenuApiFp(this.configuration).apiRoleTenantMenuUserRoleAssignmentsGet(userId, tenantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserRoleAssignmentSaveDto} [userRoleAssignmentSaveDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRoleTenantMenuUserRoleAssignmentsPost(userRoleAssignmentSaveDto?: UserRoleAssignmentSaveDto, options?: RawAxiosRequestConfig) {
        return RoleTenantMenuApiFp(this.configuration).apiRoleTenantMenuUserRoleAssignmentsPost(userRoleAssignmentSaveDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RolesTenantsApi - axios parameter creator
 */
export const RolesTenantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {RoleTenantBulkSaveDto} [roleTenantBulkSaveDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesTenantsBulkSavePost: async (roleTenantBulkSaveDto?: RoleTenantBulkSaveDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RolesTenants/bulk-save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleTenantBulkSaveDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RoleTenantWithMenusBulkSaveDto} [roleTenantWithMenusBulkSaveDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesTenantsBulkSaveWithMenusPost: async (roleTenantWithMenusBulkSaveDto?: RoleTenantWithMenusBulkSaveDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RolesTenants/bulk-save-with-menus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleTenantWithMenusBulkSaveDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} roleId 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesTenantsByRoleIdTenantIdGet: async (roleId: string, tenantId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('apiRolesTenantsByRoleIdTenantIdGet', 'roleId', roleId)
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('apiRolesTenantsByRoleIdTenantIdGet', 'tenantId', tenantId)
            const localVarPath = `/api/RolesTenants/by/{roleId}/{tenantId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)))
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesTenantsByRoleRoleIdGet: async (roleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('apiRolesTenantsByRoleRoleIdGet', 'roleId', roleId)
            const localVarPath = `/api/RolesTenants/by-role/{roleId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesTenantsByTenantTenantIdGet: async (tenantId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('apiRolesTenantsByTenantTenantIdGet', 'tenantId', tenantId)
            const localVarPath = `/api/RolesTenants/by-tenant/{tenantId}`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesTenantsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RolesTenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesTenantsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiRolesTenantsIdDelete', 'id', id)
            const localVarPath = `/api/RolesTenants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RoleTenantInsertDto} [roleTenantInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesTenantsPost: async (roleTenantInsertDto?: RoleTenantInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RolesTenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleTenantInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RoleTenantUpdateDto} [roleTenantUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesTenantsPut: async (roleTenantUpdateDto?: RoleTenantUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RolesTenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleTenantUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesTenantsWithMenusByTenantTenantIdGet: async (tenantId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('apiRolesTenantsWithMenusByTenantTenantIdGet', 'tenantId', tenantId)
            const localVarPath = `/api/RolesTenants/with-menus/by-tenant/{tenantId}`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolesTenantsApi - functional programming interface
 */
export const RolesTenantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RolesTenantsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {RoleTenantBulkSaveDto} [roleTenantBulkSaveDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRolesTenantsBulkSavePost(roleTenantBulkSaveDto?: RoleTenantBulkSaveDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRolesTenantsBulkSavePost(roleTenantBulkSaveDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesTenantsApi.apiRolesTenantsBulkSavePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RoleTenantWithMenusBulkSaveDto} [roleTenantWithMenusBulkSaveDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRolesTenantsBulkSaveWithMenusPost(roleTenantWithMenusBulkSaveDto?: RoleTenantWithMenusBulkSaveDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRolesTenantsBulkSaveWithMenusPost(roleTenantWithMenusBulkSaveDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesTenantsApi.apiRolesTenantsBulkSaveWithMenusPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} roleId 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRolesTenantsByRoleIdTenantIdGet(roleId: string, tenantId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleTenantListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRolesTenantsByRoleIdTenantIdGet(roleId, tenantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesTenantsApi.apiRolesTenantsByRoleIdTenantIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRolesTenantsByRoleRoleIdGet(roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleTenantListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRolesTenantsByRoleRoleIdGet(roleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesTenantsApi.apiRolesTenantsByRoleRoleIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRolesTenantsByTenantTenantIdGet(tenantId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleTenantListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRolesTenantsByTenantTenantIdGet(tenantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesTenantsApi.apiRolesTenantsByTenantTenantIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRolesTenantsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRolesTenantsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesTenantsApi.apiRolesTenantsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRolesTenantsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRolesTenantsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesTenantsApi.apiRolesTenantsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RoleTenantInsertDto} [roleTenantInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRolesTenantsPost(roleTenantInsertDto?: RoleTenantInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRolesTenantsPost(roleTenantInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesTenantsApi.apiRolesTenantsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RoleTenantUpdateDto} [roleTenantUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRolesTenantsPut(roleTenantUpdateDto?: RoleTenantUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRolesTenantsPut(roleTenantUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesTenantsApi.apiRolesTenantsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRolesTenantsWithMenusByTenantTenantIdGet(tenantId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleTenantWithMenusGetDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRolesTenantsWithMenusByTenantTenantIdGet(tenantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesTenantsApi.apiRolesTenantsWithMenusByTenantTenantIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RolesTenantsApi - factory interface
 */
export const RolesTenantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RolesTenantsApiFp(configuration)
    return {
        /**
         * 
         * @param {RoleTenantBulkSaveDto} [roleTenantBulkSaveDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesTenantsBulkSavePost(roleTenantBulkSaveDto?: RoleTenantBulkSaveDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiRolesTenantsBulkSavePost(roleTenantBulkSaveDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleTenantWithMenusBulkSaveDto} [roleTenantWithMenusBulkSaveDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesTenantsBulkSaveWithMenusPost(roleTenantWithMenusBulkSaveDto?: RoleTenantWithMenusBulkSaveDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiRolesTenantsBulkSaveWithMenusPost(roleTenantWithMenusBulkSaveDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} roleId 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesTenantsByRoleIdTenantIdGet(roleId: string, tenantId: string, options?: RawAxiosRequestConfig): AxiosPromise<RoleTenantListDto> {
            return localVarFp.apiRolesTenantsByRoleIdTenantIdGet(roleId, tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesTenantsByRoleRoleIdGet(roleId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<RoleTenantListDto>> {
            return localVarFp.apiRolesTenantsByRoleRoleIdGet(roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesTenantsByTenantTenantIdGet(tenantId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<RoleTenantListDto>> {
            return localVarFp.apiRolesTenantsByTenantTenantIdGet(tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesTenantsGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiRolesTenantsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesTenantsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiRolesTenantsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleTenantInsertDto} [roleTenantInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesTenantsPost(roleTenantInsertDto?: RoleTenantInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiRolesTenantsPost(roleTenantInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleTenantUpdateDto} [roleTenantUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesTenantsPut(roleTenantUpdateDto?: RoleTenantUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiRolesTenantsPut(roleTenantUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesTenantsWithMenusByTenantTenantIdGet(tenantId: string, options?: RawAxiosRequestConfig): AxiosPromise<RoleTenantWithMenusGetDto> {
            return localVarFp.apiRolesTenantsWithMenusByTenantTenantIdGet(tenantId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RolesTenantsApi - object-oriented interface
 */
export class RolesTenantsApi extends BaseAPI {
    /**
     * 
     * @param {RoleTenantBulkSaveDto} [roleTenantBulkSaveDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRolesTenantsBulkSavePost(roleTenantBulkSaveDto?: RoleTenantBulkSaveDto, options?: RawAxiosRequestConfig) {
        return RolesTenantsApiFp(this.configuration).apiRolesTenantsBulkSavePost(roleTenantBulkSaveDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleTenantWithMenusBulkSaveDto} [roleTenantWithMenusBulkSaveDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRolesTenantsBulkSaveWithMenusPost(roleTenantWithMenusBulkSaveDto?: RoleTenantWithMenusBulkSaveDto, options?: RawAxiosRequestConfig) {
        return RolesTenantsApiFp(this.configuration).apiRolesTenantsBulkSaveWithMenusPost(roleTenantWithMenusBulkSaveDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} roleId 
     * @param {string} tenantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRolesTenantsByRoleIdTenantIdGet(roleId: string, tenantId: string, options?: RawAxiosRequestConfig) {
        return RolesTenantsApiFp(this.configuration).apiRolesTenantsByRoleIdTenantIdGet(roleId, tenantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRolesTenantsByRoleRoleIdGet(roleId: string, options?: RawAxiosRequestConfig) {
        return RolesTenantsApiFp(this.configuration).apiRolesTenantsByRoleRoleIdGet(roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tenantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRolesTenantsByTenantTenantIdGet(tenantId: string, options?: RawAxiosRequestConfig) {
        return RolesTenantsApiFp(this.configuration).apiRolesTenantsByTenantTenantIdGet(tenantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRolesTenantsGet(options?: RawAxiosRequestConfig) {
        return RolesTenantsApiFp(this.configuration).apiRolesTenantsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRolesTenantsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return RolesTenantsApiFp(this.configuration).apiRolesTenantsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleTenantInsertDto} [roleTenantInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRolesTenantsPost(roleTenantInsertDto?: RoleTenantInsertDto, options?: RawAxiosRequestConfig) {
        return RolesTenantsApiFp(this.configuration).apiRolesTenantsPost(roleTenantInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleTenantUpdateDto} [roleTenantUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRolesTenantsPut(roleTenantUpdateDto?: RoleTenantUpdateDto, options?: RawAxiosRequestConfig) {
        return RolesTenantsApiFp(this.configuration).apiRolesTenantsPut(roleTenantUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tenantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiRolesTenantsWithMenusByTenantTenantIdGet(tenantId: string, options?: RawAxiosRequestConfig) {
        return RolesTenantsApiFp(this.configuration).apiRolesTenantsWithMenusByTenantTenantIdGet(tenantId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SAPReportsApi - axios parameter creator
 */
export const SAPReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [cusId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsCustomerLast12MonthInvoiceListPost: async (cusId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SAPReports/CustomerLast12MonthInvoiceList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [cusId] 
         * @param {string} [employeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsEmoloyeeLast12MonthInvoiceListPost: async (cusId?: string, employeId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SAPReports/EmoloyeeLast12MonthInvoiceList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (employeId !== undefined) {
                localVarQueryParameter['employeId'] = employeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsGetCustomerListGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SAPReports/GetCustomerList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsGetDepartmentListGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SAPReports/GetDepartmentList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsGetEmployeeListGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SAPReports/GetEmployeeList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsGetEmployeePictureAsBase64ByUserGet: async (userId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SAPReports/GetEmployeePictureAsBase64ByUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsGetEmployeePictureAsBase64Get: async (email?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SAPReports/GetEmployeePictureAsBase64`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [custId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsGetProjectListGet: async (custId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SAPReports/GetProjectList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (custId !== undefined) {
                localVarQueryParameter['custId'] = custId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsGetSapInfoGet: async (email?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SAPReports/getSapInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [projectId] 
         * @param {string} [custId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsProjectLast12MonthInvoicePost: async (projectId?: string, custId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SAPReports/ProjectLast12MonthInvoice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (custId !== undefined) {
                localVarQueryParameter['custId'] = custId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orgeh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsTeamActivityOrgehPost: async (orgeh: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgeh' is not null or undefined
            assertParamExists('apiSAPReportsTeamActivityOrgehPost', 'orgeh', orgeh)
            const localVarPath = `/api/SAPReports/TeamActivity/{orgeh}`
                .replace(`{${"orgeh"}}`, encodeURIComponent(String(orgeh)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orgeh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsTeamLastSixInvoiceOrgehPost: async (orgeh: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgeh' is not null or undefined
            assertParamExists('apiSAPReportsTeamLastSixInvoiceOrgehPost', 'orgeh', orgeh)
            const localVarPath = `/api/SAPReports/TeamLastSixInvoice/{orgeh}`
                .replace(`{${"orgeh"}}`, encodeURIComponent(String(orgeh)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [pernr] 
         * @param {string} [begda] 
         * @param {string} [endda] 
         * @param {string} [cusid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsTopManagementActivityReportPost: async (pernr?: string, begda?: string, endda?: string, cusid?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SAPReports/TopManagementActivityReport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (pernr !== undefined) { 
                localVarFormParams.append('Pernr', pernr as any);
            }
    
            if (begda !== undefined) { 
                localVarFormParams.append('Begda', begda as any);
            }
    
            if (endda !== undefined) { 
                localVarFormParams.append('Endda', endda as any);
            }
    
            if (cusid !== undefined) { 
                localVarFormParams.append('Cusid', cusid as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SAPReportsApi - functional programming interface
 */
export const SAPReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SAPReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [cusId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSAPReportsCustomerLast12MonthInvoiceListPost(cusId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectLastYearInvoiceList>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSAPReportsCustomerLast12MonthInvoiceListPost(cusId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SAPReportsApi.apiSAPReportsCustomerLast12MonthInvoiceListPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [cusId] 
         * @param {string} [employeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSAPReportsEmoloyeeLast12MonthInvoiceListPost(cusId?: string, employeId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectLastYearInvoiceList>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSAPReportsEmoloyeeLast12MonthInvoiceListPost(cusId, employeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SAPReportsApi.apiSAPReportsEmoloyeeLast12MonthInvoiceListPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSAPReportsGetCustomerListGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSAPReportsGetCustomerListGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SAPReportsApi.apiSAPReportsGetCustomerListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSAPReportsGetDepartmentListGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSAPReportsGetDepartmentListGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SAPReportsApi.apiSAPReportsGetDepartmentListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSAPReportsGetEmployeeListGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSAPReportsGetEmployeeListGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SAPReportsApi.apiSAPReportsGetEmployeeListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSAPReportsGetEmployeePictureAsBase64ByUserGet(userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSAPReportsGetEmployeePictureAsBase64ByUserGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SAPReportsApi.apiSAPReportsGetEmployeePictureAsBase64ByUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSAPReportsGetEmployeePictureAsBase64Get(email?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSAPReportsGetEmployeePictureAsBase64Get(email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SAPReportsApi.apiSAPReportsGetEmployeePictureAsBase64Get']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [custId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSAPReportsGetProjectListGet(custId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSAPReportsGetProjectListGet(custId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SAPReportsApi.apiSAPReportsGetProjectListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSAPReportsGetSapInfoGet(email?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSAPReportsGetSapInfoGet(email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SAPReportsApi.apiSAPReportsGetSapInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [projectId] 
         * @param {string} [custId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSAPReportsProjectLast12MonthInvoicePost(projectId?: string, custId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectLastYearInvoiceList>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSAPReportsProjectLast12MonthInvoicePost(projectId, custId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SAPReportsApi.apiSAPReportsProjectLast12MonthInvoicePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} orgeh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSAPReportsTeamActivityOrgehPost(orgeh: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSAPReportsTeamActivityOrgehPost(orgeh, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SAPReportsApi.apiSAPReportsTeamActivityOrgehPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} orgeh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSAPReportsTeamLastSixInvoiceOrgehPost(orgeh: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSAPReportsTeamLastSixInvoiceOrgehPost(orgeh, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SAPReportsApi.apiSAPReportsTeamLastSixInvoiceOrgehPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [pernr] 
         * @param {string} [begda] 
         * @param {string} [endda] 
         * @param {string} [cusid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSAPReportsTopManagementActivityReportPost(pernr?: string, begda?: string, endda?: string, cusid?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSAPReportsTopManagementActivityReportPost(pernr, begda, endda, cusid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SAPReportsApi.apiSAPReportsTopManagementActivityReportPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SAPReportsApi - factory interface
 */
export const SAPReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SAPReportsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [cusId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsCustomerLast12MonthInvoiceListPost(cusId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ProjectLastYearInvoiceList>> {
            return localVarFp.apiSAPReportsCustomerLast12MonthInvoiceListPost(cusId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [cusId] 
         * @param {string} [employeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsEmoloyeeLast12MonthInvoiceListPost(cusId?: string, employeId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ProjectLastYearInvoiceList>> {
            return localVarFp.apiSAPReportsEmoloyeeLast12MonthInvoiceListPost(cusId, employeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsGetCustomerListGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<CustomerListDto>> {
            return localVarFp.apiSAPReportsGetCustomerListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsGetDepartmentListGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiSAPReportsGetDepartmentListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsGetEmployeeListGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<EmployeeDto>> {
            return localVarFp.apiSAPReportsGetEmployeeListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsGetEmployeePictureAsBase64ByUserGet(userId?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiSAPReportsGetEmployeePictureAsBase64ByUserGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsGetEmployeePictureAsBase64Get(email?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiSAPReportsGetEmployeePictureAsBase64Get(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [custId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsGetProjectListGet(custId?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ProjectListDto>> {
            return localVarFp.apiSAPReportsGetProjectListGet(custId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsGetSapInfoGet(email?: string, options?: RawAxiosRequestConfig): AxiosPromise<EmployeeDto> {
            return localVarFp.apiSAPReportsGetSapInfoGet(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [projectId] 
         * @param {string} [custId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsProjectLast12MonthInvoicePost(projectId?: string, custId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ProjectLastYearInvoiceList>> {
            return localVarFp.apiSAPReportsProjectLast12MonthInvoicePost(projectId, custId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} orgeh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsTeamActivityOrgehPost(orgeh: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiSAPReportsTeamActivityOrgehPost(orgeh, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} orgeh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsTeamLastSixInvoiceOrgehPost(orgeh: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiSAPReportsTeamLastSixInvoiceOrgehPost(orgeh, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [pernr] 
         * @param {string} [begda] 
         * @param {string} [endda] 
         * @param {string} [cusid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSAPReportsTopManagementActivityReportPost(pernr?: string, begda?: string, endda?: string, cusid?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiSAPReportsTopManagementActivityReportPost(pernr, begda, endda, cusid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SAPReportsApi - object-oriented interface
 */
export class SAPReportsApi extends BaseAPI {
    /**
     * 
     * @param {string} [cusId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSAPReportsCustomerLast12MonthInvoiceListPost(cusId?: string, options?: RawAxiosRequestConfig) {
        return SAPReportsApiFp(this.configuration).apiSAPReportsCustomerLast12MonthInvoiceListPost(cusId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [cusId] 
     * @param {string} [employeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSAPReportsEmoloyeeLast12MonthInvoiceListPost(cusId?: string, employeId?: string, options?: RawAxiosRequestConfig) {
        return SAPReportsApiFp(this.configuration).apiSAPReportsEmoloyeeLast12MonthInvoiceListPost(cusId, employeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSAPReportsGetCustomerListGet(options?: RawAxiosRequestConfig) {
        return SAPReportsApiFp(this.configuration).apiSAPReportsGetCustomerListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSAPReportsGetDepartmentListGet(options?: RawAxiosRequestConfig) {
        return SAPReportsApiFp(this.configuration).apiSAPReportsGetDepartmentListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSAPReportsGetEmployeeListGet(options?: RawAxiosRequestConfig) {
        return SAPReportsApiFp(this.configuration).apiSAPReportsGetEmployeeListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSAPReportsGetEmployeePictureAsBase64ByUserGet(userId?: string, options?: RawAxiosRequestConfig) {
        return SAPReportsApiFp(this.configuration).apiSAPReportsGetEmployeePictureAsBase64ByUserGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [email] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSAPReportsGetEmployeePictureAsBase64Get(email?: string, options?: RawAxiosRequestConfig) {
        return SAPReportsApiFp(this.configuration).apiSAPReportsGetEmployeePictureAsBase64Get(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [custId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSAPReportsGetProjectListGet(custId?: number, options?: RawAxiosRequestConfig) {
        return SAPReportsApiFp(this.configuration).apiSAPReportsGetProjectListGet(custId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [email] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSAPReportsGetSapInfoGet(email?: string, options?: RawAxiosRequestConfig) {
        return SAPReportsApiFp(this.configuration).apiSAPReportsGetSapInfoGet(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [projectId] 
     * @param {string} [custId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSAPReportsProjectLast12MonthInvoicePost(projectId?: string, custId?: string, options?: RawAxiosRequestConfig) {
        return SAPReportsApiFp(this.configuration).apiSAPReportsProjectLast12MonthInvoicePost(projectId, custId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} orgeh 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSAPReportsTeamActivityOrgehPost(orgeh: string, options?: RawAxiosRequestConfig) {
        return SAPReportsApiFp(this.configuration).apiSAPReportsTeamActivityOrgehPost(orgeh, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} orgeh 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSAPReportsTeamLastSixInvoiceOrgehPost(orgeh: string, options?: RawAxiosRequestConfig) {
        return SAPReportsApiFp(this.configuration).apiSAPReportsTeamLastSixInvoiceOrgehPost(orgeh, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [pernr] 
     * @param {string} [begda] 
     * @param {string} [endda] 
     * @param {string} [cusid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSAPReportsTopManagementActivityReportPost(pernr?: string, begda?: string, endda?: string, cusid?: string, options?: RawAxiosRequestConfig) {
        return SAPReportsApiFp(this.configuration).apiSAPReportsTopManagementActivityReportPost(pernr, begda, endda, cusid, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SFCustCompanyGroupApi - axios parameter creator
 */
export const SFCustCompanyGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFCustCompanyGroupGet: async (skip?: number, top?: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SFCust_companyGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SFCustCompanyGroupApi - functional programming interface
 */
export const SFCustCompanyGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SFCustCompanyGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFCustCompanyGroupGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustCompanyGroupDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFCustCompanyGroupGet(skip, top, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFCustCompanyGroupApi.apiSFCustCompanyGroupGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SFCustCompanyGroupApi - factory interface
 */
export const SFCustCompanyGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SFCustCompanyGroupApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFCustCompanyGroupGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<CustCompanyGroupDto> {
            return localVarFp.apiSFCustCompanyGroupGet(skip, top, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SFCustCompanyGroupApi - object-oriented interface
 */
export class SFCustCompanyGroupApi extends BaseAPI {
    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFCustCompanyGroupGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig) {
        return SFCustCompanyGroupApiFp(this.configuration).apiSFCustCompanyGroupGet(skip, top, name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SFCustLegalEntityApi - axios parameter creator
 */
export const SFCustLegalEntityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFCustLegalEntityGet: async (skip?: number, top?: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SFCust_legalEntity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SFCustLegalEntityApi - functional programming interface
 */
export const SFCustLegalEntityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SFCustLegalEntityApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFCustLegalEntityGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustLegalEntityDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFCustLegalEntityGet(skip, top, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFCustLegalEntityApi.apiSFCustLegalEntityGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SFCustLegalEntityApi - factory interface
 */
export const SFCustLegalEntityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SFCustLegalEntityApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFCustLegalEntityGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<CustLegalEntityDto> {
            return localVarFp.apiSFCustLegalEntityGet(skip, top, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SFCustLegalEntityApi - object-oriented interface
 */
export class SFCustLegalEntityApi extends BaseAPI {
    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFCustLegalEntityGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig) {
        return SFCustLegalEntityApiFp(this.configuration).apiSFCustLegalEntityGet(skip, top, name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SFFOBusinessUnitApi - axios parameter creator
 */
export const SFFOBusinessUnitApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [grupBaskanlik] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOBusinessUnitAllByGrupBaskanlikGet: async (skip?: number, top?: number, name?: string, grupBaskanlik?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SFFOBusinessUnit/AllByGrupBaskanlik`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (grupBaskanlik !== undefined) {
                localVarQueryParameter['grupBaskanlik'] = grupBaskanlik;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOBusinessUnitGet: async (skip?: number, top?: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SFFOBusinessUnit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SFFOBusinessUnitApi - functional programming interface
 */
export const SFFOBusinessUnitApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SFFOBusinessUnitApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [grupBaskanlik] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFFOBusinessUnitAllByGrupBaskanlikGet(skip?: number, top?: number, name?: string, grupBaskanlik?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FOBusinessUnitDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFFOBusinessUnitAllByGrupBaskanlikGet(skip, top, name, grupBaskanlik, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFFOBusinessUnitApi.apiSFFOBusinessUnitAllByGrupBaskanlikGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFFOBusinessUnitGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FOBusinessUnitDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFFOBusinessUnitGet(skip, top, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFFOBusinessUnitApi.apiSFFOBusinessUnitGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SFFOBusinessUnitApi - factory interface
 */
export const SFFOBusinessUnitApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SFFOBusinessUnitApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [grupBaskanlik] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOBusinessUnitAllByGrupBaskanlikGet(skip?: number, top?: number, name?: string, grupBaskanlik?: string, options?: RawAxiosRequestConfig): AxiosPromise<FOBusinessUnitDto> {
            return localVarFp.apiSFFOBusinessUnitAllByGrupBaskanlikGet(skip, top, name, grupBaskanlik, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOBusinessUnitGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<FOBusinessUnitDto> {
            return localVarFp.apiSFFOBusinessUnitGet(skip, top, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SFFOBusinessUnitApi - object-oriented interface
 */
export class SFFOBusinessUnitApi extends BaseAPI {
    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [name] 
     * @param {string} [grupBaskanlik] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFFOBusinessUnitAllByGrupBaskanlikGet(skip?: number, top?: number, name?: string, grupBaskanlik?: string, options?: RawAxiosRequestConfig) {
        return SFFOBusinessUnitApiFp(this.configuration).apiSFFOBusinessUnitAllByGrupBaskanlikGet(skip, top, name, grupBaskanlik, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFFOBusinessUnitGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig) {
        return SFFOBusinessUnitApiFp(this.configuration).apiSFFOBusinessUnitGet(skip, top, name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SFFOCompanyApi - axios parameter creator
 */
export const SFFOCompanyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOCompanyGet: async (skip?: number, top?: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SFFOCompany`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SFFOCompanyApi - functional programming interface
 */
export const SFFOCompanyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SFFOCompanyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFFOCompanyGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FOCompanyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFFOCompanyGet(skip, top, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFFOCompanyApi.apiSFFOCompanyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SFFOCompanyApi - factory interface
 */
export const SFFOCompanyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SFFOCompanyApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOCompanyGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<FOCompanyDto> {
            return localVarFp.apiSFFOCompanyGet(skip, top, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SFFOCompanyApi - object-oriented interface
 */
export class SFFOCompanyApi extends BaseAPI {
    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFFOCompanyGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig) {
        return SFFOCompanyApiFp(this.configuration).apiSFFOCompanyGet(skip, top, name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SFFOCostCenterApi - axios parameter creator
 */
export const SFFOCostCenterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOCostCenterGet: async (skip?: number, top?: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SFFOCostCenter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SFFOCostCenterApi - functional programming interface
 */
export const SFFOCostCenterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SFFOCostCenterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFFOCostCenterGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SFFOCostCenterDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFFOCostCenterGet(skip, top, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFFOCostCenterApi.apiSFFOCostCenterGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SFFOCostCenterApi - factory interface
 */
export const SFFOCostCenterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SFFOCostCenterApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOCostCenterGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<SFFOCostCenterDto> {
            return localVarFp.apiSFFOCostCenterGet(skip, top, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SFFOCostCenterApi - object-oriented interface
 */
export class SFFOCostCenterApi extends BaseAPI {
    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFFOCostCenterGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig) {
        return SFFOCostCenterApiFp(this.configuration).apiSFFOCostCenterGet(skip, top, name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SFFODepartmentApi - axios parameter creator
 */
export const SFFODepartmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFODepartmentGet: async (skip?: number, top?: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SFFODepartment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SFFODepartmentApi - functional programming interface
 */
export const SFFODepartmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SFFODepartmentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFFODepartmentGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FODepartmentSFDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFFODepartmentGet(skip, top, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFFODepartmentApi.apiSFFODepartmentGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SFFODepartmentApi - factory interface
 */
export const SFFODepartmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SFFODepartmentApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFODepartmentGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<FODepartmentSFDto> {
            return localVarFp.apiSFFODepartmentGet(skip, top, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SFFODepartmentApi - object-oriented interface
 */
export class SFFODepartmentApi extends BaseAPI {
    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFFODepartmentGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig) {
        return SFFODepartmentApiFp(this.configuration).apiSFFODepartmentGet(skip, top, name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SFFODivisionApi - axios parameter creator
 */
export const SFFODivisionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [businessUnit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFODivisionAllByBusinessUnitGet: async (skip?: number, top?: number, name?: string, businessUnit?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SFFODivision/AllByBusinessUnit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (businessUnit !== undefined) {
                localVarQueryParameter['businessUnit'] = businessUnit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFODivisionGet: async (skip?: number, top?: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SFFODivision`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SFFODivisionApi - functional programming interface
 */
export const SFFODivisionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SFFODivisionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [businessUnit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFFODivisionAllByBusinessUnitGet(skip?: number, top?: number, name?: string, businessUnit?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FODivisionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFFODivisionAllByBusinessUnitGet(skip, top, name, businessUnit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFFODivisionApi.apiSFFODivisionAllByBusinessUnitGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFFODivisionGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FODivisionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFFODivisionGet(skip, top, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFFODivisionApi.apiSFFODivisionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SFFODivisionApi - factory interface
 */
export const SFFODivisionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SFFODivisionApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [businessUnit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFODivisionAllByBusinessUnitGet(skip?: number, top?: number, name?: string, businessUnit?: string, options?: RawAxiosRequestConfig): AxiosPromise<FODivisionDto> {
            return localVarFp.apiSFFODivisionAllByBusinessUnitGet(skip, top, name, businessUnit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFODivisionGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<FODivisionDto> {
            return localVarFp.apiSFFODivisionGet(skip, top, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SFFODivisionApi - object-oriented interface
 */
export class SFFODivisionApi extends BaseAPI {
    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [name] 
     * @param {string} [businessUnit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFFODivisionAllByBusinessUnitGet(skip?: number, top?: number, name?: string, businessUnit?: string, options?: RawAxiosRequestConfig) {
        return SFFODivisionApiFp(this.configuration).apiSFFODivisionAllByBusinessUnitGet(skip, top, name, businessUnit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFFODivisionGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig) {
        return SFFODivisionApiFp(this.configuration).apiSFFODivisionGet(skip, top, name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SFFOFOPayGroupApi - axios parameter creator
 */
export const SFFOFOPayGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOFOPayGroupGet: async (skip?: number, top?: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SFFOFOPayGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SFFOFOPayGroupApi - functional programming interface
 */
export const SFFOFOPayGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SFFOFOPayGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFFOFOPayGroupGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FOPayGroupSFDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFFOFOPayGroupGet(skip, top, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFFOFOPayGroupApi.apiSFFOFOPayGroupGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SFFOFOPayGroupApi - factory interface
 */
export const SFFOFOPayGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SFFOFOPayGroupApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOFOPayGroupGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<FOPayGroupSFDto> {
            return localVarFp.apiSFFOFOPayGroupGet(skip, top, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SFFOFOPayGroupApi - object-oriented interface
 */
export class SFFOFOPayGroupApi extends BaseAPI {
    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFFOFOPayGroupGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig) {
        return SFFOFOPayGroupApiFp(this.configuration).apiSFFOFOPayGroupGet(skip, top, name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SFFOGeozoneApi - axios parameter creator
 */
export const SFFOGeozoneApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOGeozoneGet: async (skip?: number, top?: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SFFOGeozone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SFFOGeozoneApi - functional programming interface
 */
export const SFFOGeozoneApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SFFOGeozoneApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFFOGeozoneGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FOGeozoneDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFFOGeozoneGet(skip, top, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFFOGeozoneApi.apiSFFOGeozoneGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SFFOGeozoneApi - factory interface
 */
export const SFFOGeozoneApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SFFOGeozoneApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOGeozoneGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<FOGeozoneDto> {
            return localVarFp.apiSFFOGeozoneGet(skip, top, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SFFOGeozoneApi - object-oriented interface
 */
export class SFFOGeozoneApi extends BaseAPI {
    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFFOGeozoneGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig) {
        return SFFOGeozoneApiFp(this.configuration).apiSFFOGeozoneGet(skip, top, name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SFFOJobCodeApi - axios parameter creator
 */
export const SFFOJobCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOJobCodeCheckRecruitmentCodeGet: async (code: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('apiSFFOJobCodeCheckRecruitmentCodeGet', 'code', code)
            const localVarPath = `/api/SFFOJobCode/checkRecruitment/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOJobCodeCodeGet: async (code: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('apiSFFOJobCodeCodeGet', 'code', code)
            const localVarPath = `/api/SFFOJobCode/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOJobCodeGet: async (skip?: number, top?: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SFFOJobCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [workFlowId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOJobCodePost: async (workFlowId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SFFOJobCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (workFlowId !== undefined) {
                localVarQueryParameter['workFlowId'] = workFlowId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SFFOJobCodeApi - functional programming interface
 */
export const SFFOJobCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SFFOJobCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFFOJobCodeCheckRecruitmentCodeGet(code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFFOJobCodeCheckRecruitmentCodeGet(code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFFOJobCodeApi.apiSFFOJobCodeCheckRecruitmentCodeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFFOJobCodeCodeGet(code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FOJobCodeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFFOJobCodeCodeGet(code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFFOJobCodeApi.apiSFFOJobCodeCodeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFFOJobCodeGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FOJobCodeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFFOJobCodeGet(skip, top, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFFOJobCodeApi.apiSFFOJobCodeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [workFlowId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFFOJobCodePost(workFlowId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFFOJobCodePost(workFlowId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFFOJobCodeApi.apiSFFOJobCodePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SFFOJobCodeApi - factory interface
 */
export const SFFOJobCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SFFOJobCodeApiFp(configuration)
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOJobCodeCheckRecruitmentCodeGet(code: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.apiSFFOJobCodeCheckRecruitmentCodeGet(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOJobCodeCodeGet(code: string, options?: RawAxiosRequestConfig): AxiosPromise<FOJobCodeDto> {
            return localVarFp.apiSFFOJobCodeCodeGet(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOJobCodeGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<FOJobCodeDto> {
            return localVarFp.apiSFFOJobCodeGet(skip, top, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [workFlowId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOJobCodePost(workFlowId?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiSFFOJobCodePost(workFlowId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SFFOJobCodeApi - object-oriented interface
 */
export class SFFOJobCodeApi extends BaseAPI {
    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFFOJobCodeCheckRecruitmentCodeGet(code: string, options?: RawAxiosRequestConfig) {
        return SFFOJobCodeApiFp(this.configuration).apiSFFOJobCodeCheckRecruitmentCodeGet(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFFOJobCodeCodeGet(code: string, options?: RawAxiosRequestConfig) {
        return SFFOJobCodeApiFp(this.configuration).apiSFFOJobCodeCodeGet(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFFOJobCodeGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig) {
        return SFFOJobCodeApiFp(this.configuration).apiSFFOJobCodeGet(skip, top, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [workFlowId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFFOJobCodePost(workFlowId?: string, options?: RawAxiosRequestConfig) {
        return SFFOJobCodeApiFp(this.configuration).apiSFFOJobCodePost(workFlowId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SFFOJobFunctionApi - axios parameter creator
 */
export const SFFOJobFunctionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOJobFunctionGet: async (skip?: number, top?: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SFFOJobFunction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SFFOJobFunctionApi - functional programming interface
 */
export const SFFOJobFunctionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SFFOJobFunctionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFFOJobFunctionGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FOJobFunctionSFDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFFOJobFunctionGet(skip, top, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFFOJobFunctionApi.apiSFFOJobFunctionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SFFOJobFunctionApi - factory interface
 */
export const SFFOJobFunctionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SFFOJobFunctionApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOJobFunctionGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<FOJobFunctionSFDto> {
            return localVarFp.apiSFFOJobFunctionGet(skip, top, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SFFOJobFunctionApi - object-oriented interface
 */
export class SFFOJobFunctionApi extends BaseAPI {
    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFFOJobFunctionGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig) {
        return SFFOJobFunctionApiFp(this.configuration).apiSFFOJobFunctionGet(skip, top, name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SFFOLocationApi - axios parameter creator
 */
export const SFFOLocationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [parentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOLocationGet: async (skip?: number, top?: number, name?: string, parentId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SFFOLocation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (parentId !== undefined) {
                localVarQueryParameter['parentId'] = parentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SFFOLocationApi - functional programming interface
 */
export const SFFOLocationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SFFOLocationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [parentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFFOLocationGet(skip?: number, top?: number, name?: string, parentId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FOLocationSFDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFFOLocationGet(skip, top, name, parentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFFOLocationApi.apiSFFOLocationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SFFOLocationApi - factory interface
 */
export const SFFOLocationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SFFOLocationApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [parentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOLocationGet(skip?: number, top?: number, name?: string, parentId?: string, options?: RawAxiosRequestConfig): AxiosPromise<FOLocationSFDto> {
            return localVarFp.apiSFFOLocationGet(skip, top, name, parentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SFFOLocationApi - object-oriented interface
 */
export class SFFOLocationApi extends BaseAPI {
    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [name] 
     * @param {string} [parentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFFOLocationGet(skip?: number, top?: number, name?: string, parentId?: string, options?: RawAxiosRequestConfig) {
        return SFFOLocationApiFp(this.configuration).apiSFFOLocationGet(skip, top, name, parentId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SFFOLocationGroupApi - axios parameter creator
 */
export const SFFOLocationGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOLocationGroupGet: async (skip?: number, top?: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SFFOLocationGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SFFOLocationGroupApi - functional programming interface
 */
export const SFFOLocationGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SFFOLocationGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFFOLocationGroupGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FOLocationGroupSFDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFFOLocationGroupGet(skip, top, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFFOLocationGroupApi.apiSFFOLocationGroupGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SFFOLocationGroupApi - factory interface
 */
export const SFFOLocationGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SFFOLocationGroupApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOLocationGroupGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<FOLocationGroupSFDTO> {
            return localVarFp.apiSFFOLocationGroupGet(skip, top, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SFFOLocationGroupApi - object-oriented interface
 */
export class SFFOLocationGroupApi extends BaseAPI {
    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFFOLocationGroupGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig) {
        return SFFOLocationGroupApiFp(this.configuration).apiSFFOLocationGroupGet(skip, top, name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SFFOPayGradeApi - axios parameter creator
 */
export const SFFOPayGradeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOPayGradeGet: async (skip?: number, top?: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SFFOPayGrade`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SFFOPayGradeApi - functional programming interface
 */
export const SFFOPayGradeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SFFOPayGradeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFFOPayGradeGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FOPayGradeSFDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFFOPayGradeGet(skip, top, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFFOPayGradeApi.apiSFFOPayGradeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SFFOPayGradeApi - factory interface
 */
export const SFFOPayGradeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SFFOPayGradeApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFFOPayGradeGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<FOPayGradeSFDto> {
            return localVarFp.apiSFFOPayGradeGet(skip, top, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SFFOPayGradeApi - object-oriented interface
 */
export class SFFOPayGradeApi extends BaseAPI {
    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFFOPayGradeGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig) {
        return SFFOPayGradeApiFp(this.configuration).apiSFFOPayGradeGet(skip, top, name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SFPositionsApi - axios parameter creator
 */
export const SFPositionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsByPositionCodeUserIdGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiSFPositionsByPositionCodeUserIdGet', 'userId', userId)
            const localVarPath = `/api/SFPositions/byPositionCode/{UserId}`
                .replace(`{${"UserId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {PositionSFDto} [positionSFDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsByUserIdAllUserIdPost: async (userId: string, positionSFDto?: PositionSFDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiSFPositionsByUserIdAllUserIdPost', 'userId', userId)
            const localVarPath = `/api/SFPositions/byUserIdAll/{UserId}`
                .replace(`{${"UserId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(positionSFDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsByUserIdUserIdGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiSFPositionsByUserIdUserIdGet', 'userId', userId)
            const localVarPath = `/api/SFPositions/byUserId/{UserId}`
                .replace(`{${"UserId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsCodeGet: async (code: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('apiSFPositionsCodeGet', 'code', code)
            const localVarPath = `/api/SFPositions/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsDetailByPositionCodeCodeGet: async (code: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('apiSFPositionsDetailByPositionCodeCodeGet', 'code', code)
            const localVarPath = `/api/SFPositions/detailByPositionCode/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsDetailByUserIdUserIdGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiSFPositionsDetailByUserIdUserIdGet', 'userId', userId)
            const localVarPath = `/api/SFPositions/detailByUserId/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsDetailCodeGet: async (code: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('apiSFPositionsDetailCodeGet', 'code', code)
            const localVarPath = `/api/SFPositions/detail/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsEmpCodeGet: async (code: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('apiSFPositionsEmpCodeGet', 'code', code)
            const localVarPath = `/api/SFPositions/emp/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [firstName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsGet: async (skip?: number, top?: number, firstName?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SFPositions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['firstName'] = firstName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} positioncode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsGetMngByCodeFromEmpJobPositioncodeGet: async (positioncode: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'positioncode' is not null or undefined
            assertParamExists('apiSFPositionsGetMngByCodeFromEmpJobPositioncodeGet', 'positioncode', positioncode)
            const localVarPath = `/api/SFPositions/getMngByCodeFromEmpJob/{positioncode}`
                .replace(`{${"positioncode"}}`, encodeURIComponent(String(positioncode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsGetMngDisplayNameFromEmpUserUserIdGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiSFPositionsGetMngDisplayNameFromEmpUserUserIdGet', 'userId', userId)
            const localVarPath = `/api/SFPositions/getMngDisplayNameFromEmpUser/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsGetMngFromEmpJobUserIdGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiSFPositionsGetMngFromEmpJobUserIdGet', 'userId', userId)
            const localVarPath = `/api/SFPositions/getMngFromEmpJob/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [workFlowId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsPost: async (workFlowId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SFPositions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (workFlowId !== undefined) {
                localVarQueryParameter['workFlowId'] = workFlowId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SFPositionsApi - functional programming interface
 */
export const SFPositionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SFPositionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFPositionsByPositionCodeUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFPositionsByPositionCodeUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFPositionsApi.apiSFPositionsByPositionCodeUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {PositionSFDto} [positionSFDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFPositionsByUserIdAllUserIdPost(userId: string, positionSFDto?: PositionSFDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionSFDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFPositionsByUserIdAllUserIdPost(userId, positionSFDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFPositionsApi.apiSFPositionsByUserIdAllUserIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFPositionsByUserIdUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionSFDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFPositionsByUserIdUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFPositionsApi.apiSFPositionsByUserIdUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFPositionsCodeGet(code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SFPositionAllPropertyDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFPositionsCodeGet(code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFPositionsApi.apiSFPositionsCodeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFPositionsDetailByPositionCodeCodeGet(code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FOJobCodeList>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFPositionsDetailByPositionCodeCodeGet(code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFPositionsApi.apiSFPositionsDetailByPositionCodeCodeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFPositionsDetailByUserIdUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SFPositionDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFPositionsDetailByUserIdUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFPositionsApi.apiSFPositionsDetailByUserIdUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFPositionsDetailCodeGet(code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SFPositionDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFPositionsDetailCodeGet(code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFPositionsApi.apiSFPositionsDetailCodeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFPositionsEmpCodeGet(code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SFEmpJobDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFPositionsEmpCodeGet(code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFPositionsApi.apiSFPositionsEmpCodeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [firstName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFPositionsGet(skip?: number, top?: number, firstName?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionSFDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFPositionsGet(skip, top, firstName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFPositionsApi.apiSFPositionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} positioncode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFPositionsGetMngByCodeFromEmpJobPositioncodeGet(positioncode: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFPositionsGetMngByCodeFromEmpJobPositioncodeGet(positioncode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFPositionsApi.apiSFPositionsGetMngByCodeFromEmpJobPositioncodeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFPositionsGetMngDisplayNameFromEmpUserUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFPositionsGetMngDisplayNameFromEmpUserUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFPositionsApi.apiSFPositionsGetMngDisplayNameFromEmpUserUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFPositionsGetMngFromEmpJobUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFPositionsGetMngFromEmpJobUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFPositionsApi.apiSFPositionsGetMngFromEmpJobUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [workFlowId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFPositionsPost(workFlowId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFPositionsPost(workFlowId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFPositionsApi.apiSFPositionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SFPositionsApi - factory interface
 */
export const SFPositionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SFPositionsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsByPositionCodeUserIdGet(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiSFPositionsByPositionCodeUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {PositionSFDto} [positionSFDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsByUserIdAllUserIdPost(userId: string, positionSFDto?: PositionSFDto, options?: RawAxiosRequestConfig): AxiosPromise<PositionSFDto> {
            return localVarFp.apiSFPositionsByUserIdAllUserIdPost(userId, positionSFDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsByUserIdUserIdGet(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<PositionSFDto> {
            return localVarFp.apiSFPositionsByUserIdUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsCodeGet(code: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SFPositionAllPropertyDto>> {
            return localVarFp.apiSFPositionsCodeGet(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsDetailByPositionCodeCodeGet(code: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<FOJobCodeList>> {
            return localVarFp.apiSFPositionsDetailByPositionCodeCodeGet(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsDetailByUserIdUserIdGet(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SFPositionDto>> {
            return localVarFp.apiSFPositionsDetailByUserIdUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsDetailCodeGet(code: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SFPositionDto>> {
            return localVarFp.apiSFPositionsDetailCodeGet(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsEmpCodeGet(code: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SFEmpJobDto>> {
            return localVarFp.apiSFPositionsEmpCodeGet(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [firstName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsGet(skip?: number, top?: number, firstName?: string, options?: RawAxiosRequestConfig): AxiosPromise<PositionSFDto> {
            return localVarFp.apiSFPositionsGet(skip, top, firstName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} positioncode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsGetMngByCodeFromEmpJobPositioncodeGet(positioncode: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiSFPositionsGetMngByCodeFromEmpJobPositioncodeGet(positioncode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsGetMngDisplayNameFromEmpUserUserIdGet(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiSFPositionsGetMngDisplayNameFromEmpUserUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsGetMngFromEmpJobUserIdGet(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiSFPositionsGetMngFromEmpJobUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [workFlowId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFPositionsPost(workFlowId?: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.apiSFPositionsPost(workFlowId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SFPositionsApi - object-oriented interface
 */
export class SFPositionsApi extends BaseAPI {
    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFPositionsByPositionCodeUserIdGet(userId: string, options?: RawAxiosRequestConfig) {
        return SFPositionsApiFp(this.configuration).apiSFPositionsByPositionCodeUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {PositionSFDto} [positionSFDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFPositionsByUserIdAllUserIdPost(userId: string, positionSFDto?: PositionSFDto, options?: RawAxiosRequestConfig) {
        return SFPositionsApiFp(this.configuration).apiSFPositionsByUserIdAllUserIdPost(userId, positionSFDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFPositionsByUserIdUserIdGet(userId: string, options?: RawAxiosRequestConfig) {
        return SFPositionsApiFp(this.configuration).apiSFPositionsByUserIdUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFPositionsCodeGet(code: string, options?: RawAxiosRequestConfig) {
        return SFPositionsApiFp(this.configuration).apiSFPositionsCodeGet(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFPositionsDetailByPositionCodeCodeGet(code: string, options?: RawAxiosRequestConfig) {
        return SFPositionsApiFp(this.configuration).apiSFPositionsDetailByPositionCodeCodeGet(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFPositionsDetailByUserIdUserIdGet(userId: string, options?: RawAxiosRequestConfig) {
        return SFPositionsApiFp(this.configuration).apiSFPositionsDetailByUserIdUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFPositionsDetailCodeGet(code: string, options?: RawAxiosRequestConfig) {
        return SFPositionsApiFp(this.configuration).apiSFPositionsDetailCodeGet(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFPositionsEmpCodeGet(code: string, options?: RawAxiosRequestConfig) {
        return SFPositionsApiFp(this.configuration).apiSFPositionsEmpCodeGet(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [firstName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFPositionsGet(skip?: number, top?: number, firstName?: string, options?: RawAxiosRequestConfig) {
        return SFPositionsApiFp(this.configuration).apiSFPositionsGet(skip, top, firstName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} positioncode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFPositionsGetMngByCodeFromEmpJobPositioncodeGet(positioncode: string, options?: RawAxiosRequestConfig) {
        return SFPositionsApiFp(this.configuration).apiSFPositionsGetMngByCodeFromEmpJobPositioncodeGet(positioncode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFPositionsGetMngDisplayNameFromEmpUserUserIdGet(userId: string, options?: RawAxiosRequestConfig) {
        return SFPositionsApiFp(this.configuration).apiSFPositionsGetMngDisplayNameFromEmpUserUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFPositionsGetMngFromEmpJobUserIdGet(userId: string, options?: RawAxiosRequestConfig) {
        return SFPositionsApiFp(this.configuration).apiSFPositionsGetMngFromEmpJobUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [workFlowId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFPositionsPost(workFlowId?: string, options?: RawAxiosRequestConfig) {
        return SFPositionsApiFp(this.configuration).apiSFPositionsPost(workFlowId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SFUserApi - axios parameter creator
 */
export const SFUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [firstName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFUserGet: async (skip?: number, top?: number, firstName?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SFUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['firstName'] = firstName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFUserUserUseridGet: async (userid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userid' is not null or undefined
            assertParamExists('apiSFUserUserUseridGet', 'userid', userid)
            const localVarPath = `/api/SFUser/user/{userid}`
                .replace(`{${"userid"}}`, encodeURIComponent(String(userid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SFUserApi - functional programming interface
 */
export const SFUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SFUserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [firstName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFUserGet(skip?: number, top?: number, firstName?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSFListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFUserGet(skip, top, firstName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFUserApi.apiSFUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFUserUserUseridGet(userid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSFListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFUserUserUseridGet(userid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFUserApi.apiSFUserUserUseridGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SFUserApi - factory interface
 */
export const SFUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SFUserApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [firstName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFUserGet(skip?: number, top?: number, firstName?: string, options?: RawAxiosRequestConfig): AxiosPromise<UserSFListDto> {
            return localVarFp.apiSFUserGet(skip, top, firstName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFUserUserUseridGet(userid: string, options?: RawAxiosRequestConfig): AxiosPromise<UserSFListDto> {
            return localVarFp.apiSFUserUserUseridGet(userid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SFUserApi - object-oriented interface
 */
export class SFUserApi extends BaseAPI {
    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [firstName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFUserGet(skip?: number, top?: number, firstName?: string, options?: RawAxiosRequestConfig) {
        return SFUserApiFp(this.configuration).apiSFUserGet(skip, top, firstName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFUserUserUseridGet(userid: string, options?: RawAxiosRequestConfig) {
        return SFUserApiFp(this.configuration).apiSFUserUserUseridGet(userid, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SFcustSubDivisionApi - axios parameter creator
 */
export const SFcustSubDivisionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [division] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFcustSubDivisionAllByBusinessUnitGet: async (skip?: number, top?: number, name?: string, division?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SFcust_sub_division/AllByBusinessUnit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (division !== undefined) {
                localVarQueryParameter['division'] = division;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFcustSubDivisionGet: async (skip?: number, top?: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SFcust_sub_division`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SFcustSubDivisionApi - functional programming interface
 */
export const SFcustSubDivisionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SFcustSubDivisionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [division] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFcustSubDivisionAllByBusinessUnitGet(skip?: number, top?: number, name?: string, division?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustSubDivisionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFcustSubDivisionAllByBusinessUnitGet(skip, top, name, division, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFcustSubDivisionApi.apiSFcustSubDivisionAllByBusinessUnitGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSFcustSubDivisionGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustSubDivisionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSFcustSubDivisionGet(skip, top, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SFcustSubDivisionApi.apiSFcustSubDivisionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SFcustSubDivisionApi - factory interface
 */
export const SFcustSubDivisionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SFcustSubDivisionApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {string} [division] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFcustSubDivisionAllByBusinessUnitGet(skip?: number, top?: number, name?: string, division?: string, options?: RawAxiosRequestConfig): AxiosPromise<CustSubDivisionDto> {
            return localVarFp.apiSFcustSubDivisionAllByBusinessUnitGet(skip, top, name, division, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSFcustSubDivisionGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<CustSubDivisionDto> {
            return localVarFp.apiSFcustSubDivisionGet(skip, top, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SFcustSubDivisionApi - object-oriented interface
 */
export class SFcustSubDivisionApi extends BaseAPI {
    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [name] 
     * @param {string} [division] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFcustSubDivisionAllByBusinessUnitGet(skip?: number, top?: number, name?: string, division?: string, options?: RawAxiosRequestConfig) {
        return SFcustSubDivisionApiFp(this.configuration).apiSFcustSubDivisionAllByBusinessUnitGet(skip, top, name, division, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiSFcustSubDivisionGet(skip?: number, top?: number, name?: string, options?: RawAxiosRequestConfig) {
        return SFcustSubDivisionApiFp(this.configuration).apiSFcustSubDivisionGet(skip, top, name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SpecialDaysApi - axios parameter creator
 */
export const SpecialDaysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmSpecialDaysCustomerCustomerIdGet: async (customerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiCrmSpecialDaysCustomerCustomerIdGet', 'customerId', customerId)
            const localVarPath = `/api/crm/SpecialDays/customer/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmSpecialDaysIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCrmSpecialDaysIdDelete', 'id', id)
            const localVarPath = `/api/crm/SpecialDays/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmSpecialDaysIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCrmSpecialDaysIdGet', 'id', id)
            const localVarPath = `/api/crm/SpecialDays/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SpecialDayDto} [specialDayDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmSpecialDaysPost: async (specialDayDto?: SpecialDayDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/crm/SpecialDays`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(specialDayDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SpecialDayDto} [specialDayDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmSpecialDaysPut: async (specialDayDto?: SpecialDayDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/crm/SpecialDays`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(specialDayDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpecialDaysApi - functional programming interface
 */
export const SpecialDaysApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpecialDaysApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmSpecialDaysCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmSpecialDaysCustomerCustomerIdGet(customerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpecialDaysApi.apiCrmSpecialDaysCustomerCustomerIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmSpecialDaysIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmSpecialDaysIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpecialDaysApi.apiCrmSpecialDaysIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmSpecialDaysIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmSpecialDaysIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpecialDaysApi.apiCrmSpecialDaysIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SpecialDayDto} [specialDayDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmSpecialDaysPost(specialDayDto?: SpecialDayDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmSpecialDaysPost(specialDayDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpecialDaysApi.apiCrmSpecialDaysPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SpecialDayDto} [specialDayDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCrmSpecialDaysPut(specialDayDto?: SpecialDayDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCrmSpecialDaysPut(specialDayDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpecialDaysApi.apiCrmSpecialDaysPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SpecialDaysApi - factory interface
 */
export const SpecialDaysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpecialDaysApiFp(configuration)
    return {
        /**
         * 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmSpecialDaysCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmSpecialDaysCustomerCustomerIdGet(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmSpecialDaysIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmSpecialDaysIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmSpecialDaysIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmSpecialDaysIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SpecialDayDto} [specialDayDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmSpecialDaysPost(specialDayDto?: SpecialDayDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmSpecialDaysPost(specialDayDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SpecialDayDto} [specialDayDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCrmSpecialDaysPut(specialDayDto?: SpecialDayDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCrmSpecialDaysPut(specialDayDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpecialDaysApi - object-oriented interface
 */
export class SpecialDaysApi extends BaseAPI {
    /**
     * 
     * @param {string} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmSpecialDaysCustomerCustomerIdGet(customerId: string, options?: RawAxiosRequestConfig) {
        return SpecialDaysApiFp(this.configuration).apiCrmSpecialDaysCustomerCustomerIdGet(customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmSpecialDaysIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return SpecialDaysApiFp(this.configuration).apiCrmSpecialDaysIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmSpecialDaysIdGet(id: string, options?: RawAxiosRequestConfig) {
        return SpecialDaysApiFp(this.configuration).apiCrmSpecialDaysIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SpecialDayDto} [specialDayDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmSpecialDaysPost(specialDayDto?: SpecialDayDto, options?: RawAxiosRequestConfig) {
        return SpecialDaysApiFp(this.configuration).apiCrmSpecialDaysPost(specialDayDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SpecialDayDto} [specialDayDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiCrmSpecialDaysPut(specialDayDto?: SpecialDayDto, options?: RawAxiosRequestConfig) {
        return SpecialDaysApiFp(this.configuration).apiCrmSpecialDaysPut(specialDayDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TicketApi - axios parameter creator
 */
export const TicketApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {TicketCommentInsertDto} [ticketCommentInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketAddCommentPost: async (id?: string, ticketCommentInsertDto?: TicketCommentInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket/AddComment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ticketCommentInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TicketManagerUpdateDto} [ticketManagerUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketAssignPost: async (ticketManagerUpdateDto?: TicketManagerUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket/Assign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ticketManagerUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketCheckOthercompanypermGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket/check-othercompanyperm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketCheckPermGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket/check-perm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [insertDtoTicketCode] 
         * @param {string} [insertDtoTitle] 
         * @param {string} [insertDtoDescription] 
         * @param {string} [insertDtoWorkCompanyId] 
         * @param {string} [insertDtoWorkCompanySystemInfoId] 
         * @param {string} [insertDtoUserAppId] 
         * @param {TicketType} [insertDtoType] 
         * @param {TicketSLA} [insertDtoTicketSLA] 
         * @param {TicketSubject} [insertDtoTicketSubject] 
         * @param {TicketPriority} [insertDtoPriority] 
         * @param {Array<TicketCommentInsertDto>} [insertDtoTicketComment] 
         * @param {boolean} [insertDtoIsSend] 
         * @param {string} [insertDtoCustomerRefId] 
         * @param {boolean} [insertDtoIsFromEmail] 
         * @param {string} [insertDtoMailConversationId] 
         * @param {string} [insertDtoAddedMailAddresses] 
         * @param {boolean} [insertDtoIsFilePath] 
         * @param {string} [insertDtoFilePath] 
         * @param {string} [updateDtoId] 
         * @param {string} [updateDtoTicketCode] 
         * @param {string} [updateDtoTitle] 
         * @param {string} [updateDtoDescription] 
         * @param {string} [updateDtoWorkCompanyId] 
         * @param {string} [updateDtoWorkCompanySystemInfoId] 
         * @param {string} [updateDtoUserAppId] 
         * @param {TicketType} [updateDtoType] 
         * @param {TicketSLA} [updateDtoTicketSLA] 
         * @param {TicketSubject} [updateDtoTicketSubject] 
         * @param {TicketStatus} [updateDtoStatus] 
         * @param {TicketPriority} [updateDtoPriority] 
         * @param {string} [updateDtoTicketDepartmentId] 
         * @param {boolean} [updateDtoIsSend] 
         * @param {string} [updateDtoCustomerRefId] 
         * @param {string} [updateDtoAddedMailAddresses] 
         * @param {string} [updateDtoEstimatedDeadline] 
         * @param {string} [updateDtoTicketProjectId] 
         * @param {number} [createEnvironment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketCheckRuleEnginePatch: async (insertDtoTicketCode?: string, insertDtoTitle?: string, insertDtoDescription?: string, insertDtoWorkCompanyId?: string, insertDtoWorkCompanySystemInfoId?: string, insertDtoUserAppId?: string, insertDtoType?: TicketType, insertDtoTicketSLA?: TicketSLA, insertDtoTicketSubject?: TicketSubject, insertDtoPriority?: TicketPriority, insertDtoTicketComment?: Array<TicketCommentInsertDto>, insertDtoIsSend?: boolean, insertDtoCustomerRefId?: string, insertDtoIsFromEmail?: boolean, insertDtoMailConversationId?: string, insertDtoAddedMailAddresses?: string, insertDtoIsFilePath?: boolean, insertDtoFilePath?: string, updateDtoId?: string, updateDtoTicketCode?: string, updateDtoTitle?: string, updateDtoDescription?: string, updateDtoWorkCompanyId?: string, updateDtoWorkCompanySystemInfoId?: string, updateDtoUserAppId?: string, updateDtoType?: TicketType, updateDtoTicketSLA?: TicketSLA, updateDtoTicketSubject?: TicketSubject, updateDtoStatus?: TicketStatus, updateDtoPriority?: TicketPriority, updateDtoTicketDepartmentId?: string, updateDtoIsSend?: boolean, updateDtoCustomerRefId?: string, updateDtoAddedMailAddresses?: string, updateDtoEstimatedDeadline?: string, updateDtoTicketProjectId?: string, createEnvironment?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket/CheckRuleEngine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (insertDtoTicketCode !== undefined) {
                localVarQueryParameter['insertDto.TicketCode'] = insertDtoTicketCode;
            }

            if (insertDtoTitle !== undefined) {
                localVarQueryParameter['insertDto.Title'] = insertDtoTitle;
            }

            if (insertDtoDescription !== undefined) {
                localVarQueryParameter['insertDto.Description'] = insertDtoDescription;
            }

            if (insertDtoWorkCompanyId !== undefined) {
                localVarQueryParameter['insertDto.WorkCompanyId'] = insertDtoWorkCompanyId;
            }

            if (insertDtoWorkCompanySystemInfoId !== undefined) {
                localVarQueryParameter['insertDto.WorkCompanySystemInfoId'] = insertDtoWorkCompanySystemInfoId;
            }

            if (insertDtoUserAppId !== undefined) {
                localVarQueryParameter['insertDto.UserAppId'] = insertDtoUserAppId;
            }

            if (insertDtoType !== undefined) {
                localVarQueryParameter['insertDto.Type'] = insertDtoType;
            }

            if (insertDtoTicketSLA !== undefined) {
                localVarQueryParameter['insertDto.TicketSLA'] = insertDtoTicketSLA;
            }

            if (insertDtoTicketSubject !== undefined) {
                localVarQueryParameter['insertDto.TicketSubject'] = insertDtoTicketSubject;
            }

            if (insertDtoPriority !== undefined) {
                localVarQueryParameter['insertDto.Priority'] = insertDtoPriority;
            }

            if (insertDtoTicketComment) {
                localVarQueryParameter['insertDto.TicketComment'] = insertDtoTicketComment;
            }

            if (insertDtoIsSend !== undefined) {
                localVarQueryParameter['insertDto.isSend'] = insertDtoIsSend;
            }

            if (insertDtoCustomerRefId !== undefined) {
                localVarQueryParameter['insertDto.CustomerRefId'] = insertDtoCustomerRefId;
            }

            if (insertDtoIsFromEmail !== undefined) {
                localVarQueryParameter['insertDto.IsFromEmail'] = insertDtoIsFromEmail;
            }

            if (insertDtoMailConversationId !== undefined) {
                localVarQueryParameter['insertDto.MailConversationId'] = insertDtoMailConversationId;
            }

            if (insertDtoAddedMailAddresses !== undefined) {
                localVarQueryParameter['insertDto.AddedMailAddresses'] = insertDtoAddedMailAddresses;
            }

            if (insertDtoIsFilePath !== undefined) {
                localVarQueryParameter['insertDto.IsFilePath'] = insertDtoIsFilePath;
            }

            if (insertDtoFilePath !== undefined) {
                localVarQueryParameter['insertDto.FilePath'] = insertDtoFilePath;
            }

            if (updateDtoId !== undefined) {
                localVarQueryParameter['updateDto.Id'] = updateDtoId;
            }

            if (updateDtoTicketCode !== undefined) {
                localVarQueryParameter['updateDto.TicketCode'] = updateDtoTicketCode;
            }

            if (updateDtoTitle !== undefined) {
                localVarQueryParameter['updateDto.Title'] = updateDtoTitle;
            }

            if (updateDtoDescription !== undefined) {
                localVarQueryParameter['updateDto.Description'] = updateDtoDescription;
            }

            if (updateDtoWorkCompanyId !== undefined) {
                localVarQueryParameter['updateDto.WorkCompanyId'] = updateDtoWorkCompanyId;
            }

            if (updateDtoWorkCompanySystemInfoId !== undefined) {
                localVarQueryParameter['updateDto.WorkCompanySystemInfoId'] = updateDtoWorkCompanySystemInfoId;
            }

            if (updateDtoUserAppId !== undefined) {
                localVarQueryParameter['updateDto.UserAppId'] = updateDtoUserAppId;
            }

            if (updateDtoType !== undefined) {
                localVarQueryParameter['updateDto.Type'] = updateDtoType;
            }

            if (updateDtoTicketSLA !== undefined) {
                localVarQueryParameter['updateDto.TicketSLA'] = updateDtoTicketSLA;
            }

            if (updateDtoTicketSubject !== undefined) {
                localVarQueryParameter['updateDto.TicketSubject'] = updateDtoTicketSubject;
            }

            if (updateDtoStatus !== undefined) {
                localVarQueryParameter['updateDto.Status'] = updateDtoStatus;
            }

            if (updateDtoPriority !== undefined) {
                localVarQueryParameter['updateDto.Priority'] = updateDtoPriority;
            }

            if (updateDtoTicketDepartmentId !== undefined) {
                localVarQueryParameter['updateDto.TicketDepartmentId'] = updateDtoTicketDepartmentId;
            }

            if (updateDtoIsSend !== undefined) {
                localVarQueryParameter['updateDto.isSend'] = updateDtoIsSend;
            }

            if (updateDtoCustomerRefId !== undefined) {
                localVarQueryParameter['updateDto.CustomerRefId'] = updateDtoCustomerRefId;
            }

            if (updateDtoAddedMailAddresses !== undefined) {
                localVarQueryParameter['updateDto.AddedMailAddresses'] = updateDtoAddedMailAddresses;
            }

            if (updateDtoEstimatedDeadline !== undefined) {
                localVarQueryParameter['updateDto.EstimatedDeadline'] = (updateDtoEstimatedDeadline as any instanceof Date) ?
                    (updateDtoEstimatedDeadline as any).toISOString() :
                    updateDtoEstimatedDeadline;
            }

            if (updateDtoTicketProjectId !== undefined) {
                localVarQueryParameter['updateDto.TicketProjectId'] = updateDtoTicketProjectId;
            }

            if (createEnvironment !== undefined) {
                localVarQueryParameter['createEnvironment'] = createEnvironment;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDeleteAllSentEmailsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket/DeleteAllSentEmails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [pageDesc] 
         * @param {Array<string>} [statues] 
         * @param {string} [workCompanyId] 
         * @param {string} [assignedUser] 
         * @param {string} [assignedTeam] 
         * @param {string} [type] 
         * @param {string} [endDate] 
         * @param {string} [startDate] 
         * @param {string} [creator] 
         * @param {string} [customer] 
         * @param {boolean} [closeInc] 
         * @param {string} [title] 
         * @param {Array<string>} [departmentId] 
         * @param {Array<string>} [ticketProjectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketExcelExportGet: async (pageDesc?: string, statues?: Array<string>, workCompanyId?: string, assignedUser?: string, assignedTeam?: string, type?: string, endDate?: string, startDate?: string, creator?: string, customer?: string, closeInc?: boolean, title?: string, departmentId?: Array<string>, ticketProjectId?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket/ExcelExport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageDesc !== undefined) {
                localVarQueryParameter['pageDesc'] = pageDesc;
            }

            if (statues) {
                localVarQueryParameter['statues'] = statues;
            }

            if (workCompanyId !== undefined) {
                localVarQueryParameter['workCompanyId'] = workCompanyId;
            }

            if (assignedUser !== undefined) {
                localVarQueryParameter['assignedUser'] = assignedUser;
            }

            if (assignedTeam !== undefined) {
                localVarQueryParameter['assignedTeam'] = assignedTeam;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (creator !== undefined) {
                localVarQueryParameter['creator'] = creator;
            }

            if (customer !== undefined) {
                localVarQueryParameter['customer'] = customer;
            }

            if (closeInc !== undefined) {
                localVarQueryParameter['closeInc'] = closeInc;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (departmentId) {
                localVarQueryParameter['departmentId'] = departmentId;
            }

            if (ticketProjectId) {
                localVarQueryParameter['ticketProjectId'] = ticketProjectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [pageDesc] 
         * @param {Array<string>} [statues] 
         * @param {string} [workCompanyId] 
         * @param {string} [assignedUser] 
         * @param {string} [assignedTeam] 
         * @param {string} [type] 
         * @param {string} [endDate] 
         * @param {string} [startDate] 
         * @param {string} [creator] 
         * @param {string} [customer] 
         * @param {boolean} [closeInc] 
         * @param {string} [title] 
         * @param {Array<string>} [departmentId] 
         * @param {Array<string>} [ticketProjectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketFilteredAllTicketsGet: async (skip?: number, top?: number, pageDesc?: string, statues?: Array<string>, workCompanyId?: string, assignedUser?: string, assignedTeam?: string, type?: string, endDate?: string, startDate?: string, creator?: string, customer?: string, closeInc?: boolean, title?: string, departmentId?: Array<string>, ticketProjectId?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket/FilteredAllTickets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (pageDesc !== undefined) {
                localVarQueryParameter['pageDesc'] = pageDesc;
            }

            if (statues) {
                localVarQueryParameter['statues'] = statues;
            }

            if (workCompanyId !== undefined) {
                localVarQueryParameter['workCompanyId'] = workCompanyId;
            }

            if (assignedUser !== undefined) {
                localVarQueryParameter['assignedUser'] = assignedUser;
            }

            if (assignedTeam !== undefined) {
                localVarQueryParameter['assignedTeam'] = assignedTeam;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (creator !== undefined) {
                localVarQueryParameter['creator'] = creator;
            }

            if (customer !== undefined) {
                localVarQueryParameter['customer'] = customer;
            }

            if (closeInc !== undefined) {
                localVarQueryParameter['closeInc'] = closeInc;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (departmentId) {
                localVarQueryParameter['departmentId'] = departmentId;
            }

            if (ticketProjectId) {
                localVarQueryParameter['ticketProjectId'] = ticketProjectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketGetAssignTicketsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket/GetAssignTickets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [ticketId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketGetAssingListGet: async (ticketId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket/GetAssingList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (ticketId !== undefined) {
                localVarQueryParameter['ticketId'] = ticketId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketGetFileGet: async (id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket/GetFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketGetTicketPdfIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTicketGetTicketPdfIdGet', 'id', id)
            const localVarPath = `/api/Ticket/getTicketPdf/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTicketIdDelete', 'id', id)
            const localVarPath = `/api/Ticket/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTicketIdGet', 'id', id)
            const localVarPath = `/api/Ticket/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [createEnvironment] 
         * @param {Array<string>} [ccRecipients] 
         * @param {TicketInsertDto} [ticketInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketPost: async (createEnvironment?: number, ccRecipients?: Array<string>, ticketInsertDto?: TicketInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (createEnvironment !== undefined) {
                localVarQueryParameter['createEnvironment'] = createEnvironment;
            }

            if (ccRecipients) {
                localVarQueryParameter['ccRecipients'] = ccRecipients;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ticketInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TicketUpdateDto} [ticketUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketPut: async (ticketUpdateDto?: TicketUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ticketUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketReadMailsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket/ReadMails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [pageDesc] 
         * @param {string} [talepNo] 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketSearchTicketGet: async (pageDesc?: string, talepNo?: string, skip?: number, top?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket/SearchTicket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageDesc !== undefined) {
                localVarQueryParameter['pageDesc'] = pageDesc;
            }

            if (talepNo !== undefined) {
                localVarQueryParameter['talepNo'] = talepNo;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketTicketPrioritiesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket/ticket-priorities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketTicketSLAGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket/TicketSLA`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketTicketStatusGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket/ticket-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketTicketSubjectGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket/TicketSubject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketTicketTypeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket/TicketType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [createEnvironment] 
         * @param {boolean} [isEdit] 
         * @param {TicketUpdateDto} [ticketUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketUpdateStartTicketPost: async (createEnvironment?: number, isEdit?: boolean, ticketUpdateDto?: TicketUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket/UpdateStartTicket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (createEnvironment !== undefined) {
                localVarQueryParameter['createEnvironment'] = createEnvironment;
            }

            if (isEdit !== undefined) {
                localVarQueryParameter['isEdit'] = isEdit;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ticketUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TicketApi - functional programming interface
 */
export const TicketApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TicketApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {TicketCommentInsertDto} [ticketCommentInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketAddCommentPost(id?: string, ticketCommentInsertDto?: TicketCommentInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketAddCommentPost(id, ticketCommentInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketAddCommentPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TicketManagerUpdateDto} [ticketManagerUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketAssignPost(ticketManagerUpdateDto?: TicketManagerUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketAssignPost(ticketManagerUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketAssignPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketCheckOthercompanypermGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketPermDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketCheckOthercompanypermGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketCheckOthercompanypermGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketCheckPermGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketPermDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketCheckPermGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketCheckPermGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [insertDtoTicketCode] 
         * @param {string} [insertDtoTitle] 
         * @param {string} [insertDtoDescription] 
         * @param {string} [insertDtoWorkCompanyId] 
         * @param {string} [insertDtoWorkCompanySystemInfoId] 
         * @param {string} [insertDtoUserAppId] 
         * @param {TicketType} [insertDtoType] 
         * @param {TicketSLA} [insertDtoTicketSLA] 
         * @param {TicketSubject} [insertDtoTicketSubject] 
         * @param {TicketPriority} [insertDtoPriority] 
         * @param {Array<TicketCommentInsertDto>} [insertDtoTicketComment] 
         * @param {boolean} [insertDtoIsSend] 
         * @param {string} [insertDtoCustomerRefId] 
         * @param {boolean} [insertDtoIsFromEmail] 
         * @param {string} [insertDtoMailConversationId] 
         * @param {string} [insertDtoAddedMailAddresses] 
         * @param {boolean} [insertDtoIsFilePath] 
         * @param {string} [insertDtoFilePath] 
         * @param {string} [updateDtoId] 
         * @param {string} [updateDtoTicketCode] 
         * @param {string} [updateDtoTitle] 
         * @param {string} [updateDtoDescription] 
         * @param {string} [updateDtoWorkCompanyId] 
         * @param {string} [updateDtoWorkCompanySystemInfoId] 
         * @param {string} [updateDtoUserAppId] 
         * @param {TicketType} [updateDtoType] 
         * @param {TicketSLA} [updateDtoTicketSLA] 
         * @param {TicketSubject} [updateDtoTicketSubject] 
         * @param {TicketStatus} [updateDtoStatus] 
         * @param {TicketPriority} [updateDtoPriority] 
         * @param {string} [updateDtoTicketDepartmentId] 
         * @param {boolean} [updateDtoIsSend] 
         * @param {string} [updateDtoCustomerRefId] 
         * @param {string} [updateDtoAddedMailAddresses] 
         * @param {string} [updateDtoEstimatedDeadline] 
         * @param {string} [updateDtoTicketProjectId] 
         * @param {number} [createEnvironment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketCheckRuleEnginePatch(insertDtoTicketCode?: string, insertDtoTitle?: string, insertDtoDescription?: string, insertDtoWorkCompanyId?: string, insertDtoWorkCompanySystemInfoId?: string, insertDtoUserAppId?: string, insertDtoType?: TicketType, insertDtoTicketSLA?: TicketSLA, insertDtoTicketSubject?: TicketSubject, insertDtoPriority?: TicketPriority, insertDtoTicketComment?: Array<TicketCommentInsertDto>, insertDtoIsSend?: boolean, insertDtoCustomerRefId?: string, insertDtoIsFromEmail?: boolean, insertDtoMailConversationId?: string, insertDtoAddedMailAddresses?: string, insertDtoIsFilePath?: boolean, insertDtoFilePath?: string, updateDtoId?: string, updateDtoTicketCode?: string, updateDtoTitle?: string, updateDtoDescription?: string, updateDtoWorkCompanyId?: string, updateDtoWorkCompanySystemInfoId?: string, updateDtoUserAppId?: string, updateDtoType?: TicketType, updateDtoTicketSLA?: TicketSLA, updateDtoTicketSubject?: TicketSubject, updateDtoStatus?: TicketStatus, updateDtoPriority?: TicketPriority, updateDtoTicketDepartmentId?: string, updateDtoIsSend?: boolean, updateDtoCustomerRefId?: string, updateDtoAddedMailAddresses?: string, updateDtoEstimatedDeadline?: string, updateDtoTicketProjectId?: string, createEnvironment?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketRuleEngineListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketCheckRuleEnginePatch(insertDtoTicketCode, insertDtoTitle, insertDtoDescription, insertDtoWorkCompanyId, insertDtoWorkCompanySystemInfoId, insertDtoUserAppId, insertDtoType, insertDtoTicketSLA, insertDtoTicketSubject, insertDtoPriority, insertDtoTicketComment, insertDtoIsSend, insertDtoCustomerRefId, insertDtoIsFromEmail, insertDtoMailConversationId, insertDtoAddedMailAddresses, insertDtoIsFilePath, insertDtoFilePath, updateDtoId, updateDtoTicketCode, updateDtoTitle, updateDtoDescription, updateDtoWorkCompanyId, updateDtoWorkCompanySystemInfoId, updateDtoUserAppId, updateDtoType, updateDtoTicketSLA, updateDtoTicketSubject, updateDtoStatus, updateDtoPriority, updateDtoTicketDepartmentId, updateDtoIsSend, updateDtoCustomerRefId, updateDtoAddedMailAddresses, updateDtoEstimatedDeadline, updateDtoTicketProjectId, createEnvironment, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketCheckRuleEnginePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketDeleteAllSentEmailsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketDeleteAllSentEmailsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketDeleteAllSentEmailsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [pageDesc] 
         * @param {Array<string>} [statues] 
         * @param {string} [workCompanyId] 
         * @param {string} [assignedUser] 
         * @param {string} [assignedTeam] 
         * @param {string} [type] 
         * @param {string} [endDate] 
         * @param {string} [startDate] 
         * @param {string} [creator] 
         * @param {string} [customer] 
         * @param {boolean} [closeInc] 
         * @param {string} [title] 
         * @param {Array<string>} [departmentId] 
         * @param {Array<string>} [ticketProjectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketExcelExportGet(pageDesc?: string, statues?: Array<string>, workCompanyId?: string, assignedUser?: string, assignedTeam?: string, type?: string, endDate?: string, startDate?: string, creator?: string, customer?: string, closeInc?: boolean, title?: string, departmentId?: Array<string>, ticketProjectId?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExcelAndGraphicData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketExcelExportGet(pageDesc, statues, workCompanyId, assignedUser, assignedTeam, type, endDate, startDate, creator, customer, closeInc, title, departmentId, ticketProjectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketExcelExportGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [pageDesc] 
         * @param {Array<string>} [statues] 
         * @param {string} [workCompanyId] 
         * @param {string} [assignedUser] 
         * @param {string} [assignedTeam] 
         * @param {string} [type] 
         * @param {string} [endDate] 
         * @param {string} [startDate] 
         * @param {string} [creator] 
         * @param {string} [customer] 
         * @param {boolean} [closeInc] 
         * @param {string} [title] 
         * @param {Array<string>} [departmentId] 
         * @param {Array<string>} [ticketProjectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketFilteredAllTicketsGet(skip?: number, top?: number, pageDesc?: string, statues?: Array<string>, workCompanyId?: string, assignedUser?: string, assignedTeam?: string, type?: string, endDate?: string, startDate?: string, creator?: string, customer?: string, closeInc?: boolean, title?: string, departmentId?: Array<string>, ticketProjectId?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketDtoResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketFilteredAllTicketsGet(skip, top, pageDesc, statues, workCompanyId, assignedUser, assignedTeam, type, endDate, startDate, creator, customer, closeInc, title, departmentId, ticketProjectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketFilteredAllTicketsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TicketListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketGetAssignTicketsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TicketListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketGetAssignTicketsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketGetAssignTicketsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [ticketId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketGetAssingListGet(ticketId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TicketAssigneListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketGetAssingListGet(ticketId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketGetAssingListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketGetFileGet(id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketFileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketGetFileGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketGetFileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketGetTicketPdfIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketGetTicketPdfIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketGetTicketPdfIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [createEnvironment] 
         * @param {Array<string>} [ccRecipients] 
         * @param {TicketInsertDto} [ticketInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketPost(createEnvironment?: number, ccRecipients?: Array<string>, ticketInsertDto?: TicketInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketPost(createEnvironment, ccRecipients, ticketInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TicketUpdateDto} [ticketUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketPut(ticketUpdateDto?: TicketUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketPut(ticketUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketReadMailsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketReadMailsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketReadMailsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [pageDesc] 
         * @param {string} [talepNo] 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketSearchTicketGet(pageDesc?: string, talepNo?: string, skip?: number, top?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketDtoResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketSearchTicketGet(pageDesc, talepNo, skip, top, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketSearchTicketGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketTicketPrioritiesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketTicketPrioritiesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketTicketPrioritiesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketTicketSLAGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketTicketSLAGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketTicketSLAGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketTicketStatusGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketTicketStatusGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketTicketStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketTicketSubjectGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketTicketSubjectGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketTicketSubjectGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketTicketTypeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketTicketTypeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketTicketTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [createEnvironment] 
         * @param {boolean} [isEdit] 
         * @param {TicketUpdateDto} [ticketUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketUpdateStartTicketPost(createEnvironment?: number, isEdit?: boolean, ticketUpdateDto?: TicketUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketUpdateStartTicketPost(createEnvironment, isEdit, ticketUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketUpdateStartTicketPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TicketApi - factory interface
 */
export const TicketApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TicketApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {TicketCommentInsertDto} [ticketCommentInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketAddCommentPost(id?: string, ticketCommentInsertDto?: TicketCommentInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketAddCommentPost(id, ticketCommentInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TicketManagerUpdateDto} [ticketManagerUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketAssignPost(ticketManagerUpdateDto?: TicketManagerUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketAssignPost(ticketManagerUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketCheckOthercompanypermGet(options?: RawAxiosRequestConfig): AxiosPromise<TicketPermDto> {
            return localVarFp.apiTicketCheckOthercompanypermGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketCheckPermGet(options?: RawAxiosRequestConfig): AxiosPromise<TicketPermDto> {
            return localVarFp.apiTicketCheckPermGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [insertDtoTicketCode] 
         * @param {string} [insertDtoTitle] 
         * @param {string} [insertDtoDescription] 
         * @param {string} [insertDtoWorkCompanyId] 
         * @param {string} [insertDtoWorkCompanySystemInfoId] 
         * @param {string} [insertDtoUserAppId] 
         * @param {TicketType} [insertDtoType] 
         * @param {TicketSLA} [insertDtoTicketSLA] 
         * @param {TicketSubject} [insertDtoTicketSubject] 
         * @param {TicketPriority} [insertDtoPriority] 
         * @param {Array<TicketCommentInsertDto>} [insertDtoTicketComment] 
         * @param {boolean} [insertDtoIsSend] 
         * @param {string} [insertDtoCustomerRefId] 
         * @param {boolean} [insertDtoIsFromEmail] 
         * @param {string} [insertDtoMailConversationId] 
         * @param {string} [insertDtoAddedMailAddresses] 
         * @param {boolean} [insertDtoIsFilePath] 
         * @param {string} [insertDtoFilePath] 
         * @param {string} [updateDtoId] 
         * @param {string} [updateDtoTicketCode] 
         * @param {string} [updateDtoTitle] 
         * @param {string} [updateDtoDescription] 
         * @param {string} [updateDtoWorkCompanyId] 
         * @param {string} [updateDtoWorkCompanySystemInfoId] 
         * @param {string} [updateDtoUserAppId] 
         * @param {TicketType} [updateDtoType] 
         * @param {TicketSLA} [updateDtoTicketSLA] 
         * @param {TicketSubject} [updateDtoTicketSubject] 
         * @param {TicketStatus} [updateDtoStatus] 
         * @param {TicketPriority} [updateDtoPriority] 
         * @param {string} [updateDtoTicketDepartmentId] 
         * @param {boolean} [updateDtoIsSend] 
         * @param {string} [updateDtoCustomerRefId] 
         * @param {string} [updateDtoAddedMailAddresses] 
         * @param {string} [updateDtoEstimatedDeadline] 
         * @param {string} [updateDtoTicketProjectId] 
         * @param {number} [createEnvironment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketCheckRuleEnginePatch(insertDtoTicketCode?: string, insertDtoTitle?: string, insertDtoDescription?: string, insertDtoWorkCompanyId?: string, insertDtoWorkCompanySystemInfoId?: string, insertDtoUserAppId?: string, insertDtoType?: TicketType, insertDtoTicketSLA?: TicketSLA, insertDtoTicketSubject?: TicketSubject, insertDtoPriority?: TicketPriority, insertDtoTicketComment?: Array<TicketCommentInsertDto>, insertDtoIsSend?: boolean, insertDtoCustomerRefId?: string, insertDtoIsFromEmail?: boolean, insertDtoMailConversationId?: string, insertDtoAddedMailAddresses?: string, insertDtoIsFilePath?: boolean, insertDtoFilePath?: string, updateDtoId?: string, updateDtoTicketCode?: string, updateDtoTitle?: string, updateDtoDescription?: string, updateDtoWorkCompanyId?: string, updateDtoWorkCompanySystemInfoId?: string, updateDtoUserAppId?: string, updateDtoType?: TicketType, updateDtoTicketSLA?: TicketSLA, updateDtoTicketSubject?: TicketSubject, updateDtoStatus?: TicketStatus, updateDtoPriority?: TicketPriority, updateDtoTicketDepartmentId?: string, updateDtoIsSend?: boolean, updateDtoCustomerRefId?: string, updateDtoAddedMailAddresses?: string, updateDtoEstimatedDeadline?: string, updateDtoTicketProjectId?: string, createEnvironment?: number, options?: RawAxiosRequestConfig): AxiosPromise<TicketRuleEngineListDto> {
            return localVarFp.apiTicketCheckRuleEnginePatch(insertDtoTicketCode, insertDtoTitle, insertDtoDescription, insertDtoWorkCompanyId, insertDtoWorkCompanySystemInfoId, insertDtoUserAppId, insertDtoType, insertDtoTicketSLA, insertDtoTicketSubject, insertDtoPriority, insertDtoTicketComment, insertDtoIsSend, insertDtoCustomerRefId, insertDtoIsFromEmail, insertDtoMailConversationId, insertDtoAddedMailAddresses, insertDtoIsFilePath, insertDtoFilePath, updateDtoId, updateDtoTicketCode, updateDtoTitle, updateDtoDescription, updateDtoWorkCompanyId, updateDtoWorkCompanySystemInfoId, updateDtoUserAppId, updateDtoType, updateDtoTicketSLA, updateDtoTicketSubject, updateDtoStatus, updateDtoPriority, updateDtoTicketDepartmentId, updateDtoIsSend, updateDtoCustomerRefId, updateDtoAddedMailAddresses, updateDtoEstimatedDeadline, updateDtoTicketProjectId, createEnvironment, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDeleteAllSentEmailsGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketDeleteAllSentEmailsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [pageDesc] 
         * @param {Array<string>} [statues] 
         * @param {string} [workCompanyId] 
         * @param {string} [assignedUser] 
         * @param {string} [assignedTeam] 
         * @param {string} [type] 
         * @param {string} [endDate] 
         * @param {string} [startDate] 
         * @param {string} [creator] 
         * @param {string} [customer] 
         * @param {boolean} [closeInc] 
         * @param {string} [title] 
         * @param {Array<string>} [departmentId] 
         * @param {Array<string>} [ticketProjectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketExcelExportGet(pageDesc?: string, statues?: Array<string>, workCompanyId?: string, assignedUser?: string, assignedTeam?: string, type?: string, endDate?: string, startDate?: string, creator?: string, customer?: string, closeInc?: boolean, title?: string, departmentId?: Array<string>, ticketProjectId?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<ExcelAndGraphicData> {
            return localVarFp.apiTicketExcelExportGet(pageDesc, statues, workCompanyId, assignedUser, assignedTeam, type, endDate, startDate, creator, customer, closeInc, title, departmentId, ticketProjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {string} [pageDesc] 
         * @param {Array<string>} [statues] 
         * @param {string} [workCompanyId] 
         * @param {string} [assignedUser] 
         * @param {string} [assignedTeam] 
         * @param {string} [type] 
         * @param {string} [endDate] 
         * @param {string} [startDate] 
         * @param {string} [creator] 
         * @param {string} [customer] 
         * @param {boolean} [closeInc] 
         * @param {string} [title] 
         * @param {Array<string>} [departmentId] 
         * @param {Array<string>} [ticketProjectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketFilteredAllTicketsGet(skip?: number, top?: number, pageDesc?: string, statues?: Array<string>, workCompanyId?: string, assignedUser?: string, assignedTeam?: string, type?: string, endDate?: string, startDate?: string, creator?: string, customer?: string, closeInc?: boolean, title?: string, departmentId?: Array<string>, ticketProjectId?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<TicketDtoResult> {
            return localVarFp.apiTicketFilteredAllTicketsGet(skip, top, pageDesc, statues, workCompanyId, assignedUser, assignedTeam, type, endDate, startDate, creator, customer, closeInc, title, departmentId, ticketProjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<TicketListDto>> {
            return localVarFp.apiTicketGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketGetAssignTicketsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<TicketListDto>> {
            return localVarFp.apiTicketGetAssignTicketsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [ticketId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketGetAssingListGet(ticketId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<TicketAssigneListDto>> {
            return localVarFp.apiTicketGetAssingListGet(ticketId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketGetFileGet(id?: string, options?: RawAxiosRequestConfig): AxiosPromise<TicketFileDto> {
            return localVarFp.apiTicketGetFileGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketGetTicketPdfIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiTicketGetTicketPdfIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<TicketListDto> {
            return localVarFp.apiTicketIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [createEnvironment] 
         * @param {Array<string>} [ccRecipients] 
         * @param {TicketInsertDto} [ticketInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketPost(createEnvironment?: number, ccRecipients?: Array<string>, ticketInsertDto?: TicketInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketPost(createEnvironment, ccRecipients, ticketInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TicketUpdateDto} [ticketUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketPut(ticketUpdateDto?: TicketUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketPut(ticketUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketReadMailsGet(options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.apiTicketReadMailsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [pageDesc] 
         * @param {string} [talepNo] 
         * @param {number} [skip] 
         * @param {number} [top] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketSearchTicketGet(pageDesc?: string, talepNo?: string, skip?: number, top?: number, options?: RawAxiosRequestConfig): AxiosPromise<TicketDtoResult> {
            return localVarFp.apiTicketSearchTicketGet(pageDesc, talepNo, skip, top, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketTicketPrioritiesGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketTicketPrioritiesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketTicketSLAGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketTicketSLAGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketTicketStatusGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketTicketStatusGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketTicketSubjectGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketTicketSubjectGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketTicketTypeGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketTicketTypeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [createEnvironment] 
         * @param {boolean} [isEdit] 
         * @param {TicketUpdateDto} [ticketUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketUpdateStartTicketPost(createEnvironment?: number, isEdit?: boolean, ticketUpdateDto?: TicketUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketUpdateStartTicketPost(createEnvironment, isEdit, ticketUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TicketApi - object-oriented interface
 */
export class TicketApi extends BaseAPI {
    /**
     * 
     * @param {string} [id] 
     * @param {TicketCommentInsertDto} [ticketCommentInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketAddCommentPost(id?: string, ticketCommentInsertDto?: TicketCommentInsertDto, options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketAddCommentPost(id, ticketCommentInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketManagerUpdateDto} [ticketManagerUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketAssignPost(ticketManagerUpdateDto?: TicketManagerUpdateDto, options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketAssignPost(ticketManagerUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketCheckOthercompanypermGet(options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketCheckOthercompanypermGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketCheckPermGet(options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketCheckPermGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [insertDtoTicketCode] 
     * @param {string} [insertDtoTitle] 
     * @param {string} [insertDtoDescription] 
     * @param {string} [insertDtoWorkCompanyId] 
     * @param {string} [insertDtoWorkCompanySystemInfoId] 
     * @param {string} [insertDtoUserAppId] 
     * @param {TicketType} [insertDtoType] 
     * @param {TicketSLA} [insertDtoTicketSLA] 
     * @param {TicketSubject} [insertDtoTicketSubject] 
     * @param {TicketPriority} [insertDtoPriority] 
     * @param {Array<TicketCommentInsertDto>} [insertDtoTicketComment] 
     * @param {boolean} [insertDtoIsSend] 
     * @param {string} [insertDtoCustomerRefId] 
     * @param {boolean} [insertDtoIsFromEmail] 
     * @param {string} [insertDtoMailConversationId] 
     * @param {string} [insertDtoAddedMailAddresses] 
     * @param {boolean} [insertDtoIsFilePath] 
     * @param {string} [insertDtoFilePath] 
     * @param {string} [updateDtoId] 
     * @param {string} [updateDtoTicketCode] 
     * @param {string} [updateDtoTitle] 
     * @param {string} [updateDtoDescription] 
     * @param {string} [updateDtoWorkCompanyId] 
     * @param {string} [updateDtoWorkCompanySystemInfoId] 
     * @param {string} [updateDtoUserAppId] 
     * @param {TicketType} [updateDtoType] 
     * @param {TicketSLA} [updateDtoTicketSLA] 
     * @param {TicketSubject} [updateDtoTicketSubject] 
     * @param {TicketStatus} [updateDtoStatus] 
     * @param {TicketPriority} [updateDtoPriority] 
     * @param {string} [updateDtoTicketDepartmentId] 
     * @param {boolean} [updateDtoIsSend] 
     * @param {string} [updateDtoCustomerRefId] 
     * @param {string} [updateDtoAddedMailAddresses] 
     * @param {string} [updateDtoEstimatedDeadline] 
     * @param {string} [updateDtoTicketProjectId] 
     * @param {number} [createEnvironment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketCheckRuleEnginePatch(insertDtoTicketCode?: string, insertDtoTitle?: string, insertDtoDescription?: string, insertDtoWorkCompanyId?: string, insertDtoWorkCompanySystemInfoId?: string, insertDtoUserAppId?: string, insertDtoType?: TicketType, insertDtoTicketSLA?: TicketSLA, insertDtoTicketSubject?: TicketSubject, insertDtoPriority?: TicketPriority, insertDtoTicketComment?: Array<TicketCommentInsertDto>, insertDtoIsSend?: boolean, insertDtoCustomerRefId?: string, insertDtoIsFromEmail?: boolean, insertDtoMailConversationId?: string, insertDtoAddedMailAddresses?: string, insertDtoIsFilePath?: boolean, insertDtoFilePath?: string, updateDtoId?: string, updateDtoTicketCode?: string, updateDtoTitle?: string, updateDtoDescription?: string, updateDtoWorkCompanyId?: string, updateDtoWorkCompanySystemInfoId?: string, updateDtoUserAppId?: string, updateDtoType?: TicketType, updateDtoTicketSLA?: TicketSLA, updateDtoTicketSubject?: TicketSubject, updateDtoStatus?: TicketStatus, updateDtoPriority?: TicketPriority, updateDtoTicketDepartmentId?: string, updateDtoIsSend?: boolean, updateDtoCustomerRefId?: string, updateDtoAddedMailAddresses?: string, updateDtoEstimatedDeadline?: string, updateDtoTicketProjectId?: string, createEnvironment?: number, options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketCheckRuleEnginePatch(insertDtoTicketCode, insertDtoTitle, insertDtoDescription, insertDtoWorkCompanyId, insertDtoWorkCompanySystemInfoId, insertDtoUserAppId, insertDtoType, insertDtoTicketSLA, insertDtoTicketSubject, insertDtoPriority, insertDtoTicketComment, insertDtoIsSend, insertDtoCustomerRefId, insertDtoIsFromEmail, insertDtoMailConversationId, insertDtoAddedMailAddresses, insertDtoIsFilePath, insertDtoFilePath, updateDtoId, updateDtoTicketCode, updateDtoTitle, updateDtoDescription, updateDtoWorkCompanyId, updateDtoWorkCompanySystemInfoId, updateDtoUserAppId, updateDtoType, updateDtoTicketSLA, updateDtoTicketSubject, updateDtoStatus, updateDtoPriority, updateDtoTicketDepartmentId, updateDtoIsSend, updateDtoCustomerRefId, updateDtoAddedMailAddresses, updateDtoEstimatedDeadline, updateDtoTicketProjectId, createEnvironment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketDeleteAllSentEmailsGet(options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketDeleteAllSentEmailsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [pageDesc] 
     * @param {Array<string>} [statues] 
     * @param {string} [workCompanyId] 
     * @param {string} [assignedUser] 
     * @param {string} [assignedTeam] 
     * @param {string} [type] 
     * @param {string} [endDate] 
     * @param {string} [startDate] 
     * @param {string} [creator] 
     * @param {string} [customer] 
     * @param {boolean} [closeInc] 
     * @param {string} [title] 
     * @param {Array<string>} [departmentId] 
     * @param {Array<string>} [ticketProjectId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketExcelExportGet(pageDesc?: string, statues?: Array<string>, workCompanyId?: string, assignedUser?: string, assignedTeam?: string, type?: string, endDate?: string, startDate?: string, creator?: string, customer?: string, closeInc?: boolean, title?: string, departmentId?: Array<string>, ticketProjectId?: Array<string>, options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketExcelExportGet(pageDesc, statues, workCompanyId, assignedUser, assignedTeam, type, endDate, startDate, creator, customer, closeInc, title, departmentId, ticketProjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {string} [pageDesc] 
     * @param {Array<string>} [statues] 
     * @param {string} [workCompanyId] 
     * @param {string} [assignedUser] 
     * @param {string} [assignedTeam] 
     * @param {string} [type] 
     * @param {string} [endDate] 
     * @param {string} [startDate] 
     * @param {string} [creator] 
     * @param {string} [customer] 
     * @param {boolean} [closeInc] 
     * @param {string} [title] 
     * @param {Array<string>} [departmentId] 
     * @param {Array<string>} [ticketProjectId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketFilteredAllTicketsGet(skip?: number, top?: number, pageDesc?: string, statues?: Array<string>, workCompanyId?: string, assignedUser?: string, assignedTeam?: string, type?: string, endDate?: string, startDate?: string, creator?: string, customer?: string, closeInc?: boolean, title?: string, departmentId?: Array<string>, ticketProjectId?: Array<string>, options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketFilteredAllTicketsGet(skip, top, pageDesc, statues, workCompanyId, assignedUser, assignedTeam, type, endDate, startDate, creator, customer, closeInc, title, departmentId, ticketProjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketGet(options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketGetAssignTicketsGet(options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketGetAssignTicketsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [ticketId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketGetAssingListGet(ticketId?: string, options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketGetAssingListGet(ticketId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketGetFileGet(id?: string, options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketGetFileGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketGetTicketPdfIdGet(id: string, options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketGetTicketPdfIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketIdGet(id: string, options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [createEnvironment] 
     * @param {Array<string>} [ccRecipients] 
     * @param {TicketInsertDto} [ticketInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketPost(createEnvironment?: number, ccRecipients?: Array<string>, ticketInsertDto?: TicketInsertDto, options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketPost(createEnvironment, ccRecipients, ticketInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketUpdateDto} [ticketUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketPut(ticketUpdateDto?: TicketUpdateDto, options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketPut(ticketUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketReadMailsGet(options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketReadMailsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [pageDesc] 
     * @param {string} [talepNo] 
     * @param {number} [skip] 
     * @param {number} [top] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketSearchTicketGet(pageDesc?: string, talepNo?: string, skip?: number, top?: number, options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketSearchTicketGet(pageDesc, talepNo, skip, top, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketTicketPrioritiesGet(options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketTicketPrioritiesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketTicketSLAGet(options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketTicketSLAGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketTicketStatusGet(options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketTicketStatusGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketTicketSubjectGet(options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketTicketSubjectGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketTicketTypeGet(options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketTicketTypeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [createEnvironment] 
     * @param {boolean} [isEdit] 
     * @param {TicketUpdateDto} [ticketUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketUpdateStartTicketPost(createEnvironment?: number, isEdit?: boolean, ticketUpdateDto?: TicketUpdateDto, options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketUpdateStartTicketPost(createEnvironment, isEdit, ticketUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TicketDepartmentsApi - axios parameter creator
 */
export const TicketDepartmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [companyId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDepartmentsAllFilteredCompanyGet: async (companyId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketDepartments/AllFilteredCompany`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDepartmentsAllOnlyNameGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketDepartments/AllOnlyName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDepartmentsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketDepartments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDepartmentsGetAllVisibleDepartmentsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketDepartments/getAllVisibleDepartments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDepartmentsGetAllWithUsersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketDepartments/getAllWithUsers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDepartmentsGetOnlyVesaDepartmentsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketDepartments/GetOnlyVesaDepartments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDepartmentsGetUsersByDepartmentIdIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTicketDepartmentsGetUsersByDepartmentIdIdGet', 'id', id)
            const localVarPath = `/api/TicketDepartments/getUsersByDepartmentId/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDepartmentsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTicketDepartmentsIdDelete', 'id', id)
            const localVarPath = `/api/TicketDepartments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDepartmentsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTicketDepartmentsIdGet', 'id', id)
            const localVarPath = `/api/TicketDepartments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TicketDepartmensInsertDto} [ticketDepartmensInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDepartmentsPost: async (ticketDepartmensInsertDto?: TicketDepartmensInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketDepartments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ticketDepartmensInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TicketDepartmensUpdateDto} [ticketDepartmensUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDepartmentsPut: async (ticketDepartmensUpdateDto?: TicketDepartmensUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketDepartments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ticketDepartmensUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TicketDepartmentsApi - functional programming interface
 */
export const TicketDepartmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TicketDepartmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [companyId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketDepartmentsAllFilteredCompanyGet(companyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TicketDepartmensListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketDepartmentsAllFilteredCompanyGet(companyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketDepartmentsApi.apiTicketDepartmentsAllFilteredCompanyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketDepartmentsAllOnlyNameGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TicketDepartmensListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketDepartmentsAllOnlyNameGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketDepartmentsApi.apiTicketDepartmentsAllOnlyNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketDepartmentsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TicketDepartmensListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketDepartmentsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketDepartmentsApi.apiTicketDepartmentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketDepartmentsGetAllVisibleDepartmentsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TicketDepartmensListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketDepartmentsGetAllVisibleDepartmentsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketDepartmentsApi.apiTicketDepartmentsGetAllVisibleDepartmentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketDepartmentsGetAllWithUsersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TicketDepartmensListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketDepartmentsGetAllWithUsersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketDepartmentsApi.apiTicketDepartmentsGetAllWithUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketDepartmentsGetOnlyVesaDepartmentsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TicketDepartmensListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketDepartmentsGetOnlyVesaDepartmentsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketDepartmentsApi.apiTicketDepartmentsGetOnlyVesaDepartmentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketDepartmentsGetUsersByDepartmentIdIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserAppDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketDepartmentsGetUsersByDepartmentIdIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketDepartmentsApi.apiTicketDepartmentsGetUsersByDepartmentIdIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketDepartmentsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketDepartmentsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketDepartmentsApi.apiTicketDepartmentsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketDepartmentsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketDepartmensListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketDepartmentsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketDepartmentsApi.apiTicketDepartmentsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TicketDepartmensInsertDto} [ticketDepartmensInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketDepartmentsPost(ticketDepartmensInsertDto?: TicketDepartmensInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketDepartmentsPost(ticketDepartmensInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketDepartmentsApi.apiTicketDepartmentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TicketDepartmensUpdateDto} [ticketDepartmensUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketDepartmentsPut(ticketDepartmensUpdateDto?: TicketDepartmensUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketDepartmensUpdateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketDepartmentsPut(ticketDepartmensUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketDepartmentsApi.apiTicketDepartmentsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TicketDepartmentsApi - factory interface
 */
export const TicketDepartmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TicketDepartmentsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [companyId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDepartmentsAllFilteredCompanyGet(companyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<TicketDepartmensListDto>> {
            return localVarFp.apiTicketDepartmentsAllFilteredCompanyGet(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDepartmentsAllOnlyNameGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<TicketDepartmensListDto>> {
            return localVarFp.apiTicketDepartmentsAllOnlyNameGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDepartmentsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<TicketDepartmensListDto>> {
            return localVarFp.apiTicketDepartmentsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDepartmentsGetAllVisibleDepartmentsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<TicketDepartmensListDto>> {
            return localVarFp.apiTicketDepartmentsGetAllVisibleDepartmentsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDepartmentsGetAllWithUsersGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<TicketDepartmensListDto>> {
            return localVarFp.apiTicketDepartmentsGetAllWithUsersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDepartmentsGetOnlyVesaDepartmentsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<TicketDepartmensListDto>> {
            return localVarFp.apiTicketDepartmentsGetOnlyVesaDepartmentsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDepartmentsGetUsersByDepartmentIdIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserAppDto>> {
            return localVarFp.apiTicketDepartmentsGetUsersByDepartmentIdIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDepartmentsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketDepartmentsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDepartmentsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<TicketDepartmensListDto> {
            return localVarFp.apiTicketDepartmentsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TicketDepartmensInsertDto} [ticketDepartmensInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDepartmentsPost(ticketDepartmensInsertDto?: TicketDepartmensInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketDepartmentsPost(ticketDepartmensInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TicketDepartmensUpdateDto} [ticketDepartmensUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketDepartmentsPut(ticketDepartmensUpdateDto?: TicketDepartmensUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<TicketDepartmensUpdateDto> {
            return localVarFp.apiTicketDepartmentsPut(ticketDepartmensUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TicketDepartmentsApi - object-oriented interface
 */
export class TicketDepartmentsApi extends BaseAPI {
    /**
     * 
     * @param {string} [companyId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketDepartmentsAllFilteredCompanyGet(companyId?: string, options?: RawAxiosRequestConfig) {
        return TicketDepartmentsApiFp(this.configuration).apiTicketDepartmentsAllFilteredCompanyGet(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketDepartmentsAllOnlyNameGet(options?: RawAxiosRequestConfig) {
        return TicketDepartmentsApiFp(this.configuration).apiTicketDepartmentsAllOnlyNameGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketDepartmentsGet(options?: RawAxiosRequestConfig) {
        return TicketDepartmentsApiFp(this.configuration).apiTicketDepartmentsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketDepartmentsGetAllVisibleDepartmentsGet(options?: RawAxiosRequestConfig) {
        return TicketDepartmentsApiFp(this.configuration).apiTicketDepartmentsGetAllVisibleDepartmentsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketDepartmentsGetAllWithUsersGet(options?: RawAxiosRequestConfig) {
        return TicketDepartmentsApiFp(this.configuration).apiTicketDepartmentsGetAllWithUsersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketDepartmentsGetOnlyVesaDepartmentsGet(options?: RawAxiosRequestConfig) {
        return TicketDepartmentsApiFp(this.configuration).apiTicketDepartmentsGetOnlyVesaDepartmentsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketDepartmentsGetUsersByDepartmentIdIdGet(id: string, options?: RawAxiosRequestConfig) {
        return TicketDepartmentsApiFp(this.configuration).apiTicketDepartmentsGetUsersByDepartmentIdIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketDepartmentsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return TicketDepartmentsApiFp(this.configuration).apiTicketDepartmentsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketDepartmentsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return TicketDepartmentsApiFp(this.configuration).apiTicketDepartmentsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketDepartmensInsertDto} [ticketDepartmensInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketDepartmentsPost(ticketDepartmensInsertDto?: TicketDepartmensInsertDto, options?: RawAxiosRequestConfig) {
        return TicketDepartmentsApiFp(this.configuration).apiTicketDepartmentsPost(ticketDepartmensInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketDepartmensUpdateDto} [ticketDepartmensUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketDepartmentsPut(ticketDepartmensUpdateDto?: TicketDepartmensUpdateDto, options?: RawAxiosRequestConfig) {
        return TicketDepartmentsApiFp(this.configuration).apiTicketDepartmentsPut(ticketDepartmensUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TicketProjectsApi - axios parameter creator
 */
export const TicketProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketProjectsDelete: async (id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketProjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [workCompanyId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketProjectsGet: async (workCompanyId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketProjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (workCompanyId !== undefined) {
                localVarQueryParameter['workCompanyId'] = workCompanyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [workCompanyId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketProjectsGetActiveProjectsGet: async (workCompanyId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketProjects/GetActiveProjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (workCompanyId !== undefined) {
                localVarQueryParameter['workCompanyId'] = workCompanyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketProjectsGetActiveProjectsOnlyNameGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketProjects/GetActiveProjectsOnlyName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {boolean} [isNewProject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketProjectsGetChangedProjectsGet: async (startDate?: string, endDate?: string, isNewProject?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketProjects/GetChangedProjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (isNewProject !== undefined) {
                localVarQueryParameter['isNewProject'] = isNewProject;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketProjectsGetProjectsByUserGet: async (userId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketProjects/GetProjectsByUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketProjectsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTicketProjectsIdGet', 'id', id)
            const localVarPath = `/api/TicketProjects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TicketProjectsInsertDto} [ticketProjectsInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketProjectsPost: async (ticketProjectsInsertDto?: TicketProjectsInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketProjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ticketProjectsInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TicketProjectsUpdateDto} [ticketProjectsUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketProjectsPut: async (ticketProjectsUpdateDto?: TicketProjectsUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketProjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ticketProjectsUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TicketProjectsApi - functional programming interface
 */
export const TicketProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TicketProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketProjectsDelete(id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketProjectsDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketProjectsApi.apiTicketProjectsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [workCompanyId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketProjectsGet(workCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TicketProjectsListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketProjectsGet(workCompanyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketProjectsApi.apiTicketProjectsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [workCompanyId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketProjectsGetActiveProjectsGet(workCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TicketProjectsListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketProjectsGetActiveProjectsGet(workCompanyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketProjectsApi.apiTicketProjectsGetActiveProjectsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketProjectsGetActiveProjectsOnlyNameGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TicketProjectsListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketProjectsGetActiveProjectsOnlyNameGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketProjectsApi.apiTicketProjectsGetActiveProjectsOnlyNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {boolean} [isNewProject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketProjectsGetChangedProjectsGet(startDate?: string, endDate?: string, isNewProject?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChangedTaskListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketProjectsGetChangedProjectsGet(startDate, endDate, isNewProject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketProjectsApi.apiTicketProjectsGetChangedProjectsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketProjectsGetProjectsByUserGet(userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TicketProjectsListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketProjectsGetProjectsByUserGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketProjectsApi.apiTicketProjectsGetProjectsByUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketProjectsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketProjectsListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketProjectsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketProjectsApi.apiTicketProjectsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TicketProjectsInsertDto} [ticketProjectsInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketProjectsPost(ticketProjectsInsertDto?: TicketProjectsInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketProjectsPost(ticketProjectsInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketProjectsApi.apiTicketProjectsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TicketProjectsUpdateDto} [ticketProjectsUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketProjectsPut(ticketProjectsUpdateDto?: TicketProjectsUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketProjectsPut(ticketProjectsUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketProjectsApi.apiTicketProjectsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TicketProjectsApi - factory interface
 */
export const TicketProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TicketProjectsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketProjectsDelete(id?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketProjectsDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [workCompanyId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketProjectsGet(workCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<TicketProjectsListDto>> {
            return localVarFp.apiTicketProjectsGet(workCompanyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [workCompanyId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketProjectsGetActiveProjectsGet(workCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<TicketProjectsListDto>> {
            return localVarFp.apiTicketProjectsGetActiveProjectsGet(workCompanyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketProjectsGetActiveProjectsOnlyNameGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<TicketProjectsListDto>> {
            return localVarFp.apiTicketProjectsGetActiveProjectsOnlyNameGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {boolean} [isNewProject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketProjectsGetChangedProjectsGet(startDate?: string, endDate?: string, isNewProject?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<Array<ChangedTaskListDto>> {
            return localVarFp.apiTicketProjectsGetChangedProjectsGet(startDate, endDate, isNewProject, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketProjectsGetProjectsByUserGet(userId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<TicketProjectsListDto>> {
            return localVarFp.apiTicketProjectsGetProjectsByUserGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketProjectsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<TicketProjectsListDto> {
            return localVarFp.apiTicketProjectsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TicketProjectsInsertDto} [ticketProjectsInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketProjectsPost(ticketProjectsInsertDto?: TicketProjectsInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketProjectsPost(ticketProjectsInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TicketProjectsUpdateDto} [ticketProjectsUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketProjectsPut(ticketProjectsUpdateDto?: TicketProjectsUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketProjectsPut(ticketProjectsUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TicketProjectsApi - object-oriented interface
 */
export class TicketProjectsApi extends BaseAPI {
    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketProjectsDelete(id?: string, options?: RawAxiosRequestConfig) {
        return TicketProjectsApiFp(this.configuration).apiTicketProjectsDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [workCompanyId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketProjectsGet(workCompanyId?: string, options?: RawAxiosRequestConfig) {
        return TicketProjectsApiFp(this.configuration).apiTicketProjectsGet(workCompanyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [workCompanyId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketProjectsGetActiveProjectsGet(workCompanyId?: string, options?: RawAxiosRequestConfig) {
        return TicketProjectsApiFp(this.configuration).apiTicketProjectsGetActiveProjectsGet(workCompanyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketProjectsGetActiveProjectsOnlyNameGet(options?: RawAxiosRequestConfig) {
        return TicketProjectsApiFp(this.configuration).apiTicketProjectsGetActiveProjectsOnlyNameGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {boolean} [isNewProject] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketProjectsGetChangedProjectsGet(startDate?: string, endDate?: string, isNewProject?: boolean, options?: RawAxiosRequestConfig) {
        return TicketProjectsApiFp(this.configuration).apiTicketProjectsGetChangedProjectsGet(startDate, endDate, isNewProject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketProjectsGetProjectsByUserGet(userId?: string, options?: RawAxiosRequestConfig) {
        return TicketProjectsApiFp(this.configuration).apiTicketProjectsGetProjectsByUserGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketProjectsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return TicketProjectsApiFp(this.configuration).apiTicketProjectsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketProjectsInsertDto} [ticketProjectsInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketProjectsPost(ticketProjectsInsertDto?: TicketProjectsInsertDto, options?: RawAxiosRequestConfig) {
        return TicketProjectsApiFp(this.configuration).apiTicketProjectsPost(ticketProjectsInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketProjectsUpdateDto} [ticketProjectsUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketProjectsPut(ticketProjectsUpdateDto?: TicketProjectsUpdateDto, options?: RawAxiosRequestConfig) {
        return TicketProjectsApiFp(this.configuration).apiTicketProjectsPut(ticketProjectsUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TicketRuleEngineApi - axios parameter creator
 */
export const TicketRuleEngineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketRuleEngineAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketRuleEngine/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketRuleEngineIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTicketRuleEngineIdDelete', 'id', id)
            const localVarPath = `/api/TicketRuleEngine/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketRuleEngineIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTicketRuleEngineIdGet', 'id', id)
            const localVarPath = `/api/TicketRuleEngine/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TicketRuleEngineInsertDto} [ticketRuleEngineInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketRuleEnginePost: async (ticketRuleEngineInsertDto?: TicketRuleEngineInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketRuleEngine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ticketRuleEngineInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TicketRuleEngineUpdateDto} [ticketRuleEngineUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketRuleEnginePut: async (ticketRuleEngineUpdateDto?: TicketRuleEngineUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketRuleEngine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ticketRuleEngineUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TicketRuleEngineApi - functional programming interface
 */
export const TicketRuleEngineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TicketRuleEngineApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketRuleEngineAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TicketRuleEngineListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketRuleEngineAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketRuleEngineApi.apiTicketRuleEngineAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketRuleEngineIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketRuleEngineIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketRuleEngineApi.apiTicketRuleEngineIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketRuleEngineIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketRuleEngineListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketRuleEngineIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketRuleEngineApi.apiTicketRuleEngineIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TicketRuleEngineInsertDto} [ticketRuleEngineInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketRuleEnginePost(ticketRuleEngineInsertDto?: TicketRuleEngineInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketRuleEnginePost(ticketRuleEngineInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketRuleEngineApi.apiTicketRuleEnginePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TicketRuleEngineUpdateDto} [ticketRuleEngineUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketRuleEnginePut(ticketRuleEngineUpdateDto?: TicketRuleEngineUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketRuleEnginePut(ticketRuleEngineUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketRuleEngineApi.apiTicketRuleEnginePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TicketRuleEngineApi - factory interface
 */
export const TicketRuleEngineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TicketRuleEngineApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketRuleEngineAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<TicketRuleEngineListDto>> {
            return localVarFp.apiTicketRuleEngineAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketRuleEngineIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketRuleEngineIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketRuleEngineIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<TicketRuleEngineListDto> {
            return localVarFp.apiTicketRuleEngineIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TicketRuleEngineInsertDto} [ticketRuleEngineInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketRuleEnginePost(ticketRuleEngineInsertDto?: TicketRuleEngineInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketRuleEnginePost(ticketRuleEngineInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TicketRuleEngineUpdateDto} [ticketRuleEngineUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketRuleEnginePut(ticketRuleEngineUpdateDto?: TicketRuleEngineUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketRuleEnginePut(ticketRuleEngineUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TicketRuleEngineApi - object-oriented interface
 */
export class TicketRuleEngineApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketRuleEngineAllGet(options?: RawAxiosRequestConfig) {
        return TicketRuleEngineApiFp(this.configuration).apiTicketRuleEngineAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketRuleEngineIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return TicketRuleEngineApiFp(this.configuration).apiTicketRuleEngineIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketRuleEngineIdGet(id: string, options?: RawAxiosRequestConfig) {
        return TicketRuleEngineApiFp(this.configuration).apiTicketRuleEngineIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketRuleEngineInsertDto} [ticketRuleEngineInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketRuleEnginePost(ticketRuleEngineInsertDto?: TicketRuleEngineInsertDto, options?: RawAxiosRequestConfig) {
        return TicketRuleEngineApiFp(this.configuration).apiTicketRuleEnginePost(ticketRuleEngineInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketRuleEngineUpdateDto} [ticketRuleEngineUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketRuleEnginePut(ticketRuleEngineUpdateDto?: TicketRuleEngineUpdateDto, options?: RawAxiosRequestConfig) {
        return TicketRuleEngineApiFp(this.configuration).apiTicketRuleEnginePut(ticketRuleEngineUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TicketTeamApi - axios parameter creator
 */
export const TicketTeamApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketTeamAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketTeam/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketTeamIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTicketTeamIdDelete', 'id', id)
            const localVarPath = `/api/TicketTeam/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketTeamIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTicketTeamIdGet', 'id', id)
            const localVarPath = `/api/TicketTeam/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TicketTeamInsertDto} [ticketTeamInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketTeamPost: async (ticketTeamInsertDto?: TicketTeamInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketTeam`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ticketTeamInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TicketTeamUpdateDto} [ticketTeamUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketTeamPut: async (ticketTeamUpdateDto?: TicketTeamUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketTeam`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ticketTeamUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketTeamWithoutTeamGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TicketTeam/without-team`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TicketTeamApi - functional programming interface
 */
export const TicketTeamApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TicketTeamApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketTeamAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TicketTeamListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketTeamAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketTeamApi.apiTicketTeamAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketTeamIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketTeamIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketTeamApi.apiTicketTeamIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketTeamIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketTeamListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketTeamIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketTeamApi.apiTicketTeamIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TicketTeamInsertDto} [ticketTeamInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketTeamPost(ticketTeamInsertDto?: TicketTeamInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketTeamPost(ticketTeamInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketTeamApi.apiTicketTeamPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TicketTeamUpdateDto} [ticketTeamUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketTeamPut(ticketTeamUpdateDto?: TicketTeamUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketTeamPut(ticketTeamUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketTeamApi.apiTicketTeamPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketTeamWithoutTeamGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TicketTeamListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketTeamWithoutTeamGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketTeamApi.apiTicketTeamWithoutTeamGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TicketTeamApi - factory interface
 */
export const TicketTeamApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TicketTeamApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketTeamAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<TicketTeamListDto>> {
            return localVarFp.apiTicketTeamAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketTeamIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketTeamIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketTeamIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<TicketTeamListDto> {
            return localVarFp.apiTicketTeamIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TicketTeamInsertDto} [ticketTeamInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketTeamPost(ticketTeamInsertDto?: TicketTeamInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketTeamPost(ticketTeamInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TicketTeamUpdateDto} [ticketTeamUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketTeamPut(ticketTeamUpdateDto?: TicketTeamUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTicketTeamPut(ticketTeamUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketTeamWithoutTeamGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<TicketTeamListDto>> {
            return localVarFp.apiTicketTeamWithoutTeamGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TicketTeamApi - object-oriented interface
 */
export class TicketTeamApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketTeamAllGet(options?: RawAxiosRequestConfig) {
        return TicketTeamApiFp(this.configuration).apiTicketTeamAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketTeamIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return TicketTeamApiFp(this.configuration).apiTicketTeamIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketTeamIdGet(id: string, options?: RawAxiosRequestConfig) {
        return TicketTeamApiFp(this.configuration).apiTicketTeamIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketTeamInsertDto} [ticketTeamInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketTeamPost(ticketTeamInsertDto?: TicketTeamInsertDto, options?: RawAxiosRequestConfig) {
        return TicketTeamApiFp(this.configuration).apiTicketTeamPost(ticketTeamInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketTeamUpdateDto} [ticketTeamUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketTeamPut(ticketTeamUpdateDto?: TicketTeamUpdateDto, options?: RawAxiosRequestConfig) {
        return TicketTeamApiFp(this.configuration).apiTicketTeamPut(ticketTeamUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTicketTeamWithoutTeamGet(options?: RawAxiosRequestConfig) {
        return TicketTeamApiFp(this.configuration).apiTicketTeamWithoutTeamGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCheckApplyDefaultFiltersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/CheckApplyDefaultFilters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCheckEmailGet: async (email?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/CheckEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCheckIsAdminGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/checkIsAdmin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [mail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCheckSSOEmailControlGet: async (mail?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/CheckSSOEmailControl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mail !== undefined) {
                localVarQueryParameter['mail'] = mail;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGet: async (userName?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userName !== undefined) {
                localVarQueryParameter['userName'] = userName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetAllUsersAsyncWitNameGet: async (name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/GetAllUsersAsyncWitName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetAllUsersNameIdOnlyGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/GetAllUsersNameIdOnly`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetAllUsersWitNameAssignGet: async (name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/GetAllUsersWitNameAssign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetAllWithOuthPhotoForManagementGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/GetAllWithOuthPhotoForManagement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetAllWithOuthPhotoGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/GetAllWithOuthPhoto`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetJwtBearerOptionsAsStringGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/GetJwtBearerOptionsAsString`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetLoginUserDetailGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/GetLoginUserDetail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetLoginUserGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/GetLoginUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetUserGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/GetUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserIsGlobalAdminGet: async (userId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/is-global-admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [isSendMail] 
         * @param {CreateUserDto} [createUserDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserPost: async (isSendMail?: boolean, createUserDto?: CreateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (isSendMail !== undefined) {
                localVarQueryParameter['isSendMail'] = isSendMail;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateUserDto} [updateUserDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserPut: async (updateUserDto?: UpdateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserRemoveUserGet: async (userName?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/RemoveUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userName !== undefined) {
                localVarQueryParameter['userName'] = userName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userName] 
         * @param {string} [passWord] 
         * @param {boolean} [isSendMail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserResetPassWordGet: async (userName?: string, passWord?: string, isSendMail?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/ResetPassWord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userName !== undefined) {
                localVarQueryParameter['userName'] = userName;
            }

            if (passWord !== undefined) {
                localVarQueryParameter['passWord'] = passWord;
            }

            if (isSendMail !== undefined) {
                localVarQueryParameter['isSendMail'] = isSendMail;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUserCompanyGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/UserCompany`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUserDepartmentGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/UserDepartment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUserLevelsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/UserLevels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserValidatetokenAndUserGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/validatetokenAndUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [departmentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserVesaUsersWithoutPhotoGet: async (departmentId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/VesaUsersWithoutPhoto`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (departmentId !== undefined) {
                localVarQueryParameter['departmentId'] = departmentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserCheckApplyDefaultFiltersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserCheckApplyDefaultFiltersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserCheckApplyDefaultFiltersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserCheckEmailGet(email?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserCheckEmailGet(email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserCheckEmailGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserCheckIsAdminGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserCheckIsAdminGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserCheckIsAdminGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [mail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserCheckSSOEmailControlGet(mail?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAppDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserCheckSSOEmailControlGet(mail, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserCheckSSOEmailControlGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserGet(userName?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAppDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserGet(userName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserGetAllUsersAsyncWitNameGet(name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserAppDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserGetAllUsersAsyncWitNameGet(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserGetAllUsersAsyncWitNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserGetAllUsersNameIdOnlyGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserAppDtoOnlyNameId>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserGetAllUsersNameIdOnlyGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserGetAllUsersNameIdOnlyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserGetAllUsersWitNameAssignGet(name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserAppDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserGetAllUsersWitNameAssignGet(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserGetAllUsersWitNameAssignGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserGetAllWithOuthPhotoForManagementGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserAppDtoWithoutPhoto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserGetAllWithOuthPhotoForManagementGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserGetAllWithOuthPhotoForManagementGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserGetAllWithOuthPhotoGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserAppDtoWithoutPhoto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserGetAllWithOuthPhotoGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserGetAllWithOuthPhotoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserGetJwtBearerOptionsAsStringGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserGetJwtBearerOptionsAsStringGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserGetJwtBearerOptionsAsStringGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserGetLoginUserDetailGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAppDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserGetLoginUserDetailGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserGetLoginUserDetailGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserGetLoginUserGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAppDtoOnlyNameId>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserGetLoginUserGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserGetLoginUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserGetUserGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserGetUserGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserGetUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserIsGlobalAdminGet(userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserIsGlobalAdminGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserIsGlobalAdminGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {boolean} [isSendMail] 
         * @param {CreateUserDto} [createUserDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserPost(isSendMail?: boolean, createUserDto?: CreateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserPost(isSendMail, createUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateUserDto} [updateUserDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserPut(updateUserDto?: UpdateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserPut(updateUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserRemoveUserGet(userName?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserRemoveUserGet(userName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserRemoveUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userName] 
         * @param {string} [passWord] 
         * @param {boolean} [isSendMail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserResetPassWordGet(userName?: string, passWord?: string, isSendMail?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserResetPassWordGet(userName, passWord, isSendMail, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserResetPassWordGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserUserCompanyGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAppDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserUserCompanyGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserUserCompanyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserUserDepartmentGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketDepartmensListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserUserDepartmentGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserUserDepartmentGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserUserLevelsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserUserLevelsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserUserLevelsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserValidatetokenAndUserGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserValidatetokenAndUserGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserValidatetokenAndUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [departmentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserVesaUsersWithoutPhotoGet(departmentId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserAppDtoWithoutPhoto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserVesaUsersWithoutPhotoGet(departmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserVesaUsersWithoutPhotoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCheckApplyDefaultFiltersGet(options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.apiUserCheckApplyDefaultFiltersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCheckEmailGet(email?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserCheckEmailGet(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCheckIsAdminGet(options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.apiUserCheckIsAdminGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [mail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCheckSSOEmailControlGet(mail?: string, options?: RawAxiosRequestConfig): AxiosPromise<UserAppDto> {
            return localVarFp.apiUserCheckSSOEmailControlGet(mail, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGet(userName?: string, options?: RawAxiosRequestConfig): AxiosPromise<UserAppDto> {
            return localVarFp.apiUserGet(userName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetAllUsersAsyncWitNameGet(name?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserAppDto>> {
            return localVarFp.apiUserGetAllUsersAsyncWitNameGet(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetAllUsersNameIdOnlyGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserAppDtoOnlyNameId>> {
            return localVarFp.apiUserGetAllUsersNameIdOnlyGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetAllUsersWitNameAssignGet(name?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserAppDto>> {
            return localVarFp.apiUserGetAllUsersWitNameAssignGet(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetAllWithOuthPhotoForManagementGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserAppDtoWithoutPhoto>> {
            return localVarFp.apiUserGetAllWithOuthPhotoForManagementGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetAllWithOuthPhotoGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserAppDtoWithoutPhoto>> {
            return localVarFp.apiUserGetAllWithOuthPhotoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetJwtBearerOptionsAsStringGet(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiUserGetJwtBearerOptionsAsStringGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetLoginUserDetailGet(options?: RawAxiosRequestConfig): AxiosPromise<UserAppDto> {
            return localVarFp.apiUserGetLoginUserDetailGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetLoginUserGet(options?: RawAxiosRequestConfig): AxiosPromise<UserAppDtoOnlyNameId> {
            return localVarFp.apiUserGetLoginUserGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetUserGet(options?: RawAxiosRequestConfig): AxiosPromise<LoginUserDto> {
            return localVarFp.apiUserGetUserGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserIsGlobalAdminGet(userId?: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.apiUserIsGlobalAdminGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} [isSendMail] 
         * @param {CreateUserDto} [createUserDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserPost(isSendMail?: boolean, createUserDto?: CreateUserDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserPost(isSendMail, createUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateUserDto} [updateUserDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserPut(updateUserDto?: UpdateUserDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserPut(updateUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserRemoveUserGet(userName?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserRemoveUserGet(userName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userName] 
         * @param {string} [passWord] 
         * @param {boolean} [isSendMail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserResetPassWordGet(userName?: string, passWord?: string, isSendMail?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserResetPassWordGet(userName, passWord, isSendMail, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUserCompanyGet(options?: RawAxiosRequestConfig): AxiosPromise<UserAppDto> {
            return localVarFp.apiUserUserCompanyGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUserDepartmentGet(options?: RawAxiosRequestConfig): AxiosPromise<TicketDepartmensListDto> {
            return localVarFp.apiUserUserDepartmentGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUserLevelsGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserUserLevelsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserValidatetokenAndUserGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserValidatetokenAndUserGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [departmentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserVesaUsersWithoutPhotoGet(departmentId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserAppDtoWithoutPhoto>> {
            return localVarFp.apiUserVesaUsersWithoutPhotoGet(departmentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserCheckApplyDefaultFiltersGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserCheckApplyDefaultFiltersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [email] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserCheckEmailGet(email?: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserCheckEmailGet(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserCheckIsAdminGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserCheckIsAdminGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [mail] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserCheckSSOEmailControlGet(mail?: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserCheckSSOEmailControlGet(mail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserGet(userName?: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserGet(userName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserGetAllUsersAsyncWitNameGet(name?: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserGetAllUsersAsyncWitNameGet(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserGetAllUsersNameIdOnlyGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserGetAllUsersNameIdOnlyGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserGetAllUsersWitNameAssignGet(name?: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserGetAllUsersWitNameAssignGet(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserGetAllWithOuthPhotoForManagementGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserGetAllWithOuthPhotoForManagementGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserGetAllWithOuthPhotoGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserGetAllWithOuthPhotoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserGetJwtBearerOptionsAsStringGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserGetJwtBearerOptionsAsStringGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserGetLoginUserDetailGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserGetLoginUserDetailGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserGetLoginUserGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserGetLoginUserGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserGetUserGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserGetUserGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserIsGlobalAdminGet(userId?: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserIsGlobalAdminGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} [isSendMail] 
     * @param {CreateUserDto} [createUserDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserPost(isSendMail?: boolean, createUserDto?: CreateUserDto, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserPost(isSendMail, createUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateUserDto} [updateUserDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserPut(updateUserDto?: UpdateUserDto, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserPut(updateUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserRemoveUserGet(userName?: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserRemoveUserGet(userName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userName] 
     * @param {string} [passWord] 
     * @param {boolean} [isSendMail] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserResetPassWordGet(userName?: string, passWord?: string, isSendMail?: boolean, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserResetPassWordGet(userName, passWord, isSendMail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserUserCompanyGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserUserCompanyGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserUserDepartmentGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserUserDepartmentGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserUserLevelsGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserUserLevelsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserValidatetokenAndUserGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserValidatetokenAndUserGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [departmentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserVesaUsersWithoutPhotoGet(departmentId?: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserVesaUsersWithoutPhotoGet(departmentId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserCalendarApi - axios parameter creator
 */
export const UserCalendarApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarCheckOtherDeptpermGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserCalendar/check-otherDeptperm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarCheckUserIsManagerGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserCalendar/check-userIsManager`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarDelete: async (id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserCalendar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarDepartmentIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUserCalendarDepartmentIdGet', 'id', id)
            const localVarPath = `/api/UserCalendar/department/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserCalendar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [year] 
         * @param {number} [month] 
         * @param {Array<string>} [users] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarGetByUsersGet: async (year?: number, month?: number, users?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserCalendar/getByUsers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }

            if (users) {
                localVarQueryParameter['users'] = users;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [year] 
         * @param {number} [month] 
         * @param {Array<string>} [userMails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarGetEmployeeLeavesByMonthlyGet: async (year?: number, month?: number, userMails?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserCalendar/GetEmployeeLeavesByMonthly`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }

            if (userMails) {
                localVarQueryParameter['userMails'] = userMails;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [year] 
         * @param {number} [week] 
         * @param {Array<string>} [userMails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarGetEmployeeLeavesByWeeklyGet: async (year?: number, week?: number, userMails?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserCalendar/GetEmployeeLeavesByWeekly`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (week !== undefined) {
                localVarQueryParameter['week'] = week;
            }

            if (userMails) {
                localVarQueryParameter['userMails'] = userMails;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [yil] 
         * @param {number} [hafta] 
         * @param {Array<string>} [users] 
         * @param {string} [ticketDepartmentId] 
         * @param {number} [userLevel] 
         * @param {Array<string>} [daysOfWeek] 
         * @param {Array<number>} [percentage] 
         * @param {boolean} [isGetAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarGetTasksByWeeklyGet: async (yil?: number, hafta?: number, users?: Array<string>, ticketDepartmentId?: string, userLevel?: number, daysOfWeek?: Array<string>, percentage?: Array<number>, isGetAll?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserCalendar/GetTasksByWeekly`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (yil !== undefined) {
                localVarQueryParameter['yil'] = yil;
            }

            if (hafta !== undefined) {
                localVarQueryParameter['hafta'] = hafta;
            }

            if (users) {
                localVarQueryParameter['users'] = users;
            }

            if (ticketDepartmentId !== undefined) {
                localVarQueryParameter['ticketDepartmentId'] = ticketDepartmentId;
            }

            if (userLevel !== undefined) {
                localVarQueryParameter['userLevel'] = userLevel;
            }

            if (daysOfWeek) {
                localVarQueryParameter['daysOfWeek'] = daysOfWeek;
            }

            if (percentage) {
                localVarQueryParameter['percentage'] = percentage;
            }

            if (isGetAll !== undefined) {
                localVarQueryParameter['isGetAll'] = isGetAll;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [ticketDepartmentId] 
         * @param {number} [level] 
         * @param {Array<string>} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarGetUsersByDepartmentAndLevelGet: async (ticketDepartmentId?: string, level?: number, userId?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserCalendar/getUsersByDepartmentAndLevel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (ticketDepartmentId !== undefined) {
                localVarQueryParameter['ticketDepartmentId'] = ticketDepartmentId;
            }

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            if (userId) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUserCalendarIdGet', 'id', id)
            const localVarPath = `/api/UserCalendar/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserCalendarInsertDto} [userCalendarInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarPost: async (userCalendarInsertDto?: UserCalendarInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserCalendar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCalendarInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserCalendarUpdateDto} [userCalendarUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarPut: async (userCalendarUpdateDto?: UserCalendarUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserCalendar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCalendarUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarWorkLocationsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserCalendar/WorkLocations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserCalendarApi - functional programming interface
 */
export const UserCalendarApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserCalendarApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserCalendarCheckOtherDeptpermGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketPermDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserCalendarCheckOtherDeptpermGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCalendarApi.apiUserCalendarCheckOtherDeptpermGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserCalendarCheckUserIsManagerGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketPermDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserCalendarCheckUserIsManagerGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCalendarApi.apiUserCalendarCheckUserIsManagerGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserCalendarDelete(id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserCalendarDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCalendarApi.apiUserCalendarDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserCalendarDepartmentIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserCalendarListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserCalendarDepartmentIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCalendarApi.apiUserCalendarDepartmentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserCalendarGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserCalendarListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserCalendarGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCalendarApi.apiUserCalendarGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [year] 
         * @param {number} [month] 
         * @param {Array<string>} [users] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserCalendarGetByUsersGet(year?: number, month?: number, users?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserCalendarListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserCalendarGetByUsersGet(year, month, users, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCalendarApi.apiUserCalendarGetByUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [year] 
         * @param {number} [month] 
         * @param {Array<string>} [userMails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserCalendarGetEmployeeLeavesByMonthlyGet(year?: number, month?: number, userMails?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HolidaysAndLeavesDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserCalendarGetEmployeeLeavesByMonthlyGet(year, month, userMails, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCalendarApi.apiUserCalendarGetEmployeeLeavesByMonthlyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [year] 
         * @param {number} [week] 
         * @param {Array<string>} [userMails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserCalendarGetEmployeeLeavesByWeeklyGet(year?: number, week?: number, userMails?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HolidaysAndLeavesDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserCalendarGetEmployeeLeavesByWeeklyGet(year, week, userMails, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCalendarApi.apiUserCalendarGetEmployeeLeavesByWeeklyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [yil] 
         * @param {number} [hafta] 
         * @param {Array<string>} [users] 
         * @param {string} [ticketDepartmentId] 
         * @param {number} [userLevel] 
         * @param {Array<string>} [daysOfWeek] 
         * @param {Array<number>} [percentage] 
         * @param {boolean} [isGetAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserCalendarGetTasksByWeeklyGet(yil?: number, hafta?: number, users?: Array<string>, ticketDepartmentId?: string, userLevel?: number, daysOfWeek?: Array<string>, percentage?: Array<number>, isGetAll?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserWeeklyTasksDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserCalendarGetTasksByWeeklyGet(yil, hafta, users, ticketDepartmentId, userLevel, daysOfWeek, percentage, isGetAll, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCalendarApi.apiUserCalendarGetTasksByWeeklyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [ticketDepartmentId] 
         * @param {number} [level] 
         * @param {Array<string>} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserCalendarGetUsersByDepartmentAndLevelGet(ticketDepartmentId?: string, level?: number, userId?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserAppDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserCalendarGetUsersByDepartmentAndLevelGet(ticketDepartmentId, level, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCalendarApi.apiUserCalendarGetUsersByDepartmentAndLevelGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserCalendarIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCalendarListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserCalendarIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCalendarApi.apiUserCalendarIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserCalendarInsertDto} [userCalendarInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserCalendarPost(userCalendarInsertDto?: UserCalendarInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserCalendarPost(userCalendarInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCalendarApi.apiUserCalendarPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserCalendarUpdateDto} [userCalendarUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserCalendarPut(userCalendarUpdateDto?: UserCalendarUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserCalendarPut(userCalendarUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCalendarApi.apiUserCalendarPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserCalendarWorkLocationsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserCalendarWorkLocationsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCalendarApi.apiUserCalendarWorkLocationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserCalendarApi - factory interface
 */
export const UserCalendarApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserCalendarApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarCheckOtherDeptpermGet(options?: RawAxiosRequestConfig): AxiosPromise<TicketPermDto> {
            return localVarFp.apiUserCalendarCheckOtherDeptpermGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarCheckUserIsManagerGet(options?: RawAxiosRequestConfig): AxiosPromise<TicketPermDto> {
            return localVarFp.apiUserCalendarCheckUserIsManagerGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarDelete(id?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserCalendarDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarDepartmentIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserCalendarListDto>> {
            return localVarFp.apiUserCalendarDepartmentIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserCalendarListDto>> {
            return localVarFp.apiUserCalendarGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [year] 
         * @param {number} [month] 
         * @param {Array<string>} [users] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarGetByUsersGet(year?: number, month?: number, users?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserCalendarListDto>> {
            return localVarFp.apiUserCalendarGetByUsersGet(year, month, users, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [year] 
         * @param {number} [month] 
         * @param {Array<string>} [userMails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarGetEmployeeLeavesByMonthlyGet(year?: number, month?: number, userMails?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<HolidaysAndLeavesDto> {
            return localVarFp.apiUserCalendarGetEmployeeLeavesByMonthlyGet(year, month, userMails, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [year] 
         * @param {number} [week] 
         * @param {Array<string>} [userMails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarGetEmployeeLeavesByWeeklyGet(year?: number, week?: number, userMails?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<HolidaysAndLeavesDto> {
            return localVarFp.apiUserCalendarGetEmployeeLeavesByWeeklyGet(year, week, userMails, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [yil] 
         * @param {number} [hafta] 
         * @param {Array<string>} [users] 
         * @param {string} [ticketDepartmentId] 
         * @param {number} [userLevel] 
         * @param {Array<string>} [daysOfWeek] 
         * @param {Array<number>} [percentage] 
         * @param {boolean} [isGetAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarGetTasksByWeeklyGet(yil?: number, hafta?: number, users?: Array<string>, ticketDepartmentId?: string, userLevel?: number, daysOfWeek?: Array<string>, percentage?: Array<number>, isGetAll?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserWeeklyTasksDto>> {
            return localVarFp.apiUserCalendarGetTasksByWeeklyGet(yil, hafta, users, ticketDepartmentId, userLevel, daysOfWeek, percentage, isGetAll, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [ticketDepartmentId] 
         * @param {number} [level] 
         * @param {Array<string>} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarGetUsersByDepartmentAndLevelGet(ticketDepartmentId?: string, level?: number, userId?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserAppDto>> {
            return localVarFp.apiUserCalendarGetUsersByDepartmentAndLevelGet(ticketDepartmentId, level, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<UserCalendarListDto> {
            return localVarFp.apiUserCalendarIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserCalendarInsertDto} [userCalendarInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarPost(userCalendarInsertDto?: UserCalendarInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserCalendarPost(userCalendarInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserCalendarUpdateDto} [userCalendarUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarPut(userCalendarUpdateDto?: UserCalendarUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserCalendarPut(userCalendarUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCalendarWorkLocationsGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserCalendarWorkLocationsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserCalendarApi - object-oriented interface
 */
export class UserCalendarApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserCalendarCheckOtherDeptpermGet(options?: RawAxiosRequestConfig) {
        return UserCalendarApiFp(this.configuration).apiUserCalendarCheckOtherDeptpermGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserCalendarCheckUserIsManagerGet(options?: RawAxiosRequestConfig) {
        return UserCalendarApiFp(this.configuration).apiUserCalendarCheckUserIsManagerGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserCalendarDelete(id?: string, options?: RawAxiosRequestConfig) {
        return UserCalendarApiFp(this.configuration).apiUserCalendarDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserCalendarDepartmentIdGet(id: string, options?: RawAxiosRequestConfig) {
        return UserCalendarApiFp(this.configuration).apiUserCalendarDepartmentIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserCalendarGet(options?: RawAxiosRequestConfig) {
        return UserCalendarApiFp(this.configuration).apiUserCalendarGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [year] 
     * @param {number} [month] 
     * @param {Array<string>} [users] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserCalendarGetByUsersGet(year?: number, month?: number, users?: Array<string>, options?: RawAxiosRequestConfig) {
        return UserCalendarApiFp(this.configuration).apiUserCalendarGetByUsersGet(year, month, users, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [year] 
     * @param {number} [month] 
     * @param {Array<string>} [userMails] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserCalendarGetEmployeeLeavesByMonthlyGet(year?: number, month?: number, userMails?: Array<string>, options?: RawAxiosRequestConfig) {
        return UserCalendarApiFp(this.configuration).apiUserCalendarGetEmployeeLeavesByMonthlyGet(year, month, userMails, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [year] 
     * @param {number} [week] 
     * @param {Array<string>} [userMails] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserCalendarGetEmployeeLeavesByWeeklyGet(year?: number, week?: number, userMails?: Array<string>, options?: RawAxiosRequestConfig) {
        return UserCalendarApiFp(this.configuration).apiUserCalendarGetEmployeeLeavesByWeeklyGet(year, week, userMails, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [yil] 
     * @param {number} [hafta] 
     * @param {Array<string>} [users] 
     * @param {string} [ticketDepartmentId] 
     * @param {number} [userLevel] 
     * @param {Array<string>} [daysOfWeek] 
     * @param {Array<number>} [percentage] 
     * @param {boolean} [isGetAll] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserCalendarGetTasksByWeeklyGet(yil?: number, hafta?: number, users?: Array<string>, ticketDepartmentId?: string, userLevel?: number, daysOfWeek?: Array<string>, percentage?: Array<number>, isGetAll?: boolean, options?: RawAxiosRequestConfig) {
        return UserCalendarApiFp(this.configuration).apiUserCalendarGetTasksByWeeklyGet(yil, hafta, users, ticketDepartmentId, userLevel, daysOfWeek, percentage, isGetAll, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [ticketDepartmentId] 
     * @param {number} [level] 
     * @param {Array<string>} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserCalendarGetUsersByDepartmentAndLevelGet(ticketDepartmentId?: string, level?: number, userId?: Array<string>, options?: RawAxiosRequestConfig) {
        return UserCalendarApiFp(this.configuration).apiUserCalendarGetUsersByDepartmentAndLevelGet(ticketDepartmentId, level, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserCalendarIdGet(id: string, options?: RawAxiosRequestConfig) {
        return UserCalendarApiFp(this.configuration).apiUserCalendarIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserCalendarInsertDto} [userCalendarInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserCalendarPost(userCalendarInsertDto?: UserCalendarInsertDto, options?: RawAxiosRequestConfig) {
        return UserCalendarApiFp(this.configuration).apiUserCalendarPost(userCalendarInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserCalendarUpdateDto} [userCalendarUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserCalendarPut(userCalendarUpdateDto?: UserCalendarUpdateDto, options?: RawAxiosRequestConfig) {
        return UserCalendarApiFp(this.configuration).apiUserCalendarPut(userCalendarUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserCalendarWorkLocationsGet(options?: RawAxiosRequestConfig) {
        return UserCalendarApiFp(this.configuration).apiUserCalendarWorkLocationsGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserTenantRolesApi - axios parameter creator
 */
export const UserTenantRolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} userId 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTenantRolesByUserIdTenantIdGet: async (userId: string, tenantId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiUserTenantRolesByUserIdTenantIdGet', 'userId', userId)
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('apiUserTenantRolesByUserIdTenantIdGet', 'tenantId', tenantId)
            const localVarPath = `/api/UserTenantRoles/by/{userId}/{tenantId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserTenantRolesApi - functional programming interface
 */
export const UserTenantRolesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserTenantRolesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} userId 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserTenantRolesByUserIdTenantIdGet(userId: string, tenantId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserTenantRolesByUserIdTenantIdGet(userId, tenantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserTenantRolesApi.apiUserTenantRolesByUserIdTenantIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserTenantRolesApi - factory interface
 */
export const UserTenantRolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserTenantRolesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} userId 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTenantRolesByUserIdTenantIdGet(userId: string, tenantId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.apiUserTenantRolesByUserIdTenantIdGet(userId, tenantId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserTenantRolesApi - object-oriented interface
 */
export class UserTenantRolesApi extends BaseAPI {
    /**
     * 
     * @param {string} userId 
     * @param {string} tenantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserTenantRolesByUserIdTenantIdGet(userId: string, tenantId: string, options?: RawAxiosRequestConfig) {
        return UserTenantRolesApiFp(this.configuration).apiUserTenantRolesByUserIdTenantIdGet(userId, tenantId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserTenantsApi - axios parameter creator
 */
export const UserTenantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserTenantBulkAssignUsersDto} [userTenantBulkAssignUsersDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTenantsBulkAssignUsersPost: async (userTenantBulkAssignUsersDto?: UserTenantBulkAssignUsersDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserTenants/bulk/assign-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userTenantBulkAssignUsersDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTenantsByTenantTenantIdGet: async (tenantId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('apiUserTenantsByTenantTenantIdGet', 'tenantId', tenantId)
            const localVarPath = `/api/UserTenants/by-tenant/{tenantId}`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTenantsByUserIdTenantIdGet: async (userId: string, tenantId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiUserTenantsByUserIdTenantIdGet', 'userId', userId)
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('apiUserTenantsByUserIdTenantIdGet', 'tenantId', tenantId)
            const localVarPath = `/api/UserTenants/by/{userId}/{tenantId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTenantsByUserUserIdGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiUserTenantsByUserUserIdGet', 'userId', userId)
            const localVarPath = `/api/UserTenants/by-user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTenantsFullGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserTenants/full`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTenantsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserTenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTenantsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUserTenantsIdDelete', 'id', id)
            const localVarPath = `/api/UserTenants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserTenantInsertDto} [userTenantInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTenantsPost: async (userTenantInsertDto?: UserTenantInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserTenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userTenantInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserTenantUpdateDto} [userTenantUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTenantsPut: async (userTenantUpdateDto?: UserTenantUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserTenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userTenantUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserTenantsApi - functional programming interface
 */
export const UserTenantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserTenantsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserTenantBulkAssignUsersDto} [userTenantBulkAssignUsersDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserTenantsBulkAssignUsersPost(userTenantBulkAssignUsersDto?: UserTenantBulkAssignUsersDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserTenantsBulkAssignUsersPost(userTenantBulkAssignUsersDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserTenantsApi.apiUserTenantsBulkAssignUsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserTenantsByTenantTenantIdGet(tenantId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserTenantByTenantDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserTenantsByTenantTenantIdGet(tenantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserTenantsApi.apiUserTenantsByTenantTenantIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserTenantsByUserIdTenantIdGet(userId: string, tenantId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserTenantsByUserIdTenantIdGet(userId, tenantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserTenantsApi.apiUserTenantsByUserIdTenantIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserTenantsByUserUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserTenantWithAdminFlagDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserTenantsByUserUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserTenantsApi.apiUserTenantsByUserUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserTenantsFullGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserTenantsFullGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserTenantsApi.apiUserTenantsFullGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserTenantsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserTenantsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserTenantsApi.apiUserTenantsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserTenantsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserTenantsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserTenantsApi.apiUserTenantsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserTenantInsertDto} [userTenantInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserTenantsPost(userTenantInsertDto?: UserTenantInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserTenantsPost(userTenantInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserTenantsApi.apiUserTenantsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserTenantUpdateDto} [userTenantUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserTenantsPut(userTenantUpdateDto?: UserTenantUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserTenantsPut(userTenantUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserTenantsApi.apiUserTenantsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserTenantsApi - factory interface
 */
export const UserTenantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserTenantsApiFp(configuration)
    return {
        /**
         * 
         * @param {UserTenantBulkAssignUsersDto} [userTenantBulkAssignUsersDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTenantsBulkAssignUsersPost(userTenantBulkAssignUsersDto?: UserTenantBulkAssignUsersDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserTenantsBulkAssignUsersPost(userTenantBulkAssignUsersDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTenantsByTenantTenantIdGet(tenantId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserTenantByTenantDto>> {
            return localVarFp.apiUserTenantsByTenantTenantIdGet(tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTenantsByUserIdTenantIdGet(userId: string, tenantId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserTenantsByUserIdTenantIdGet(userId, tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTenantsByUserUserIdGet(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserTenantWithAdminFlagDto>> {
            return localVarFp.apiUserTenantsByUserUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTenantsFullGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserTenantsFullGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTenantsGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserTenantsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTenantsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserTenantsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserTenantInsertDto} [userTenantInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTenantsPost(userTenantInsertDto?: UserTenantInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserTenantsPost(userTenantInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserTenantUpdateDto} [userTenantUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTenantsPut(userTenantUpdateDto?: UserTenantUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserTenantsPut(userTenantUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserTenantsApi - object-oriented interface
 */
export class UserTenantsApi extends BaseAPI {
    /**
     * 
     * @param {UserTenantBulkAssignUsersDto} [userTenantBulkAssignUsersDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserTenantsBulkAssignUsersPost(userTenantBulkAssignUsersDto?: UserTenantBulkAssignUsersDto, options?: RawAxiosRequestConfig) {
        return UserTenantsApiFp(this.configuration).apiUserTenantsBulkAssignUsersPost(userTenantBulkAssignUsersDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tenantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserTenantsByTenantTenantIdGet(tenantId: string, options?: RawAxiosRequestConfig) {
        return UserTenantsApiFp(this.configuration).apiUserTenantsByTenantTenantIdGet(tenantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {string} tenantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserTenantsByUserIdTenantIdGet(userId: string, tenantId: string, options?: RawAxiosRequestConfig) {
        return UserTenantsApiFp(this.configuration).apiUserTenantsByUserIdTenantIdGet(userId, tenantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserTenantsByUserUserIdGet(userId: string, options?: RawAxiosRequestConfig) {
        return UserTenantsApiFp(this.configuration).apiUserTenantsByUserUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserTenantsFullGet(options?: RawAxiosRequestConfig) {
        return UserTenantsApiFp(this.configuration).apiUserTenantsFullGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserTenantsGet(options?: RawAxiosRequestConfig) {
        return UserTenantsApiFp(this.configuration).apiUserTenantsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserTenantsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return UserTenantsApiFp(this.configuration).apiUserTenantsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserTenantInsertDto} [userTenantInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserTenantsPost(userTenantInsertDto?: UserTenantInsertDto, options?: RawAxiosRequestConfig) {
        return UserTenantsApiFp(this.configuration).apiUserTenantsPost(userTenantInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserTenantUpdateDto} [userTenantUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUserTenantsPut(userTenantUpdateDto?: UserTenantUpdateDto, options?: RawAxiosRequestConfig) {
        return UserTenantsApiFp(this.configuration).apiUserTenantsPut(userTenantUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VesaSupportApi - axios parameter creator
 */
export const VesaSupportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVesaSupportGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/VesaSupport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVesaSupportGetAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/VesaSupport/GetAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVesaSupportGetSelectListGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/VesaSupport/GetSelectList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VesaSupportApi - functional programming interface
 */
export const VesaSupportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VesaSupportApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVesaSupportGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVesaSupportGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VesaSupportApi.apiVesaSupportGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVesaSupportGetAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExcelList>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVesaSupportGetAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VesaSupportApi.apiVesaSupportGetAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVesaSupportGetSelectListGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AllList>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVesaSupportGetSelectListGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VesaSupportApi.apiVesaSupportGetSelectListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VesaSupportApi - factory interface
 */
export const VesaSupportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VesaSupportApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVesaSupportGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiVesaSupportGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVesaSupportGetAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ExcelList>> {
            return localVarFp.apiVesaSupportGetAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVesaSupportGetSelectListGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<AllList>> {
            return localVarFp.apiVesaSupportGetSelectListGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VesaSupportApi - object-oriented interface
 */
export class VesaSupportApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiVesaSupportGet(options?: RawAxiosRequestConfig) {
        return VesaSupportApiFp(this.configuration).apiVesaSupportGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiVesaSupportGetAllGet(options?: RawAxiosRequestConfig) {
        return VesaSupportApiFp(this.configuration).apiVesaSupportGetAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiVesaSupportGetSelectListGet(options?: RawAxiosRequestConfig) {
        return VesaSupportApiFp(this.configuration).apiVesaSupportGetSelectListGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkCompanyApi - axios parameter creator
 */
export const WorkCompanyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WorkCompany`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyGetAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WorkCompany/GetAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyGetApproveWorkDesignGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WorkCompany/GetApproveWorkDesign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyGetAssingListGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WorkCompany/GetAssingList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWorkCompanyIdDelete', 'id', id)
            const localVarPath = `/api/WorkCompany/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWorkCompanyIdGet', 'id', id)
            const localVarPath = `/api/WorkCompany/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkCompanyInsertDto} [workCompanyInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyPost: async (workCompanyInsertDto?: WorkCompanyInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WorkCompany`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workCompanyInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkCompanyUpdateDto} [workCompanyUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyPut: async (workCompanyUpdateDto?: WorkCompanyUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WorkCompany`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workCompanyUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkCompanyApi - functional programming interface
 */
export const WorkCompanyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkCompanyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkCompanyGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkCompanyDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkCompanyGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkCompanyApi.apiWorkCompanyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkCompanyGetAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkCompanyDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkCompanyGetAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkCompanyApi.apiWorkCompanyGetAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkCompanyGetApproveWorkDesignGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkCompanyGetApproveWorkDesignGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkCompanyApi.apiWorkCompanyGetApproveWorkDesignGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkCompanyGetAssingListGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkCompanyDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkCompanyGetAssingListGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkCompanyApi.apiWorkCompanyGetAssingListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkCompanyIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkCompanyIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkCompanyApi.apiWorkCompanyIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkCompanyIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkCompanyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkCompanyIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkCompanyApi.apiWorkCompanyIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {WorkCompanyInsertDto} [workCompanyInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkCompanyPost(workCompanyInsertDto?: WorkCompanyInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkCompanyPost(workCompanyInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkCompanyApi.apiWorkCompanyPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {WorkCompanyUpdateDto} [workCompanyUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkCompanyPut(workCompanyUpdateDto?: WorkCompanyUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkCompanyPut(workCompanyUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkCompanyApi.apiWorkCompanyPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkCompanyApi - factory interface
 */
export const WorkCompanyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkCompanyApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<WorkCompanyDto>> {
            return localVarFp.apiWorkCompanyGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyGetAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<WorkCompanyDto>> {
            return localVarFp.apiWorkCompanyGetAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyGetApproveWorkDesignGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiWorkCompanyGetApproveWorkDesignGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyGetAssingListGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<WorkCompanyDto>> {
            return localVarFp.apiWorkCompanyGetAssingListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiWorkCompanyIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<WorkCompanyDto> {
            return localVarFp.apiWorkCompanyIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkCompanyInsertDto} [workCompanyInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyPost(workCompanyInsertDto?: WorkCompanyInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiWorkCompanyPost(workCompanyInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkCompanyUpdateDto} [workCompanyUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyPut(workCompanyUpdateDto?: WorkCompanyUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiWorkCompanyPut(workCompanyUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkCompanyApi - object-oriented interface
 */
export class WorkCompanyApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkCompanyGet(options?: RawAxiosRequestConfig) {
        return WorkCompanyApiFp(this.configuration).apiWorkCompanyGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkCompanyGetAllGet(options?: RawAxiosRequestConfig) {
        return WorkCompanyApiFp(this.configuration).apiWorkCompanyGetAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkCompanyGetApproveWorkDesignGet(options?: RawAxiosRequestConfig) {
        return WorkCompanyApiFp(this.configuration).apiWorkCompanyGetApproveWorkDesignGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkCompanyGetAssingListGet(options?: RawAxiosRequestConfig) {
        return WorkCompanyApiFp(this.configuration).apiWorkCompanyGetAssingListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkCompanyIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return WorkCompanyApiFp(this.configuration).apiWorkCompanyIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkCompanyIdGet(id: string, options?: RawAxiosRequestConfig) {
        return WorkCompanyApiFp(this.configuration).apiWorkCompanyIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkCompanyInsertDto} [workCompanyInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkCompanyPost(workCompanyInsertDto?: WorkCompanyInsertDto, options?: RawAxiosRequestConfig) {
        return WorkCompanyApiFp(this.configuration).apiWorkCompanyPost(workCompanyInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkCompanyUpdateDto} [workCompanyUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkCompanyPut(workCompanyUpdateDto?: WorkCompanyUpdateDto, options?: RawAxiosRequestConfig) {
        return WorkCompanyApiFp(this.configuration).apiWorkCompanyPut(workCompanyUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkCompanySystemInfoApi - axios parameter creator
 */
export const WorkCompanySystemInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanySystemInfoByCompanyIdIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWorkCompanySystemInfoByCompanyIdIdGet', 'id', id)
            const localVarPath = `/api/WorkCompanySystemInfo/by-company-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanySystemInfoBySystemIdIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWorkCompanySystemInfoBySystemIdIdGet', 'id', id)
            const localVarPath = `/api/WorkCompanySystemInfo/by-system-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanySystemInfoGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WorkCompanySystemInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanySystemInfoIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWorkCompanySystemInfoIdDelete', 'id', id)
            const localVarPath = `/api/WorkCompanySystemInfo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkCompanySystemInfoInsertDto} [workCompanySystemInfoInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanySystemInfoPost: async (workCompanySystemInfoInsertDto?: WorkCompanySystemInfoInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WorkCompanySystemInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workCompanySystemInfoInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkCompanySystemInfoUpdateDto} [workCompanySystemInfoUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanySystemInfoPut: async (workCompanySystemInfoUpdateDto?: WorkCompanySystemInfoUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WorkCompanySystemInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workCompanySystemInfoUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkCompanySystemInfoApi - functional programming interface
 */
export const WorkCompanySystemInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkCompanySystemInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkCompanySystemInfoByCompanyIdIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkCompanySystemInfoListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkCompanySystemInfoByCompanyIdIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkCompanySystemInfoApi.apiWorkCompanySystemInfoByCompanyIdIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkCompanySystemInfoBySystemIdIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkCompanySystemInfoListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkCompanySystemInfoBySystemIdIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkCompanySystemInfoApi.apiWorkCompanySystemInfoBySystemIdIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkCompanySystemInfoGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkCompanySystemInfoListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkCompanySystemInfoGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkCompanySystemInfoApi.apiWorkCompanySystemInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkCompanySystemInfoIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkCompanySystemInfoIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkCompanySystemInfoApi.apiWorkCompanySystemInfoIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {WorkCompanySystemInfoInsertDto} [workCompanySystemInfoInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkCompanySystemInfoPost(workCompanySystemInfoInsertDto?: WorkCompanySystemInfoInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkCompanySystemInfoPost(workCompanySystemInfoInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkCompanySystemInfoApi.apiWorkCompanySystemInfoPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {WorkCompanySystemInfoUpdateDto} [workCompanySystemInfoUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkCompanySystemInfoPut(workCompanySystemInfoUpdateDto?: WorkCompanySystemInfoUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkCompanySystemInfoPut(workCompanySystemInfoUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkCompanySystemInfoApi.apiWorkCompanySystemInfoPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkCompanySystemInfoApi - factory interface
 */
export const WorkCompanySystemInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkCompanySystemInfoApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanySystemInfoByCompanyIdIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<WorkCompanySystemInfoListDto>> {
            return localVarFp.apiWorkCompanySystemInfoByCompanyIdIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanySystemInfoBySystemIdIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<WorkCompanySystemInfoListDto> {
            return localVarFp.apiWorkCompanySystemInfoBySystemIdIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanySystemInfoGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<WorkCompanySystemInfoListDto>> {
            return localVarFp.apiWorkCompanySystemInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanySystemInfoIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiWorkCompanySystemInfoIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkCompanySystemInfoInsertDto} [workCompanySystemInfoInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanySystemInfoPost(workCompanySystemInfoInsertDto?: WorkCompanySystemInfoInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiWorkCompanySystemInfoPost(workCompanySystemInfoInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkCompanySystemInfoUpdateDto} [workCompanySystemInfoUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanySystemInfoPut(workCompanySystemInfoUpdateDto?: WorkCompanySystemInfoUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiWorkCompanySystemInfoPut(workCompanySystemInfoUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkCompanySystemInfoApi - object-oriented interface
 */
export class WorkCompanySystemInfoApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkCompanySystemInfoByCompanyIdIdGet(id: string, options?: RawAxiosRequestConfig) {
        return WorkCompanySystemInfoApiFp(this.configuration).apiWorkCompanySystemInfoByCompanyIdIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkCompanySystemInfoBySystemIdIdGet(id: string, options?: RawAxiosRequestConfig) {
        return WorkCompanySystemInfoApiFp(this.configuration).apiWorkCompanySystemInfoBySystemIdIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkCompanySystemInfoGet(options?: RawAxiosRequestConfig) {
        return WorkCompanySystemInfoApiFp(this.configuration).apiWorkCompanySystemInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkCompanySystemInfoIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return WorkCompanySystemInfoApiFp(this.configuration).apiWorkCompanySystemInfoIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkCompanySystemInfoInsertDto} [workCompanySystemInfoInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkCompanySystemInfoPost(workCompanySystemInfoInsertDto?: WorkCompanySystemInfoInsertDto, options?: RawAxiosRequestConfig) {
        return WorkCompanySystemInfoApiFp(this.configuration).apiWorkCompanySystemInfoPost(workCompanySystemInfoInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkCompanySystemInfoUpdateDto} [workCompanySystemInfoUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkCompanySystemInfoPut(workCompanySystemInfoUpdateDto?: WorkCompanySystemInfoUpdateDto, options?: RawAxiosRequestConfig) {
        return WorkCompanySystemInfoApiFp(this.configuration).apiWorkCompanySystemInfoPut(workCompanySystemInfoUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkCompanyTicketMatrisApi - axios parameter creator
 */
export const WorkCompanyTicketMatrisApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyTicketMatrisGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WorkCompanyTicketMatris`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyTicketMatrisIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWorkCompanyTicketMatrisIdDelete', 'id', id)
            const localVarPath = `/api/WorkCompanyTicketMatris/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyTicketMatrisIdGet: async (id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WorkCompanyTicketMatris/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkCompanyTicketMatrisInsertDto} [workCompanyTicketMatrisInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyTicketMatrisPost: async (workCompanyTicketMatrisInsertDto?: WorkCompanyTicketMatrisInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WorkCompanyTicketMatris`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workCompanyTicketMatrisInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkCompanyTicketMatrisUpdateDto} [workCompanyTicketMatrisUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyTicketMatrisPut: async (workCompanyTicketMatrisUpdateDto?: WorkCompanyTicketMatrisUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WorkCompanyTicketMatris`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workCompanyTicketMatrisUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkCompanyTicketMatrisApi - functional programming interface
 */
export const WorkCompanyTicketMatrisApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkCompanyTicketMatrisApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkCompanyTicketMatrisGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkCompanyTicketMatrisListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkCompanyTicketMatrisGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkCompanyTicketMatrisApi.apiWorkCompanyTicketMatrisGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkCompanyTicketMatrisIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkCompanyTicketMatrisIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkCompanyTicketMatrisApi.apiWorkCompanyTicketMatrisIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkCompanyTicketMatrisIdGet(id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkCompanyTicketMatrisListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkCompanyTicketMatrisIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkCompanyTicketMatrisApi.apiWorkCompanyTicketMatrisIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {WorkCompanyTicketMatrisInsertDto} [workCompanyTicketMatrisInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkCompanyTicketMatrisPost(workCompanyTicketMatrisInsertDto?: WorkCompanyTicketMatrisInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkCompanyTicketMatrisPost(workCompanyTicketMatrisInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkCompanyTicketMatrisApi.apiWorkCompanyTicketMatrisPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {WorkCompanyTicketMatrisUpdateDto} [workCompanyTicketMatrisUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkCompanyTicketMatrisPut(workCompanyTicketMatrisUpdateDto?: WorkCompanyTicketMatrisUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkCompanyTicketMatrisPut(workCompanyTicketMatrisUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkCompanyTicketMatrisApi.apiWorkCompanyTicketMatrisPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkCompanyTicketMatrisApi - factory interface
 */
export const WorkCompanyTicketMatrisApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkCompanyTicketMatrisApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyTicketMatrisGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<WorkCompanyTicketMatrisListDto>> {
            return localVarFp.apiWorkCompanyTicketMatrisGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyTicketMatrisIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiWorkCompanyTicketMatrisIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyTicketMatrisIdGet(id?: string, options?: RawAxiosRequestConfig): AxiosPromise<WorkCompanyTicketMatrisListDto> {
            return localVarFp.apiWorkCompanyTicketMatrisIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkCompanyTicketMatrisInsertDto} [workCompanyTicketMatrisInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyTicketMatrisPost(workCompanyTicketMatrisInsertDto?: WorkCompanyTicketMatrisInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiWorkCompanyTicketMatrisPost(workCompanyTicketMatrisInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkCompanyTicketMatrisUpdateDto} [workCompanyTicketMatrisUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkCompanyTicketMatrisPut(workCompanyTicketMatrisUpdateDto?: WorkCompanyTicketMatrisUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiWorkCompanyTicketMatrisPut(workCompanyTicketMatrisUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkCompanyTicketMatrisApi - object-oriented interface
 */
export class WorkCompanyTicketMatrisApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkCompanyTicketMatrisGet(options?: RawAxiosRequestConfig) {
        return WorkCompanyTicketMatrisApiFp(this.configuration).apiWorkCompanyTicketMatrisGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkCompanyTicketMatrisIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return WorkCompanyTicketMatrisApiFp(this.configuration).apiWorkCompanyTicketMatrisIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkCompanyTicketMatrisIdGet(id?: string, options?: RawAxiosRequestConfig) {
        return WorkCompanyTicketMatrisApiFp(this.configuration).apiWorkCompanyTicketMatrisIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkCompanyTicketMatrisInsertDto} [workCompanyTicketMatrisInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkCompanyTicketMatrisPost(workCompanyTicketMatrisInsertDto?: WorkCompanyTicketMatrisInsertDto, options?: RawAxiosRequestConfig) {
        return WorkCompanyTicketMatrisApiFp(this.configuration).apiWorkCompanyTicketMatrisPost(workCompanyTicketMatrisInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkCompanyTicketMatrisUpdateDto} [workCompanyTicketMatrisUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkCompanyTicketMatrisPut(workCompanyTicketMatrisUpdateDto?: WorkCompanyTicketMatrisUpdateDto, options?: RawAxiosRequestConfig) {
        return WorkCompanyTicketMatrisApiFp(this.configuration).apiWorkCompanyTicketMatrisPut(workCompanyTicketMatrisUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkFlowApi - axios parameter creator
 */
export const WorkFlowApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {WorkFlowContiuneApiDto} [workFlowContiuneApiDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkFlowContiunePost: async (workFlowContiuneApiDto?: WorkFlowContiuneApiDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WorkFlow/Contiune`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workFlowContiuneApiDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkFlowStartApiDto} [workFlowStartApiDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkFlowStartAndTicketPost: async (workFlowStartApiDto?: WorkFlowStartApiDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WorkFlow/StartAndTicket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workFlowStartApiDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkFlowStartApiDto} [workFlowStartApiDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkFlowStartPost: async (workFlowStartApiDto?: WorkFlowStartApiDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WorkFlow/Start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workFlowStartApiDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkFlowApi - functional programming interface
 */
export const WorkFlowApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkFlowApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {WorkFlowContiuneApiDto} [workFlowContiuneApiDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkFlowContiunePost(workFlowContiuneApiDto?: WorkFlowContiuneApiDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkFlowHeadDtoResultStartOrContinue>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkFlowContiunePost(workFlowContiuneApiDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkFlowApi.apiWorkFlowContiunePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {WorkFlowStartApiDto} [workFlowStartApiDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkFlowStartAndTicketPost(workFlowStartApiDto?: WorkFlowStartApiDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkFlowHeadDtoResultStartOrContinue>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkFlowStartAndTicketPost(workFlowStartApiDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkFlowApi.apiWorkFlowStartAndTicketPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {WorkFlowStartApiDto} [workFlowStartApiDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkFlowStartPost(workFlowStartApiDto?: WorkFlowStartApiDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkFlowHeadDtoResultStartOrContinue>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkFlowStartPost(workFlowStartApiDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkFlowApi.apiWorkFlowStartPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkFlowApi - factory interface
 */
export const WorkFlowApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkFlowApiFp(configuration)
    return {
        /**
         * 
         * @param {WorkFlowContiuneApiDto} [workFlowContiuneApiDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkFlowContiunePost(workFlowContiuneApiDto?: WorkFlowContiuneApiDto, options?: RawAxiosRequestConfig): AxiosPromise<WorkFlowHeadDtoResultStartOrContinue> {
            return localVarFp.apiWorkFlowContiunePost(workFlowContiuneApiDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkFlowStartApiDto} [workFlowStartApiDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkFlowStartAndTicketPost(workFlowStartApiDto?: WorkFlowStartApiDto, options?: RawAxiosRequestConfig): AxiosPromise<WorkFlowHeadDtoResultStartOrContinue> {
            return localVarFp.apiWorkFlowStartAndTicketPost(workFlowStartApiDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkFlowStartApiDto} [workFlowStartApiDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkFlowStartPost(workFlowStartApiDto?: WorkFlowStartApiDto, options?: RawAxiosRequestConfig): AxiosPromise<WorkFlowHeadDtoResultStartOrContinue> {
            return localVarFp.apiWorkFlowStartPost(workFlowStartApiDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkFlowApi - object-oriented interface
 */
export class WorkFlowApi extends BaseAPI {
    /**
     * 
     * @param {WorkFlowContiuneApiDto} [workFlowContiuneApiDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkFlowContiunePost(workFlowContiuneApiDto?: WorkFlowContiuneApiDto, options?: RawAxiosRequestConfig) {
        return WorkFlowApiFp(this.configuration).apiWorkFlowContiunePost(workFlowContiuneApiDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkFlowStartApiDto} [workFlowStartApiDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkFlowStartAndTicketPost(workFlowStartApiDto?: WorkFlowStartApiDto, options?: RawAxiosRequestConfig) {
        return WorkFlowApiFp(this.configuration).apiWorkFlowStartAndTicketPost(workFlowStartApiDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkFlowStartApiDto} [workFlowStartApiDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkFlowStartPost(workFlowStartApiDto?: WorkFlowStartApiDto, options?: RawAxiosRequestConfig) {
        return WorkFlowApiFp(this.configuration).apiWorkFlowStartPost(workFlowStartApiDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkFlowDefinationApi - axios parameter creator
 */
export const WorkFlowDefinationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkFlowDefinationGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WorkFlowDefination`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkFlowDefinationGetWorkFlowListByMenuGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WorkFlowDefination/GetWorkFlowListByMenu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkFlowDefinationIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWorkFlowDefinationIdGet', 'id', id)
            const localVarPath = `/api/WorkFlowDefination/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkFlowDefinationInsertDto} [workFlowDefinationInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkFlowDefinationPost: async (workFlowDefinationInsertDto?: WorkFlowDefinationInsertDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WorkFlowDefination`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workFlowDefinationInsertDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkFlowDefinationUpdateDto} [workFlowDefinationUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkFlowDefinationPut: async (workFlowDefinationUpdateDto?: WorkFlowDefinationUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WorkFlowDefination`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workFlowDefinationUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkFlowDefinationApi - functional programming interface
 */
export const WorkFlowDefinationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkFlowDefinationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkFlowDefinationGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkFlowDefinationListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkFlowDefinationGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkFlowDefinationApi.apiWorkFlowDefinationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkFlowDefinationGetWorkFlowListByMenuGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkFlowDefinationGetWorkFlowListByMenuGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkFlowDefinationApi.apiWorkFlowDefinationGetWorkFlowListByMenuGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkFlowDefinationIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkFlowDefinationListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkFlowDefinationIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkFlowDefinationApi.apiWorkFlowDefinationIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {WorkFlowDefinationInsertDto} [workFlowDefinationInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkFlowDefinationPost(workFlowDefinationInsertDto?: WorkFlowDefinationInsertDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkFlowDefination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkFlowDefinationPost(workFlowDefinationInsertDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkFlowDefinationApi.apiWorkFlowDefinationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {WorkFlowDefinationUpdateDto} [workFlowDefinationUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkFlowDefinationPut(workFlowDefinationUpdateDto?: WorkFlowDefinationUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkFlowDefinationUpdateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkFlowDefinationPut(workFlowDefinationUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkFlowDefinationApi.apiWorkFlowDefinationPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkFlowDefinationApi - factory interface
 */
export const WorkFlowDefinationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkFlowDefinationApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkFlowDefinationGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<WorkFlowDefinationListDto>> {
            return localVarFp.apiWorkFlowDefinationGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkFlowDefinationGetWorkFlowListByMenuGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiWorkFlowDefinationGetWorkFlowListByMenuGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkFlowDefinationIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<WorkFlowDefinationListDto> {
            return localVarFp.apiWorkFlowDefinationIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkFlowDefinationInsertDto} [workFlowDefinationInsertDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkFlowDefinationPost(workFlowDefinationInsertDto?: WorkFlowDefinationInsertDto, options?: RawAxiosRequestConfig): AxiosPromise<WorkFlowDefination> {
            return localVarFp.apiWorkFlowDefinationPost(workFlowDefinationInsertDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkFlowDefinationUpdateDto} [workFlowDefinationUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkFlowDefinationPut(workFlowDefinationUpdateDto?: WorkFlowDefinationUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<WorkFlowDefinationUpdateDto> {
            return localVarFp.apiWorkFlowDefinationPut(workFlowDefinationUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkFlowDefinationApi - object-oriented interface
 */
export class WorkFlowDefinationApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkFlowDefinationGet(options?: RawAxiosRequestConfig) {
        return WorkFlowDefinationApiFp(this.configuration).apiWorkFlowDefinationGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkFlowDefinationGetWorkFlowListByMenuGet(options?: RawAxiosRequestConfig) {
        return WorkFlowDefinationApiFp(this.configuration).apiWorkFlowDefinationGetWorkFlowListByMenuGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkFlowDefinationIdGet(id: string, options?: RawAxiosRequestConfig) {
        return WorkFlowDefinationApiFp(this.configuration).apiWorkFlowDefinationIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkFlowDefinationInsertDto} [workFlowDefinationInsertDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkFlowDefinationPost(workFlowDefinationInsertDto?: WorkFlowDefinationInsertDto, options?: RawAxiosRequestConfig) {
        return WorkFlowDefinationApiFp(this.configuration).apiWorkFlowDefinationPost(workFlowDefinationInsertDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkFlowDefinationUpdateDto} [workFlowDefinationUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkFlowDefinationPut(workFlowDefinationUpdateDto?: WorkFlowDefinationUpdateDto, options?: RawAxiosRequestConfig) {
        return WorkFlowDefinationApiFp(this.configuration).apiWorkFlowDefinationPut(workFlowDefinationUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkFlowItemApi - axios parameter creator
 */
export const WorkFlowItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} workFlowHeadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkFlowItemGetApproveItemsWorkFlowHeadIdGet: async (workFlowHeadId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workFlowHeadId' is not null or undefined
            assertParamExists('apiWorkFlowItemGetApproveItemsWorkFlowHeadIdGet', 'workFlowHeadId', workFlowHeadId)
            const localVarPath = `/api/WorkFlowItem/GetApproveItems/{workFlowHeadId}`
                .replace(`{${"workFlowHeadId"}}`, encodeURIComponent(String(workFlowHeadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workFlowHeadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkFlowItemGetStatusWorkFlowHeadIdGet: async (workFlowHeadId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workFlowHeadId' is not null or undefined
            assertParamExists('apiWorkFlowItemGetStatusWorkFlowHeadIdGet', 'workFlowHeadId', workFlowHeadId)
            const localVarPath = `/api/WorkFlowItem/getStatus/{workFlowHeadId}`
                .replace(`{${"workFlowHeadId"}}`, encodeURIComponent(String(workFlowHeadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkFlowItemApi - functional programming interface
 */
export const WorkFlowItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkFlowItemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} workFlowHeadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkFlowItemGetApproveItemsWorkFlowHeadIdGet(workFlowHeadId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkFlowItemDtoWithApproveItems>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkFlowItemGetApproveItemsWorkFlowHeadIdGet(workFlowHeadId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkFlowItemApi.apiWorkFlowItemGetApproveItemsWorkFlowHeadIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workFlowHeadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkFlowItemGetStatusWorkFlowHeadIdGet(workFlowHeadId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkFlowItemGetStatusWorkFlowHeadIdGet(workFlowHeadId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkFlowItemApi.apiWorkFlowItemGetStatusWorkFlowHeadIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkFlowItemApi - factory interface
 */
export const WorkFlowItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkFlowItemApiFp(configuration)
    return {
        /**
         * 
         * @param {string} workFlowHeadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkFlowItemGetApproveItemsWorkFlowHeadIdGet(workFlowHeadId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<WorkFlowItemDtoWithApproveItems>> {
            return localVarFp.apiWorkFlowItemGetApproveItemsWorkFlowHeadIdGet(workFlowHeadId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} workFlowHeadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkFlowItemGetStatusWorkFlowHeadIdGet(workFlowHeadId: string, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.apiWorkFlowItemGetStatusWorkFlowHeadIdGet(workFlowHeadId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkFlowItemApi - object-oriented interface
 */
export class WorkFlowItemApi extends BaseAPI {
    /**
     * 
     * @param {string} workFlowHeadId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkFlowItemGetApproveItemsWorkFlowHeadIdGet(workFlowHeadId: string, options?: RawAxiosRequestConfig) {
        return WorkFlowItemApiFp(this.configuration).apiWorkFlowItemGetApproveItemsWorkFlowHeadIdGet(workFlowHeadId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} workFlowHeadId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkFlowItemGetStatusWorkFlowHeadIdGet(workFlowHeadId: string, options?: RawAxiosRequestConfig) {
        return WorkFlowItemApiFp(this.configuration).apiWorkFlowItemGetStatusWorkFlowHeadIdGet(workFlowHeadId, options).then((request) => request(this.axios, this.basePath));
    }
}



